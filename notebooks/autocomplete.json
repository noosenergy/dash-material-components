{
    "pd": {
        "importName": "pandas",
        "items": {
            "ArrowDtype": {
                "type": "class",
                "info": "An ExtensionDtype for PyArrow data types.",
                "returns": "pd.ArrowDtype",
                "items": {
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "name": {
                        "type": "property",
                        "info": "A string identifying the data type.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "pyarrow_dtype": "pa.DataType"
                        }
                    }
                }
            },
            "BooleanDtype": {
                "type": "class",
                "info": "Extension dtype for boolean data.",
                "returns": "pd.BooleanDtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "property",
                        "info": "A character code (one of 'biufcmMOSUV'), default 'O'",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "property",
                        "info": "Return an instance of our numpy dtype",
                        "returns": "np.dtype"
                    },
                    "type": {
                        "type": "property",
                        "info": "The scalar type for the array, e.g. ``int``",
                        "returns": "pd.CategoricalDtype.type"
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Categorical": {
                "type": "class",
                "info": "Represent a categorical variable in classic R / S-plus fashion.",
                "returns": "pd.Categorical",
                "items": {
                    "T": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "Select a subset of self.",
                        "returns": "pd.Categorical |noos.analytics._core.collections.Any",
                        "parameters": {
                            "key": "PositionalIndexer2D"
                        }
                    },
                    "add_categories": {
                        "type": "function",
                        "info": "Add new categories.",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "new_categories": "."
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return the index of maximum value.",
                        "returns": "None",
                        "parameters": {
                            "axis": "AxisInt",
                            "skipna": "bool"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return the index of minimum value.",
                        "returns": "None",
                        "parameters": {
                            "axis": "AxisInt",
                            "skipna": "bool"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Return the indices that would sort the Categorical.",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "ascending": "bool",
                            "kind": "SortKind",
                            "kwargs": "."
                        }
                    },
                    "as_ordered": {
                        "type": "function",
                        "info": "Set the Categorical to be ordered.",
                        "returns": "pd.Categorical",
                        "parameters": {}
                    },
                    "as_unordered": {
                        "type": "function",
                        "info": "Set the Categorical to be unordered.",
                        "returns": "pd.Categorical",
                        "parameters": {}
                    },
                    "astype": {
                        "type": "function",
                        "info": "Coerce this type to another dtype",
                        "returns": "ArrayLike",
                        "parameters": {
                            "dtype": "AstypeArg",
                            "copy": "bool"
                        }
                    },
                    "categories": {
                        "type": "property",
                        "info": "The categories of this categorical.",
                        "returns": "pd.Index"
                    },
                    "check_for_ordered": {
                        "type": "function",
                        "info": "assert that we are ordered",
                        "returns": "None",
                        "parameters": {
                            "op": "<class 'NoneType'>"
                        }
                    },
                    "codes": {
                        "type": "property",
                        "info": "The category codes of this categorical index.",
                        "returns": "np.ndarray"
                    },
                    "copy": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "delete": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "describe": {
                        "type": "function",
                        "info": "Describes this Categorical",
                        "returns": "pd.DataFrame",
                        "parameters": {}
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return ExtensionArray without NA values.",
                        "returns": "pd.Categorical",
                        "parameters": {}
                    },
                    "dtype": {
                        "type": "property",
                        "info": "The :class:`~pandas.api.types.CategoricalDtype` for this instance.",
                        "returns": "pd.CategoricalDtype"
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Return boolean ndarray denoting duplicate values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "keep": "Literal['first', 'last', False]"
                        }
                    },
                    "equals": {
                        "type": "function",
                        "info": "Returns True if categorical arrays are equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "object"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the extension array as an enumerated type.",
                        "returns": "tuple[np.ndarray, ExtensionArray]",
                        "parameters": {
                            "use_na_sentinel": "bool"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values using the specified method.",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "value": "<class 'NoneType'>",
                            "method": "<class 'NoneType'>",
                            "limit": "int | None",
                            "copy": "bool"
                        }
                    },
                    "from_codes": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "insert": {
                        "type": "function",
                        "info": "Make new ExtensionArray inserting new item at location. Follows",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "loc": "int",
                            "item": "<class 'NoneType'>"
                        }
                    },
                    "interpolate": {
                        "type": "function",
                        "info": "See DataFrame.interpolate.__doc__.",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "method": "InterpolateOptions",
                            "axis": "int",
                            "index": "Index",
                            "limit": ".",
                            "limit_direction": ".",
                            "limit_area": ".",
                            "copy": "bool",
                            "kwargs": "."
                        }
                    },
                    "isin": {
                        "type": "function",
                        "info": "Check whether `values` are contained in Categorical.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "values": "ArrayLike"
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Detect missing values",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "map": {
                        "type": "function",
                        "info": "Map categories using an input mapping or function.",
                        "returns": "None",
                        "parameters": {
                            "mapper": "None",
                            "na_action": "Literal['ignore'] | None | lib.NoDefault"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "The maximum value of the object.",
                        "returns": "None",
                        "parameters": {
                            "skipna": "bool",
                            "kwargs": "None"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Memory usage of my values",
                        "returns": "int",
                        "parameters": {
                            "deep": "bool"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "The minimum value of the object.",
                        "returns": "None",
                        "parameters": {
                            "skipna": "bool",
                            "kwargs": "None"
                        }
                    },
                    "nbytes": {
                        "type": "property",
                        "info": "The number of bytes needed to store this object in memory.",
                        "returns": "int"
                    },
                    "ndim": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "notna": {
                        "type": "function",
                        "info": "Inverse of isna",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Inverse of isna",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "ordered": {
                        "type": "property",
                        "info": "Whether the categories have an ordered relationship.",
                        "returns": "Ordered"
                    },
                    "ravel": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "remove_categories": {
                        "type": "function",
                        "info": "Remove the specified categories.",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "removals": "."
                        }
                    },
                    "remove_unused_categories": {
                        "type": "function",
                        "info": "Remove categories which are not used.",
                        "returns": "pd.Categorical",
                        "parameters": {}
                    },
                    "rename_categories": {
                        "type": "function",
                        "info": "Rename categories.",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "new_categories": "."
                        }
                    },
                    "reorder_categories": {
                        "type": "function",
                        "info": "Reorder categories as specified in new_categories.",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "new_categories": ".",
                            "ordered": "."
                        }
                    },
                    "repeat": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "reshape": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "npt.NDArray[np.intp] | np.intp",
                        "parameters": {
                            "value": "NumpyValueArrayLike | ExtensionArray",
                            "side": "Literal['left', 'right']",
                            "sorter": "NumpySorter | None"
                        }
                    },
                    "set_categories": {
                        "type": "function",
                        "info": "Set the categories to the specified new categories.",
                        "returns": "None",
                        "parameters": {
                            "new_categories": "None",
                            "ordered": "None",
                            "rename": "bool"
                        }
                    },
                    "set_ordered": {
                        "type": "function",
                        "info": "Set the ordered attribute to the boolean value.",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "value": "bool"
                        }
                    },
                    "shape": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift values by desired number.",
                        "returns": "None",
                        "parameters": {
                            "periods": "int",
                            "fill_value": "None"
                        }
                    },
                    "size": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Sort the Categorical by category value returning a new",
                        "returns": "pd.Categorical | None",
                        "parameters": {
                            "inplace": "bool",
                            "ascending": "bool",
                            "na_position": "str"
                        }
                    },
                    "swapaxes": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "take": {
                        "type": "function",
                        "info": "Take elements from an array.",
                        "returns": "pd.Categorical",
                        "parameters": {
                            "indices": "TakeIndexer",
                            "allow_fill": "bool",
                            "fill_value": "Any",
                            "axis": "AxisInt"
                        }
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Alias for tolist.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "Convert to a NumPy ndarray.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object"
                        }
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "pd.Series.list",
                        "parameters": {}
                    },
                    "transpose": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return the ``Categorical`` which ``categories`` and ``codes`` are",
                        "returns": "pd.Categorical",
                        "parameters": {}
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of each category.",
                        "returns": "pd.Series",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "view": {
                        "type": "function",
                        "info": "Return a view on the array.",
                        "returns": "ArrayLike",
                        "parameters": {
                            "dtype": "Dtype | None"
                        }
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "values": ".",
                            "categories": ".",
                            "ordered": ".",
                            "dtype": "Dtype | None",
                            "fastpath": "bool | lib.NoDefault",
                            "copy": "bool"
                        }
                    }
                }
            },
            "CategoricalDtype": {
                "type": "class",
                "info": "Type for categorical data with the categories and orderedness.",
                "returns": "pd.CategoricalDtype",
                "items": {
                    "type": {
                        "type": "class",
                        "info": "the type of CategoricalDtype, this metaclass determines subclass ability",
                        "returns": "pd.CategoricalDtype.type",
                        "items": {
                            "__call__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "mro": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "kind": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "base": {
                        "type": "object",
                        "info": "DType class corresponding to the scalar type and dtype of the same name.",
                        "returns": "numpy.dtypes.ObjectDType"
                    },
                    "categories": {
                        "type": "property",
                        "info": "An ``Index`` containing the unique categories allowed.",
                        "returns": "pd.Index"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "isbuiltin": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "isnative": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "object"
                    },
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "num": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "ordered": {
                        "type": "property",
                        "info": "Whether the categories have an ordered relationship.",
                        "returns": "Ordered"
                    },
                    "reset_cache": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "shape": {
                        "type": "object",
                        "info": "Built-in immutable sequence.",
                        "returns": "tuple"
                    },
                    "str": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "update_dtype": {
                        "type": "function",
                        "info": "Returns a CategoricalDtype with categories and ordered taken from dtype",
                        "returns": "pd.CategoricalDtype",
                        "parameters": {
                            "dtype": "str_type | CategoricalDtype"
                        }
                    },
                    "validate_categories": {
                        "type": "function",
                        "info": "Validates that we have good categories",
                        "returns": "pd.Index",
                        "parameters": {
                            "categories": ".",
                            "fastpath": "bool"
                        }
                    },
                    "validate_ordered": {
                        "type": "function",
                        "info": "Validates that we have a valid ordered parameter. If",
                        "returns": "None",
                        "parameters": {
                            "ordered": "Ordered"
                        }
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "categories": ".",
                            "ordered": "Ordered"
                        }
                    }
                }
            },
            "CategoricalIndex": {
                "type": "class",
                "info": "Index based on an underlying :class:`Categorical`.",
                "returns": "pd.CategoricalIndex",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.CategoricalIndex"
                    },
                    "codes": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "np.ndarray"
                    },
                    "categories": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "pd.Index"
                    },
                    "ordered": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "bool | None"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "Override numpy.ndarray's __getitem__ method to work as desired.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "add_categories": {
                        "type": "function",
                        "info": "Add new categories.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "append": {
                        "type": "function",
                        "info": "Append a collection of Index options together.",
                        "returns": "pd.Index",
                        "parameters": {
                            "other": "Index | Sequence[Index]"
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return int position of the largest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return int position of the smallest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Return the indices that would sort the Categorical.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "array": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "as_ordered": {
                        "type": "function",
                        "info": "Set the Categorical to be ordered.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "as_unordered": {
                        "type": "function",
                        "info": "Set the Categorical to be unordered.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the label from the index, or, if not present, the previous one.",
                        "returns": "None",
                        "parameters": {
                            "label": "None"
                        }
                    },
                    "asof_locs": {
                        "type": "function",
                        "info": "Return the locations (indices) of labels in the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "where": "Index",
                            "mask": "npt.NDArray[np.bool_]"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Create an Index with values cast to dtypes.",
                        "returns": "None",
                        "parameters": {
                            "dtype": "None",
                            "copy": "bool"
                        }
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "name": "Hashable | None",
                            "deep": "bool"
                        }
                    },
                    "delete": {
                        "type": "function",
                        "info": "Make new Index with passed location(-s) deleted.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "loc": "<class 'NoneType'>"
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "Computes the difference between consecutive values in the Index object.",
                        "returns": "pd.Index",
                        "parameters": {
                            "periods": "int"
                        }
                    },
                    "difference": {
                        "type": "function",
                        "info": "Return a new Index with elements of index not in `other`.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Make new Index with passed list of labels deleted.",
                        "returns": "pd.Index",
                        "parameters": {
                            "labels": "Index | np.ndarray | Iterable[Hashable]",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return Index with duplicate values removed.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return index with requested level(s) removed.",
                        "returns": "None",
                        "parameters": {
                            "level": "IndexLabel"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return Index without NA/NaN values.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "how": "AnyAll"
                        }
                    },
                    "dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Indicate duplicate index values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "",
                        "returns": "bool"
                    },
                    "equals": {
                        "type": "function",
                        "info": "Determine if two CategoricalIndex objects contain the same elements.",
                        "returns": "bool",
                        "parameters": {
                            "other": "object"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the object as an enumerated type or categorical variable.",
                        "returns": "tuple[npt.NDArray[np.intp], Index]",
                        "parameters": {
                            "sort": "bool",
                            "use_na_sentinel": "bool"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values with the specified value.",
                        "returns": "None",
                        "parameters": {
                            "value": "None",
                            "downcast": "None"
                        }
                    },
                    "format": {
                        "type": "function",
                        "info": "Render a string representation of the Index.",
                        "returns": "list[str_t]",
                        "parameters": {
                            "name": "bool",
                            "formatter": "Callable | None",
                            "na_rep": "str_t"
                        }
                    },
                    "get_indexer": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "get_indexer_for": {
                        "type": "function",
                        "info": "Guaranteed return of an indexer even when non-unique.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_indexer_non_unique": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_level_values": {
                        "type": "function",
                        "info": "Return an Index of values for requested level.",
                        "returns": "pd.Index",
                        "parameters": {
                            "level": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "get_loc": {
                        "type": "function",
                        "info": "Get integer location, slice or boolean mask for requested label.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "get_slice_bound": {
                        "type": "function",
                        "info": "Calculate slice bound that corresponds to given label.",
                        "returns": "int",
                        "parameters": {
                            "label": "<class 'int'>",
                            "side": "Literal['left', 'right']"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group the index labels by a given array of values.",
                        "returns": "PrettyDict[Hashable, np.ndarray]",
                        "parameters": {
                            "values": "."
                        }
                    },
                    "has_duplicates": {
                        "type": "property",
                        "info": "Check if the Index has duplicate values.",
                        "returns": "bool"
                    },
                    "hasnans": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "holds_integer": {
                        "type": "function",
                        "info": "Whether the type is an integer type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "identical": {
                        "type": "function",
                        "info": "Similar to equals, but checks that object attributes and types are also equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "If we have an object dtype, try to infer a non-object dtype.",
                        "returns": "pd.Index",
                        "parameters": {
                            "copy": "bool"
                        }
                    },
                    "inferred_type": {
                        "type": "property",
                        "info": "Return a string of the type inferred from the values.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "insert": {
                        "type": "function",
                        "info": "Make new Index inserting new item at location.",
                        "returns": "pd.Index",
                        "parameters": {
                            "loc": "int",
                            "item": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "intersection": {
                        "type": "function",
                        "info": "Form the intersection of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "bool"
                        }
                    },
                    "is_": {
                        "type": "function",
                        "info": "More flexible, faster check like ``is`` but that works through views.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "is_boolean": {
                        "type": "function",
                        "info": "Check if the Index only consists of booleans.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_categorical": {
                        "type": "function",
                        "info": "Check if the Index holds categorical data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_floating": {
                        "type": "function",
                        "info": "Check if the Index is a floating type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_integer": {
                        "type": "function",
                        "info": "Check if the Index only consists of integers.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_interval": {
                        "type": "function",
                        "info": "Check if the Index holds Interval objects.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_monotonic_decreasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or decreasing.",
                        "returns": "bool"
                    },
                    "is_monotonic_increasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or increasing.",
                        "returns": "bool"
                    },
                    "is_numeric": {
                        "type": "function",
                        "info": "Check if the Index only consists of numeric data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_object": {
                        "type": "function",
                        "info": "Check if the Index is of the object dtype.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_unique": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "isin": {
                        "type": "function",
                        "info": "Return a boolean array where the index values are in `values`.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "values": ".",
                            "level": "."
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "item": {
                        "type": "function",
                        "info": "Return the first element of the underlying data as a Python scalar.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "join": {
                        "type": "function",
                        "info": "Compute join_index and indexers to conform data structures to the new index.",
                        "returns": "pd.Index| tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "other": "Index",
                            "how": "JoinHow",
                            "level": "Level | None",
                            "return_indexers": "bool",
                            "sort": "bool"
                        }
                    },
                    "map": {
                        "type": "function",
                        "info": "Map values using input an input mapping or function.",
                        "returns": "None",
                        "parameters": {
                            "mapper": "None",
                            "na_action": "Literal['ignore'] | None"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "The maximum value of the object.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Memory usage of the values.",
                        "returns": "int",
                        "parameters": {
                            "deep": "bool"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "The minimum value of the object.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "name": {
                        "type": "property",
                        "info": "Return Index or MultiIndex name.",
                        "returns": "Hashable"
                    },
                    "names": {
                        "type": "property",
                        "info": "",
                        "returns": "FrozenList"
                    },
                    "nbytes": {
                        "type": "property",
                        "info": "Return the number of bytes in the underlying data.",
                        "returns": "int"
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Number of dimensions of the underlying data, by definition 1.",
                        "returns": "int"
                    },
                    "nlevels": {
                        "type": "property",
                        "info": "Number of levels.",
                        "returns": "int"
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Return number of unique elements in the object.",
                        "returns": "int",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "putmask": {
                        "type": "function",
                        "info": "Return a new Index of the values set with the mask.",
                        "returns": "pd.Index",
                        "parameters": {
                            "mask": "<class 'pandas.core.indexes.base.Index'>",
                            "value": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "ravel": {
                        "type": "function",
                        "info": "Return a view on self.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "order": "str_t"
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Create index with target's values (move/add/delete values as necessary)",
                        "returns": "tuple[Index, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "target": ".",
                            "method": ".",
                            "level": ".",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "remove_categories": {
                        "type": "function",
                        "info": "Remove the specified categories.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "remove_unused_categories": {
                        "type": "function",
                        "info": "Remove categories which are not used.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "rename_categories": {
                        "type": "function",
                        "info": "Rename categories.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "reorder_categories": {
                        "type": "function",
                        "info": "Reorder categories as specified in new_categories.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "repeat": {
                        "type": "function",
                        "info": "Repeat elements of a Index.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "repeats": "<class 'NoneType'>",
                            "axis": "None"
                        }
                    },
                    "round": {
                        "type": "function",
                        "info": "Round each value in the Index to the given number of decimals.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "decimals": "int"
                        }
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "set_categories": {
                        "type": "function",
                        "info": "Set the categories to the specified new categories.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple of the shape of the underlying data.",
                        "returns": "Shape"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of time frequency increments.",
                        "returns": "None",
                        "parameters": {
                            "periods": "int",
                            "freq": "None"
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return the number of elements in the underlying data.",
                        "returns": "int"
                    },
                    "slice_indexer": {
                        "type": "function",
                        "info": "Compute the slice indexer for input labels and step.",
                        "returns": "slice",
                        "parameters": {
                            "start": "Hashable | None",
                            "end": "Hashable | None",
                            "step": "int | None"
                        }
                    },
                    "slice_locs": {
                        "type": "function",
                        "info": "Compute slice locations for input labels.",
                        "returns": "tuple[int, int]",
                        "parameters": {
                            "start": "tuple[int, int]",
                            "end": "tuple[int, int]",
                            "step": "tuple[int, int]"
                        }
                    },
                    "sort": {
                        "type": "function",
                        "info": "Use sort_values instead.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Return a sorted copy of the index.",
                        "returns": "pd.CategoricalIndex | tuple[pd.CategoricalIndex, np.ndarray]",
                        "parameters": {
                            "return_indexer": "bool",
                            "ascending": "bool",
                            "na_position": "NaPosition",
                            "key": "Callable | None"
                        }
                    },
                    "sortlevel": {
                        "type": "function",
                        "info": "For internal compatibility with the Index API.",
                        "returns": "None",
                        "parameters": {
                            "level": "None",
                            "ascending": "bool | list[bool]",
                            "sort_remaining": "None",
                            "na_position": "NaPosition"
                        }
                    },
                    "str": {
                        "type": "class",
                        "info": "Vectorized string functions for Series and Index.",
                        "returns": "pd.CategoricalIndex.str",
                        "items": {
                            "__getitem__": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "key": "None"
                                }
                            },
                            "capitalize": {
                                "type": "function",
                                "info": "Convert strings in the Series/Index to be capitalized.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "casefold": {
                                "type": "function",
                                "info": "Convert strings in the Series/Index to be casefolded.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "cat": {
                                "type": "function",
                                "info": "Concatenate strings in the Series/Index with given separator.",
                                "returns": "pd.pd.CategoricalIndex.str | pd.pd.CategoricalIndex.Series | pd.pd.CategoricalIndex.Index",
                                "parameters": {
                                    "others": ".",
                                    "sep": "str | None",
                                    "na_rep": ".",
                                    "join": "AlignJoin"
                                }
                            },
                            "center": {
                                "type": "function",
                                "info": "Pad left and right side of strings in the Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "width": "int",
                                    "fillchar": "str"
                                }
                            },
                            "contains": {
                                "type": "function",
                                "info": "Test if pattern or regex is contained within a string of a Series or Index.",
                                "returns": "None",
                                "parameters": {
                                    "pat": "None",
                                    "case": "bool",
                                    "flags": "int",
                                    "na": "None",
                                    "regex": "bool"
                                }
                            },
                            "count": {
                                "type": "function",
                                "info": "Count occurrences of pattern in each string of the Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "pat": "None",
                                    "flags": "int"
                                }
                            },
                            "decode": {
                                "type": "function",
                                "info": "Decode character string in the Series/Index using indicated encoding.",
                                "returns": "pd.pd.CategoricalIndex.str",
                                "parameters": {
                                    "encoding": ".",
                                    "errors": "str",
                                    "dtype": "str | DtypeObj | None"
                                }
                            },
                            "encode": {
                                "type": "function",
                                "info": "Encode character string in the Series/Index using indicated encoding.",
                                "returns": "None",
                                "parameters": {
                                    "encoding": "None",
                                    "errors": "str"
                                }
                            },
                            "endswith": {
                                "type": "function",
                                "info": "Test if the end of each string element matches a pattern.",
                                "returns": "pd.Series|pd.Index",
                                "parameters": {
                                    "pat": "str | tuple[str, ...]",
                                    "na": "Scalar | lib.NoDefault"
                                }
                            },
                            "extract": {
                                "type": "function",
                                "info": "Extract capture groups in the regex `pat` as columns in a DataFrame.",
                                "returns": "pd.DataFrame|pd.Series|pd.Index",
                                "parameters": {
                                    "pat": "str",
                                    "flags": "int",
                                    "expand": "bool"
                                }
                            },
                            "extractall": {
                                "type": "function",
                                "info": "Extract capture groups in the regex `pat` as columns in DataFrame.",
                                "returns": "pd.DataFrame",
                                "parameters": {
                                    "pat": ".",
                                    "flags": "int"
                                }
                            },
                            "find": {
                                "type": "function",
                                "info": "Return lowest indexes in each strings in the Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "sub": "None",
                                    "start": "int",
                                    "end": "None"
                                }
                            },
                            "findall": {
                                "type": "function",
                                "info": "Find all occurrences of pattern or regular expression in the Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "pat": "None",
                                    "flags": "int"
                                }
                            },
                            "fullmatch": {
                                "type": "function",
                                "info": "Determine if each string entirely matches a regular expression.",
                                "returns": "None",
                                "parameters": {
                                    "pat": "None",
                                    "case": "bool",
                                    "flags": "int",
                                    "na": "None"
                                }
                            },
                            "get": {
                                "type": "function",
                                "info": "Extract element from each component at specified position or with specified key.",
                                "returns": "None",
                                "parameters": {
                                    "i": "None"
                                }
                            },
                            "get_dummies": {
                                "type": "function",
                                "info": "Return DataFrame of dummy/indicator variables for Series.",
                                "returns": "None",
                                "parameters": {
                                    "sep": "str"
                                }
                            },
                            "index": {
                                "type": "function",
                                "info": "Return lowest indexes in each string in Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "sub": "None",
                                    "start": "int",
                                    "end": "None"
                                }
                            },
                            "isalnum": {
                                "type": "function",
                                "info": "Check whether all characters in each string are alphanumeric.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "isalpha": {
                                "type": "function",
                                "info": "Check whether all characters in each string are alphabetic.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "isdecimal": {
                                "type": "function",
                                "info": "Check whether all characters in each string are decimal.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "isdigit": {
                                "type": "function",
                                "info": "Check whether all characters in each string are digits.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "islower": {
                                "type": "function",
                                "info": "Check whether all characters in each string are lowercase.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "isnumeric": {
                                "type": "function",
                                "info": "Check whether all characters in each string are numeric.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "isspace": {
                                "type": "function",
                                "info": "Check whether all characters in each string are whitespace.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "istitle": {
                                "type": "function",
                                "info": "Check whether all characters in each string are titlecase.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "isupper": {
                                "type": "function",
                                "info": "Check whether all characters in each string are uppercase.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "join": {
                                "type": "function",
                                "info": "Join lists contained as elements in the Series/Index with passed delimiter.",
                                "returns": "None",
                                "parameters": {
                                    "sep": "str"
                                }
                            },
                            "len": {
                                "type": "function",
                                "info": "Compute the length of each element in the Series/Index.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "ljust": {
                                "type": "function",
                                "info": "Pad right side of strings in the Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "width": "int",
                                    "fillchar": "str"
                                }
                            },
                            "lower": {
                                "type": "function",
                                "info": "Convert strings in the Series/Index to lowercase.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "lstrip": {
                                "type": "function",
                                "info": "Remove leading characters.",
                                "returns": "None",
                                "parameters": {
                                    "to_strip": "None"
                                }
                            },
                            "match": {
                                "type": "function",
                                "info": "Determine if each string starts with a match of a regular expression.",
                                "returns": "None",
                                "parameters": {
                                    "pat": "str",
                                    "case": "bool",
                                    "flags": "int",
                                    "na": "None"
                                }
                            },
                            "normalize": {
                                "type": "function",
                                "info": "Return the Unicode normal form for the strings in the Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "form": "None"
                                }
                            },
                            "pad": {
                                "type": "function",
                                "info": "Pad strings in the Series/Index up to width.",
                                "returns": "None",
                                "parameters": {
                                    "width": "int",
                                    "side": "Literal['left', 'right', 'both']",
                                    "fillchar": "str"
                                }
                            },
                            "partition": {
                                "type": "function",
                                "info": "Split the string at the first occurrence of `sep`.",
                                "returns": "None",
                                "parameters": {
                                    "sep": "str",
                                    "expand": "bool"
                                }
                            },
                            "removeprefix": {
                                "type": "function",
                                "info": "Remove a prefix from an object series.",
                                "returns": "None",
                                "parameters": {
                                    "prefix": "str"
                                }
                            },
                            "removesuffix": {
                                "type": "function",
                                "info": "Remove a suffix from an object series.",
                                "returns": "None",
                                "parameters": {
                                    "suffix": "str"
                                }
                            },
                            "repeat": {
                                "type": "function",
                                "info": "Duplicate each string in the Series or Index.",
                                "returns": "None",
                                "parameters": {
                                    "repeats": "None"
                                }
                            },
                            "replace": {
                                "type": "function",
                                "info": "Replace each occurrence of pattern/regex in the Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "pat": "str | re.Pattern",
                                    "repl": "str | Callable",
                                    "n": "int",
                                    "case": "bool | None",
                                    "flags": "int",
                                    "regex": "bool"
                                }
                            },
                            "rfind": {
                                "type": "function",
                                "info": "Return highest indexes in each strings in the Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "sub": "None",
                                    "start": "int",
                                    "end": "None"
                                }
                            },
                            "rindex": {
                                "type": "function",
                                "info": "Return highest indexes in each string in Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "sub": "None",
                                    "start": "int",
                                    "end": "None"
                                }
                            },
                            "rjust": {
                                "type": "function",
                                "info": "Pad left side of strings in the Series/Index.",
                                "returns": "None",
                                "parameters": {
                                    "width": "int",
                                    "fillchar": "str"
                                }
                            },
                            "rpartition": {
                                "type": "function",
                                "info": "Split the string at the last occurrence of `sep`.",
                                "returns": "None",
                                "parameters": {
                                    "sep": "str",
                                    "expand": "bool"
                                }
                            },
                            "rsplit": {
                                "type": "function",
                                "info": "Split strings around given separator/delimiter.",
                                "returns": "None",
                                "parameters": {
                                    "pat": "None",
                                    "n": "None",
                                    "expand": "bool"
                                }
                            },
                            "rstrip": {
                                "type": "function",
                                "info": "Remove trailing characters.",
                                "returns": "None",
                                "parameters": {
                                    "to_strip": "None"
                                }
                            },
                            "slice": {
                                "type": "function",
                                "info": "Slice substrings from each element in the Series or Index.",
                                "returns": "None",
                                "parameters": {
                                    "start": "None",
                                    "stop": "None",
                                    "step": "None"
                                }
                            },
                            "slice_replace": {
                                "type": "function",
                                "info": "Replace a positional slice of a string with another value.",
                                "returns": "None",
                                "parameters": {
                                    "start": "None",
                                    "stop": "None",
                                    "repl": "None"
                                }
                            },
                            "split": {
                                "type": "function",
                                "info": "Split strings around given separator/delimiter.",
                                "returns": "None",
                                "parameters": {
                                    "pat": "str | re.Pattern | None",
                                    "n": "None",
                                    "expand": "bool",
                                    "regex": "bool | None"
                                }
                            },
                            "startswith": {
                                "type": "function",
                                "info": "Test if the start of each string element matches a pattern.",
                                "returns": "pd.Series|pd.Index",
                                "parameters": {
                                    "pat": "str | tuple[str, ...]",
                                    "na": "Scalar | lib.NoDefault"
                                }
                            },
                            "strip": {
                                "type": "function",
                                "info": "Remove leading and trailing characters.",
                                "returns": "None",
                                "parameters": {
                                    "to_strip": "None"
                                }
                            },
                            "swapcase": {
                                "type": "function",
                                "info": "Convert strings in the Series/Index to be swapcased.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "title": {
                                "type": "function",
                                "info": "Convert strings in the Series/Index to titlecase.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "translate": {
                                "type": "function",
                                "info": "Map all characters in the string through the given mapping table.",
                                "returns": "None",
                                "parameters": {
                                    "table": "None"
                                }
                            },
                            "upper": {
                                "type": "function",
                                "info": "Convert strings in the Series/Index to uppercase.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "wrap": {
                                "type": "function",
                                "info": "Wrap strings in Series/Index at specified line width.",
                                "returns": "None",
                                "parameters": {
                                    "width": "int",
                                    "kwargs": "None"
                                }
                            },
                            "zfill": {
                                "type": "function",
                                "info": "Pad strings in the Series/Index by prepending '0' characters.",
                                "returns": "None",
                                "parameters": {
                                    "width": "int"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "data": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "symmetric_difference": {
                        "type": "function",
                        "info": "Compute the symmetric difference of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "result_name": "None",
                            "sort": "None"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return a new Index of the values selected by the indices.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "indices": "<class 'NoneType'>",
                            "axis": "Axis",
                            "allow_fill": "bool",
                            "fill_value": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "to_flat_index": {
                        "type": "function",
                        "info": "Identity method.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {}
                    },
                    "to_frame": {
                        "type": "function",
                        "info": "Create a DataFrame with a column containing the Index.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "index": "bool",
                            "name": "Hashable"
                        }
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "A NumPy ndarray representing the values in this Series or Index.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object",
                            "kwargs": "."
                        }
                    },
                    "to_series": {
                        "type": "function",
                        "info": "Create a Series with both index and values equal to the index keys.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": ".",
                            "name": "Hashable | None"
                        }
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "args": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "union": {
                        "type": "function",
                        "info": "Form the union of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return unique values in the index.",
                        "returns": "pd.CategoricalIndex",
                        "parameters": {
                            "level": "Hashable | None"
                        }
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of unique values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "bins": ".",
                            "dropna": "bool"
                        }
                    },
                    "values": {
                        "type": "property",
                        "info": "Return an array representing the data in the Index.",
                        "returns": "ArrayLike"
                    },
                    "view": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "cls": "None"
                        }
                    },
                    "where": {
                        "type": "function",
                        "info": "Replace values where the condition is False.",
                        "returns": "pd.Index",
                        "parameters": {
                            "cond": "<class 'pandas.core.indexes.base.Index'>",
                            "other": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "DataFrame": {
                "type": "class",
                "info": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.",
                "returns": "pd.DataFrame",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "The transpose of the DataFrame.",
                        "returns": "pd.DataFrame"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "abs": {
                        "type": "function",
                        "info": "Return a Series/DataFrame with absolute numeric value of each element.",
                        "returns": "pd.DataFrame",
                        "parameters": {}
                    },
                    "add": {
                        "type": "function",
                        "info": "Get Addition of dataframe and other, element-wise (binary operator `add`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "add_prefix": {
                        "type": "function",
                        "info": "Prefix labels with string `prefix`.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "prefix": "str",
                            "axis": "Axis | None"
                        }
                    },
                    "add_suffix": {
                        "type": "function",
                        "info": "Suffix labels with string `suffix`.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "suffix": "str",
                            "axis": "Axis | None"
                        }
                    },
                    "agg": {
                        "type": "function",
                        "info": "Aggregate using one or more operations over the specified axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "func": ".",
                            "axis": "Axis",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "aggregate": {
                        "type": "function",
                        "info": "Aggregate using one or more operations over the specified axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "func": ".",
                            "axis": "Axis",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "align": {
                        "type": "function",
                        "info": "Align two objects on their axes with the specified join method.",
                        "returns": "tuple[pd.DataFrame, NDFrameT]",
                        "parameters": {
                            "other": "NDFrameT",
                            "join": "AlignJoin",
                            "axis": "Axis | None",
                            "level": "Level | None",
                            "copy": "bool_t | None",
                            "fill_value": "Hashable | None",
                            "method": "FillnaOptions | None | lib.NoDefault",
                            "limit": "int | None | lib.NoDefault",
                            "fill_axis": "Axis | lib.NoDefault",
                            "broadcast_axis": "Axis | None | lib.NoDefault"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are True, potentially over an axis.",
                        "returns": "pd.Series| bool",
                        "parameters": {
                            "axis": "Axis | None",
                            "bool_only": "bool",
                            "skipna": "bool",
                            "kwargs": "."
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is True, potentially over an axis.",
                        "returns": "pd.Series| bool",
                        "parameters": {
                            "axis": "Axis | None",
                            "bool_only": "bool",
                            "skipna": "bool",
                            "kwargs": "."
                        }
                    },
                    "apply": {
                        "type": "function",
                        "info": "Apply a function along an axis of the DataFrame.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "func": "AggFuncType",
                            "axis": "Axis",
                            "raw": "bool",
                            "result_type": "Literal['expand', 'reduce', 'broadcast'] | None",
                            "args": ".",
                            "by_row": "Literal[False, 'compat']",
                            "engine": "Literal['python', 'numba']",
                            "engine_kwargs": "dict[str, bool] | None",
                            "kwargs": "."
                        }
                    },
                    "applymap": {
                        "type": "function",
                        "info": "Apply a function to a Dataframe elementwise.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "func": "PythonFuncType",
                            "na_action": "NaAction | None",
                            "kwargs": "."
                        }
                    },
                    "asfreq": {
                        "type": "function",
                        "info": "Convert time series to specified frequency.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "freq": "Frequency",
                            "method": "FillnaOptions | None",
                            "how": "Literal['start', 'end'] | None",
                            "normalize": "bool_t",
                            "fill_value": "Hashable | None"
                        }
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the last row(s) without any NaNs before `where`.",
                        "returns": "None",
                        "parameters": {
                            "where": "None",
                            "subset": "None"
                        }
                    },
                    "assign": {
                        "type": "function",
                        "info": "Assign new columns to a DataFrame.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "kwargs": "<class 'pandas.core.frame.DataFrame'>"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Cast a pandas object to a specified dtype ``dtype``.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "dtype": "<class 'NoneType'>",
                            "copy": "bool_t | None",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "at": {
                        "type": "property",
                        "info": "Access a single value for a row/column label pair.",
                        "returns": "_AtIndexer"
                    },
                    "at_time": {
                        "type": "function",
                        "info": "Select values at particular time of day (e.g., 9:30AM).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "time": "<class 'NoneType'>",
                            "asof": "bool_t",
                            "axis": "Axis | None"
                        }
                    },
                    "attrs": {
                        "type": "property",
                        "info": "Dictionary of global attributes of this dataset.",
                        "returns": "dict[Hashable, Any]"
                    },
                    "axes": {
                        "type": "property",
                        "info": "Return a list representing the axes of the DataFrame.",
                        "returns": "list[Index]"
                    },
                    "backfill": {
                        "type": "function",
                        "info": "Fill NA/NaN values by using the next valid observation to fill the gap.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "axis": "None | Axis",
                            "inplace": "bool_t",
                            "limit": "None | int",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "between_time": {
                        "type": "function",
                        "info": "Select values between particular times of the day (e.g., 9:00-9:30 AM).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "start_time": "<class 'NoneType'>",
                            "end_time": "<class 'NoneType'>",
                            "inclusive": "IntervalClosedType",
                            "axis": "Axis | None"
                        }
                    },
                    "bfill": {
                        "type": "function",
                        "info": "Fill NA/NaN values by using the next valid observation to fill the gap.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "axis": "None | Axis",
                            "inplace": "bool_t",
                            "limit": "None | int",
                            "limit_area": "Literal['inside', 'outside'] | None",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "bool": {
                        "type": "function",
                        "info": "Return the bool of a single element Series or DataFrame.",
                        "returns": "bool_t",
                        "parameters": {}
                    },
                    "boxplot": {
                        "type": "function",
                        "info": "Make a box plot from DataFrame columns.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "column": ".",
                            "by": ".",
                            "ax": ".",
                            "fontsize": "int | None",
                            "rot": "int",
                            "grid": "bool",
                            "figsize": "tuple[float, float] | None",
                            "layout": ".",
                            "return_type": ".",
                            "backend": ".",
                            "kwargs": "."
                        }
                    },
                    "columns": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.AxisProperty"
                    },
                    "combine": {
                        "type": "function",
                        "info": "Perform column-wise combine with another DataFrame.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": "DataFrame",
                            "func": "Callable[[Series, Series], Series | Hashable]",
                            "fill_value": "<class 'pandas.core.frame.DataFrame'>",
                            "overwrite": "bool"
                        }
                    },
                    "combine_first": {
                        "type": "function",
                        "info": "Update null elements with value in the same location in `other`.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": "DataFrame"
                        }
                    },
                    "compare": {
                        "type": "function",
                        "info": "Compare to another DataFrame and show the differences.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": "DataFrame",
                            "align_axis": "Axis",
                            "keep_shape": "bool",
                            "keep_equal": "bool",
                            "result_names": "Suffixes"
                        }
                    },
                    "convert_dtypes": {
                        "type": "function",
                        "info": "Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "infer_objects": "bool_t",
                            "convert_string": "bool_t",
                            "convert_integer": "bool_t",
                            "convert_boolean": "bool_t",
                            "convert_floating": "bool_t",
                            "dtype_backend": "DtypeBackend"
                        }
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object's indices and data.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "deep": "bool_t | None"
                        }
                    },
                    "corr": {
                        "type": "function",
                        "info": "Compute pairwise correlation of columns, excluding NA/null values.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "method": "CorrelationMethod",
                            "min_periods": "int",
                            "numeric_only": "bool"
                        }
                    },
                    "corrwith": {
                        "type": "function",
                        "info": "Compute pairwise correlation.",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": "DataFrame | Series",
                            "axis": "Axis",
                            "drop": "bool",
                            "method": "CorrelationMethod",
                            "numeric_only": "bool"
                        }
                    },
                    "count": {
                        "type": "function",
                        "info": "Count non-NA cells for each column or row.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis",
                            "numeric_only": "bool"
                        }
                    },
                    "cov": {
                        "type": "function",
                        "info": "Compute pairwise covariance of columns, excluding NA/null values.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "min_periods": "int | None",
                            "ddof": "int | None",
                            "numeric_only": "bool"
                        }
                    },
                    "cummax": {
                        "type": "function",
                        "info": "Return cumulative maximum over a DataFrame or Series axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "cummin": {
                        "type": "function",
                        "info": "Return cumulative minimum over a DataFrame or Series axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "cumprod": {
                        "type": "function",
                        "info": "Return cumulative product over a DataFrame or Series axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "cumsum": {
                        "type": "function",
                        "info": "Return cumulative sum over a DataFrame or Series axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "describe": {
                        "type": "function",
                        "info": "Generate descriptive statistics.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "percentiles": "<class 'NoneType'>",
                            "include": "<class 'NoneType'>",
                            "exclude": "<class 'NoneType'>"
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "First discrete difference of element.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "periods": "int",
                            "axis": "Axis"
                        }
                    },
                    "div": {
                        "type": "function",
                        "info": "Get Floating division of dataframe and other, element-wise (binary operator `truediv`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "divide": {
                        "type": "function",
                        "info": "Get Floating division of dataframe and other, element-wise (binary operator `truediv`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "dot": {
                        "type": "function",
                        "info": "Compute the matrix multiplication between the DataFrame and other.",
                        "returns": "pd.DataFrame | pd.Series",
                        "parameters": {
                            "other": "AnyArrayLike | DataFrame"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Drop specified labels from rows or columns.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "labels": "IndexLabel | None",
                            "axis": "Axis",
                            "index": "IndexLabel | None",
                            "columns": "IndexLabel | None",
                            "level": "Level | None",
                            "inplace": "bool",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return DataFrame with duplicate rows removed.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "subset": "Hashable | Sequence[Hashable] | None",
                            "keep": "DropKeep",
                            "inplace": "bool",
                            "ignore_index": "bool"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return Series/DataFrame with requested index / column level(s) removed.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "level": "IndexLabel",
                            "axis": "Axis"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Remove missing values.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "axis": "Axis",
                            "how": "AnyAll | lib.NoDefault",
                            "thresh": "int | lib.NoDefault",
                            "subset": "IndexLabel | None",
                            "inplace": "bool",
                            "ignore_index": "bool"
                        }
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Return boolean Series denoting duplicate rows.",
                        "returns": "pd.Series",
                        "parameters": {
                            "subset": "Hashable | Sequence[Hashable] | None",
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "Indicator whether Series/DataFrame is empty.",
                        "returns": "bool_t"
                    },
                    "eq": {
                        "type": "function",
                        "info": "Get Equal to of dataframe and other, element-wise (binary operator `eq`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": "."
                        }
                    },
                    "equals": {
                        "type": "function",
                        "info": "Test whether two objects contain the same elements.",
                        "returns": "bool_t",
                        "parameters": {
                            "other": "object"
                        }
                    },
                    "eval": {
                        "type": "function",
                        "info": "Evaluate a string describing operations on DataFrame columns.",
                        "returns": "noos.analytics._core.collections.Any| None",
                        "parameters": {
                            "expr": "str",
                            "inplace": "bool",
                            "kwargs": "noos.analytics._core.collections.Any| None"
                        }
                    },
                    "ewm": {
                        "type": "function",
                        "info": "Provide exponentially weighted (EW) calculations.",
                        "returns": "ExponentialMovingWindow",
                        "parameters": {
                            "com": "float | None",
                            "span": "float | None",
                            "halflife": "float | TimedeltaConvertibleTypes | None",
                            "alpha": "float | None",
                            "min_periods": "int | None",
                            "adjust": "bool_t",
                            "ignore_na": "bool_t",
                            "axis": "Axis | lib.NoDefault",
                            "times": "np.ndarray | DataFrame | Series | None",
                            "method": "Literal['single', 'table']"
                        }
                    },
                    "expanding": {
                        "type": "function",
                        "info": "Provide expanding window calculations.",
                        "returns": "Expanding",
                        "parameters": {
                            "min_periods": "int",
                            "axis": "Axis | lib.NoDefault",
                            "method": "Literal['single', 'table']"
                        }
                    },
                    "explode": {
                        "type": "function",
                        "info": "Transform each element of a list-like to a row, replicating index values.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "column": "IndexLabel",
                            "ignore_index": "bool"
                        }
                    },
                    "ffill": {
                        "type": "function",
                        "info": "Fill NA/NaN values by propagating the last valid observation to next valid.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "axis": "None | Axis",
                            "inplace": "bool_t",
                            "limit": "None | int",
                            "limit_area": "Literal['inside', 'outside'] | None",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values using the specified method.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "value": "Hashable | Mapping | Series | DataFrame | None",
                            "method": "FillnaOptions | None",
                            "axis": "Axis | None",
                            "inplace": "bool_t",
                            "limit": "int | None",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "filter": {
                        "type": "function",
                        "info": "Subset the dataframe rows or columns according to the specified index labels.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "items": "<class 'NoneType'>",
                            "like": "str | None",
                            "regex": "str | None",
                            "axis": "Axis | None"
                        }
                    },
                    "first": {
                        "type": "function",
                        "info": "Select initial periods of time series data based on a date offset.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "offset": "<class 'NoneType'>"
                        }
                    },
                    "first_valid_index": {
                        "type": "function",
                        "info": "Return index for first non-NA value or None, if no non-NA value is found.",
                        "returns": "Hashable | None",
                        "parameters": {}
                    },
                    "flags": {
                        "type": "property",
                        "info": "Get the properties associated with this pandas object.",
                        "returns": "pd.Flags"
                    },
                    "floordiv": {
                        "type": "function",
                        "info": "Get Integer division of dataframe and other, element-wise (binary operator `floordiv`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "from_dict": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "from_records": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "ge": {
                        "type": "function",
                        "info": "Get Greater than or equal to of dataframe and other, element-wise (binary operator `ge`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": "."
                        }
                    },
                    "get": {
                        "type": "function",
                        "info": "Get item from object for given key (ex: DataFrame column).",
                        "returns": "None",
                        "parameters": {
                            "key": "None",
                            "default": "None"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group DataFrame using a mapper or by a Series of columns.",
                        "returns": "DataFrameGroupBy",
                        "parameters": {
                            "by": ".",
                            "axis": "Axis | lib.NoDefault",
                            "level": "IndexLabel | None",
                            "as_index": "bool",
                            "sort": "bool",
                            "group_keys": "bool",
                            "observed": "bool | lib.NoDefault",
                            "dropna": "bool"
                        }
                    },
                    "gt": {
                        "type": "function",
                        "info": "Get Greater than of dataframe and other, element-wise (binary operator `gt`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": "."
                        }
                    },
                    "head": {
                        "type": "function",
                        "info": "Return the first `n` rows.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "n": "int"
                        }
                    },
                    "hist": {
                        "type": "function",
                        "info": "Make a histogram of the DataFrame's columns.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "data": "DataFrame",
                            "column": "IndexLabel | None",
                            "by": ".",
                            "grid": "bool",
                            "xlabelsize": "int | None",
                            "xrot": "float | None",
                            "ylabelsize": "int | None",
                            "yrot": "float | None",
                            "ax": ".",
                            "sharex": "bool",
                            "sharey": "bool",
                            "figsize": "tuple[int, int] | None",
                            "layout": "tuple[int, int] | None",
                            "bins": "int | Sequence[int]",
                            "backend": "str | None",
                            "legend": "bool",
                            "kwargs": "."
                        }
                    },
                    "iat": {
                        "type": "property",
                        "info": "Access a single value for a row/column pair by integer position.",
                        "returns": "_iAtIndexer"
                    },
                    "idxmax": {
                        "type": "function",
                        "info": "Return index of first occurrence of maximum over requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis",
                            "skipna": "bool",
                            "numeric_only": "bool"
                        }
                    },
                    "idxmin": {
                        "type": "function",
                        "info": "Return index of first occurrence of minimum over requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis",
                            "skipna": "bool",
                            "numeric_only": "bool"
                        }
                    },
                    "iloc": {
                        "type": "property",
                        "info": "Purely integer-location based indexing for selection by position.",
                        "returns": "_iLocIndexer"
                    },
                    "index": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.AxisProperty"
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "Attempt to infer better dtypes for object columns.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "copy": "bool_t | None"
                        }
                    },
                    "info": {
                        "type": "function",
                        "info": "Print a concise summary of a DataFrame.",
                        "returns": "None",
                        "parameters": {
                            "verbose": "bool | None",
                            "buf": "WriteBuffer[str] | None",
                            "max_cols": "int | None",
                            "memory_usage": "bool | str | None",
                            "show_counts": "bool | None"
                        }
                    },
                    "insert": {
                        "type": "function",
                        "info": "Insert column into DataFrame at specified location.",
                        "returns": "None",
                        "parameters": {
                            "loc": "int",
                            "column": "Hashable",
                            "value": "Scalar | AnyArrayLike",
                            "allow_duplicates": "bool | lib.NoDefault"
                        }
                    },
                    "isetitem": {
                        "type": "function",
                        "info": "Set the given value in the column with position `loc`.",
                        "returns": "None",
                        "parameters": {
                            "loc": "<class 'NoneType'>",
                            "value": "<class 'NoneType'>"
                        }
                    },
                    "isin": {
                        "type": "function",
                        "info": "Whether each element in the DataFrame is contained in values.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "values": "Series | DataFrame | Sequence | Mapping"
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "pd.DataFrame",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "DataFrame.isnull is an alias for DataFrame.isna.",
                        "returns": "pd.DataFrame",
                        "parameters": {}
                    },
                    "items": {
                        "type": "function",
                        "info": "Iterate over (column name, Series) pairs.",
                        "returns": "Iterable[tuple[Hashable, Series]]",
                        "parameters": {}
                    },
                    "iterrows": {
                        "type": "function",
                        "info": "Iterate over DataFrame rows as (index, Series) pairs.",
                        "returns": "Iterable[tuple[Hashable, Series]]",
                        "parameters": {}
                    },
                    "itertuples": {
                        "type": "function",
                        "info": "Iterate over DataFrame rows as namedtuples.",
                        "returns": "Iterable[tuple[Any, ...]]",
                        "parameters": {
                            "index": "bool",
                            "name": "str | None"
                        }
                    },
                    "join": {
                        "type": "function",
                        "info": "Join columns of another DataFrame.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": "DataFrame | Series | Iterable[DataFrame | Series]",
                            "on": "IndexLabel | None",
                            "how": "MergeHow",
                            "lsuffix": "str",
                            "rsuffix": "str",
                            "sort": "bool",
                            "validate": "JoinValidate | None"
                        }
                    },
                    "keys": {
                        "type": "function",
                        "info": "Get the 'info axis' (see Indexing for more).",
                        "returns": "pd.Index",
                        "parameters": {}
                    },
                    "kurt": {
                        "type": "function",
                        "info": "Return unbiased kurtosis over requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "kurtosis": {
                        "type": "function",
                        "info": "Return unbiased kurtosis over requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "last": {
                        "type": "function",
                        "info": "Select final periods of time series data based on a date offset.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "offset": "<class 'NoneType'>"
                        }
                    },
                    "last_valid_index": {
                        "type": "function",
                        "info": "Return index for last non-NA value or None, if no non-NA value is found.",
                        "returns": "Hashable | None",
                        "parameters": {}
                    },
                    "le": {
                        "type": "function",
                        "info": "Get Less than or equal to of dataframe and other, element-wise (binary operator `le`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": "."
                        }
                    },
                    "loc": {
                        "type": "property",
                        "info": "Access a group of rows and columns by label(s) or a boolean array.",
                        "returns": "_LocIndexer"
                    },
                    "lt": {
                        "type": "function",
                        "info": "Get Less than of dataframe and other, element-wise (binary operator `lt`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": "."
                        }
                    },
                    "map": {
                        "type": "function",
                        "info": "Apply a function to a Dataframe elementwise.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "func": "PythonFuncType",
                            "na_action": "str | None",
                            "kwargs": "."
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "Return the maximum of the values over the requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "mean": {
                        "type": "function",
                        "info": "Return the mean of the values over the requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "median": {
                        "type": "function",
                        "info": "Return the median of the values over the requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "melt": {
                        "type": "function",
                        "info": "Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "id_vars": ".",
                            "value_vars": ".",
                            "var_name": ".",
                            "value_name": "Hashable",
                            "col_level": "Level | None",
                            "ignore_index": "bool"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Return the memory usage of each column in bytes.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": "bool",
                            "deep": "bool"
                        }
                    },
                    "merge": {
                        "type": "function",
                        "info": "Merge DataFrame or named Series objects with a database-style join.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "right": "DataFrame | Series",
                            "how": "MergeHow",
                            "on": "IndexLabel | AnyArrayLike | None",
                            "left_on": "IndexLabel | AnyArrayLike | None",
                            "right_on": "IndexLabel | AnyArrayLike | None",
                            "left_index": "bool",
                            "right_index": "bool",
                            "sort": "bool",
                            "suffixes": "Suffixes",
                            "copy": "bool | None",
                            "indicator": "str | bool",
                            "validate": "MergeValidate | None"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "Return the minimum of the values over the requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "mod": {
                        "type": "function",
                        "info": "Get Modulo of dataframe and other, element-wise (binary operator `mod`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "mode": {
                        "type": "function",
                        "info": "Get the mode(s) of each element along the selected axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis",
                            "numeric_only": "bool",
                            "dropna": "bool"
                        }
                    },
                    "mul": {
                        "type": "function",
                        "info": "Get Multiplication of dataframe and other, element-wise (binary operator `mul`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "multiply": {
                        "type": "function",
                        "info": "Get Multiplication of dataframe and other, element-wise (binary operator `mul`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Return an int representing the number of axes / array dimensions.",
                        "returns": "int"
                    },
                    "ne": {
                        "type": "function",
                        "info": "Get Not equal to of dataframe and other, element-wise (binary operator `ne`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": "."
                        }
                    },
                    "nlargest": {
                        "type": "function",
                        "info": "Return the first `n` rows ordered by `columns` in descending order.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "n": "int",
                            "columns": "IndexLabel",
                            "keep": "NsmallestNlargestKeep"
                        }
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "pd.DataFrame",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "DataFrame.notnull is an alias for DataFrame.notna.",
                        "returns": "pd.DataFrame",
                        "parameters": {}
                    },
                    "nsmallest": {
                        "type": "function",
                        "info": "Return the first `n` rows ordered by `columns` in ascending order.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "n": "int",
                            "columns": "IndexLabel",
                            "keep": "NsmallestNlargestKeep"
                        }
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Count number of distinct elements in specified axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis",
                            "dropna": "bool"
                        }
                    },
                    "pad": {
                        "type": "function",
                        "info": "Fill NA/NaN values by propagating the last valid observation to next valid.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "axis": "None | Axis",
                            "inplace": "bool_t",
                            "limit": "None | int",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "pct_change": {
                        "type": "function",
                        "info": "Fractional change between the current and a prior element.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "periods": "int",
                            "fill_method": "FillnaOptions | None | lib.NoDefault",
                            "limit": "int | None | lib.NoDefault",
                            "freq": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "pipe": {
                        "type": "function",
                        "info": "Apply chainable functions that expect Series or DataFrames.",
                        "returns": "T",
                        "parameters": {
                            "func": "Callable[..., T] | tuple[Callable[..., T], str]",
                            "args": "~T",
                            "kwargs": "~T"
                        }
                    },
                    "pivot": {
                        "type": "function",
                        "info": "Return reshaped DataFrame organized by given index / column values.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "columns": "<class 'pandas.core.frame.DataFrame'>",
                            "index": "<class 'pandas.core.frame.DataFrame'>",
                            "values": "<class 'pandas.core.frame.DataFrame'>"
                        }
                    },
                    "pivot_table": {
                        "type": "function",
                        "info": "Create a spreadsheet-style pivot table as a DataFrame.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "values": ".",
                            "index": ".",
                            "columns": ".",
                            "aggfunc": "AggFuncType",
                            "fill_value": ".",
                            "margins": "bool",
                            "dropna": "bool",
                            "margins_name": "Level",
                            "observed": "bool | lib.NoDefault",
                            "sort": "bool"
                        }
                    },
                    "plot": {
                        "type": "class",
                        "info": "Make plots of Series or DataFrame.",
                        "returns": "pd.DataFrame.plot",
                        "items": {
                            "__call__": {
                                "type": "function",
                                "info": "Make plots of Series or DataFrame.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "area": {
                                "type": "function",
                                "info": "Draw a stacked area plot.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "x": "Hashable | None",
                                    "y": "Hashable | None",
                                    "stacked": "bool",
                                    "kwargs": "."
                                }
                            },
                            "bar": {
                                "type": "function",
                                "info": "Vertical bar plot.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "x": "Hashable | None",
                                    "y": "Hashable | None",
                                    "kwargs": "."
                                }
                            },
                            "barh": {
                                "type": "function",
                                "info": "Make a horizontal bar plot.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "x": "Hashable | None",
                                    "y": "Hashable | None",
                                    "kwargs": "."
                                }
                            },
                            "box": {
                                "type": "function",
                                "info": "Make a box plot of the DataFrame columns.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "by": "IndexLabel | None",
                                    "kwargs": "."
                                }
                            },
                            "density": {
                                "type": "function",
                                "info": "Generate Kernel Density Estimate plot using Gaussian kernels.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "bw_method": "Literal['scott', 'silverman'] | float | Callable | None",
                                    "ind": "np.ndarray | int | None",
                                    "kwargs": "."
                                }
                            },
                            "hexbin": {
                                "type": "function",
                                "info": "Generate a hexagonal binning plot.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "x": "Hashable",
                                    "y": "Hashable",
                                    "C": "Hashable | None",
                                    "reduce_C_function": "Callable | None",
                                    "gridsize": "int | tuple[int, int] | None",
                                    "kwargs": "."
                                }
                            },
                            "hist": {
                                "type": "function",
                                "info": "Draw one histogram of the DataFrame's columns.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "by": "IndexLabel | None",
                                    "bins": "int",
                                    "kwargs": "."
                                }
                            },
                            "kde": {
                                "type": "function",
                                "info": "Generate Kernel Density Estimate plot using Gaussian kernels.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "bw_method": "Literal['scott', 'silverman'] | float | Callable | None",
                                    "ind": "np.ndarray | int | None",
                                    "kwargs": "."
                                }
                            },
                            "line": {
                                "type": "function",
                                "info": "Plot Series or DataFrame as lines.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "x": "Hashable | None",
                                    "y": "Hashable | None",
                                    "kwargs": "."
                                }
                            },
                            "pie": {
                                "type": "function",
                                "info": "Generate a pie plot.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "kwargs": "<class 'pandas.plotting._core.PlotAccessor'>"
                                }
                            },
                            "scatter": {
                                "type": "function",
                                "info": "Create a scatter plot with varying marker point size and color.",
                                "returns": "PlotAccessor",
                                "parameters": {
                                    "x": "Hashable",
                                    "y": "Hashable",
                                    "s": "Hashable | Sequence[Hashable] | None",
                                    "c": "Hashable | Sequence[Hashable] | None",
                                    "kwargs": "."
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "data": "Series | DataFrame"
                                }
                            }
                        }
                    },
                    "pop": {
                        "type": "function",
                        "info": "Return item and drop from frame. Raise KeyError if not found.",
                        "returns": "pd.Series",
                        "parameters": {
                            "item": "Hashable"
                        }
                    },
                    "pow": {
                        "type": "function",
                        "info": "Get Exponential power of dataframe and other, element-wise (binary operator `pow`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "prod": {
                        "type": "function",
                        "info": "Return the product of the values over the requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "min_count": "int",
                            "kwargs": "."
                        }
                    },
                    "product": {
                        "type": "function",
                        "info": "Return the product of the values over the requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "min_count": "int",
                            "kwargs": "."
                        }
                    },
                    "quantile": {
                        "type": "function",
                        "info": "Return values at the given quantile over requested axis.",
                        "returns": "pd.Series | pd.DataFrame",
                        "parameters": {
                            "q": "float | AnyArrayLike | Sequence[float]",
                            "axis": "Axis",
                            "numeric_only": "bool",
                            "interpolation": "QuantileInterpolation",
                            "method": "Literal['single', 'table']"
                        }
                    },
                    "query": {
                        "type": "function",
                        "info": "Query the columns of a DataFrame with a boolean expression.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "expr": "str",
                            "inplace": "bool",
                            "kwargs": "pd.DataFrame| None"
                        }
                    },
                    "radd": {
                        "type": "function",
                        "info": "Get Addition of dataframe and other, element-wise (binary operator `radd`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "rank": {
                        "type": "function",
                        "info": "Compute numerical data ranks (1 through n) along axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis",
                            "method": "Literal['average', 'min', 'max', 'first', 'dense']",
                            "numeric_only": "bool_t",
                            "na_option": "Literal['keep', 'top', 'bottom']",
                            "ascending": "bool_t",
                            "pct": "bool_t"
                        }
                    },
                    "rdiv": {
                        "type": "function",
                        "info": "Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Conform DataFrame to new index with optional filling logic.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "labels": ".",
                            "index": ".",
                            "columns": ".",
                            "axis": "Axis | None",
                            "method": "ReindexMethod | None",
                            "copy": "bool | None",
                            "level": "Level | None",
                            "fill_value": "Scalar | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "reindex_like": {
                        "type": "function",
                        "info": "Return an object with matching indices as other object.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": "<class 'NoneType'>",
                            "method": "Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None",
                            "copy": "bool_t | None",
                            "limit": "int | None",
                            "tolerance": "<class 'NoneType'>"
                        }
                    },
                    "rename": {
                        "type": "function",
                        "info": "Rename columns or index labels.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "mapper": "Renamer | None",
                            "index": "Renamer | None",
                            "columns": "Renamer | None",
                            "axis": "Axis | None",
                            "copy": "bool | None",
                            "inplace": "bool",
                            "level": "Level | None",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "reorder_levels": {
                        "type": "function",
                        "info": "Rearrange index levels using input order. May not drop or duplicate levels.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "order": "Sequence[int | str]",
                            "axis": "Axis"
                        }
                    },
                    "resample": {
                        "type": "function",
                        "info": "Resample time-series data.",
                        "returns": "Resampler",
                        "parameters": {
                            "rule": ".",
                            "axis": "Axis | lib.NoDefault",
                            "closed": "Literal['right', 'left'] | None",
                            "label": "Literal['right', 'left'] | None",
                            "convention": "Literal['start', 'end', 's', 'e'] | lib.NoDefault",
                            "kind": "Literal['timestamp', 'period'] | None | lib.NoDefault",
                            "on": "Level | None",
                            "level": "Level | None",
                            "origin": "str | TimestampConvertibleTypes",
                            "offset": "TimedeltaConvertibleTypes | None",
                            "group_keys": "bool_t"
                        }
                    },
                    "reset_index": {
                        "type": "function",
                        "info": "Reset the index, or a level of it.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "level": "IndexLabel | None",
                            "drop": "bool",
                            "inplace": "bool",
                            "col_level": "Hashable",
                            "col_fill": "Hashable",
                            "allow_duplicates": "bool | lib.NoDefault",
                            "names": "Hashable | Sequence[Hashable] | None"
                        }
                    },
                    "rfloordiv": {
                        "type": "function",
                        "info": "Get Integer division of dataframe and other, element-wise (binary operator `rfloordiv`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "rmod": {
                        "type": "function",
                        "info": "Get Modulo of dataframe and other, element-wise (binary operator `rmod`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "rmul": {
                        "type": "function",
                        "info": "Get Multiplication of dataframe and other, element-wise (binary operator `rmul`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "rolling": {
                        "type": "function",
                        "info": "Provide rolling window calculations.",
                        "returns": "Window | Rolling",
                        "parameters": {
                            "window": "int | dt.timedelta | str | BaseOffset | BaseIndexer",
                            "min_periods": "int | None",
                            "center": "bool_t",
                            "win_type": "str | None",
                            "on": "str | None",
                            "axis": "Axis | lib.NoDefault",
                            "closed": "IntervalClosedType | None",
                            "step": "int | None",
                            "method": "str"
                        }
                    },
                    "round": {
                        "type": "function",
                        "info": "Round a DataFrame to a variable number of decimal places.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "decimals": "int | dict[IndexLabel, int] | Series",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "rpow": {
                        "type": "function",
                        "info": "Get Exponential power of dataframe and other, element-wise (binary operator `rpow`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "rsub": {
                        "type": "function",
                        "info": "Get Subtraction of dataframe and other, element-wise (binary operator `rsub`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "rtruediv": {
                        "type": "function",
                        "info": "Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "sample": {
                        "type": "function",
                        "info": "Return a random sample of items from an axis of object.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "n": "int | None",
                            "frac": "float | None",
                            "replace": "bool_t",
                            "weights": "<class 'NoneType'>",
                            "random_state": "RandomState | None",
                            "axis": "Axis | None",
                            "ignore_index": "bool_t"
                        }
                    },
                    "select_dtypes": {
                        "type": "function",
                        "info": "Return a subset of the DataFrame's columns based on the column dtypes.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "include": ".",
                            "exclude": "."
                        }
                    },
                    "sem": {
                        "type": "function",
                        "info": "Return unbiased standard error of the mean over requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "ddof": "int",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "set_axis": {
                        "type": "function",
                        "info": "Assign desired index to given axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "labels": ".",
                            "axis": "Axis",
                            "copy": "bool | None"
                        }
                    },
                    "set_flags": {
                        "type": "function",
                        "info": "Return a new object with updated flags.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "copy": "bool_t",
                            "allows_duplicate_labels": "bool_t | None"
                        }
                    },
                    "set_index": {
                        "type": "function",
                        "info": "Set the DataFrame index using existing columns.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "keys": "pd.DataFrame| None",
                            "drop": "bool",
                            "append": "bool",
                            "inplace": "bool",
                            "verify_integrity": "bool"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple representing the dimensionality of the DataFrame.",
                        "returns": "tuple[int, int]"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of periods with an optional time `freq`.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "periods": "int | Sequence[int]",
                            "freq": "Frequency | None",
                            "axis": "Axis",
                            "fill_value": "Hashable",
                            "suffix": "str | None"
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return an int representing the number of elements in this object.",
                        "returns": "int"
                    },
                    "skew": {
                        "type": "function",
                        "info": "Return unbiased skew over requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "sort_index": {
                        "type": "function",
                        "info": "Sort object by labels (along an axis).",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "axis": "Axis",
                            "level": "IndexLabel | None",
                            "ascending": "bool | Sequence[bool]",
                            "inplace": "bool",
                            "kind": "SortKind",
                            "na_position": "NaPosition",
                            "sort_remaining": "bool",
                            "ignore_index": "bool",
                            "key": "IndexKeyFunc | None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Sort by the values along either axis.",
                        "returns": "pd.DataFrame | None",
                        "parameters": {
                            "by": "IndexLabel",
                            "axis": "Axis",
                            "ascending": "bool | list[bool] | tuple[bool, ...]",
                            "inplace": "bool",
                            "kind": "SortKind",
                            "na_position": "str",
                            "ignore_index": "bool",
                            "key": "ValueKeyFunc | None"
                        }
                    },
                    "sparse": {
                        "type": "class",
                        "info": "DataFrame accessor for sparse data.",
                        "returns": "pd.DataFrame.sparse",
                        "items": {
                            "density": {
                                "type": "property",
                                "info": "Ratio of non-sparse points to total (dense) data points.",
                                "returns": "float"
                            },
                            "from_spmatrix": {
                                "type": "object",
                                "info": "Create a bound instance method object.",
                                "returns": "method"
                            },
                            "to_coo": {
                                "type": "function",
                                "info": "Return the contents of the frame as a sparse SciPy COO matrix.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "to_dense": {
                                "type": "function",
                                "info": "Convert a DataFrame with sparse values to dense.",
                                "returns": "pd.DataFrame",
                                "parameters": {}
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "data": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "squeeze": {
                        "type": "function",
                        "info": "Squeeze 1 dimensional axis objects into scalars.",
                        "returns": "None",
                        "parameters": {
                            "axis": "Axis | None"
                        }
                    },
                    "stack": {
                        "type": "function",
                        "info": "Stack the prescribed level(s) from columns to index.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "level": "IndexLabel",
                            "dropna": "bool | lib.NoDefault",
                            "sort": "bool | lib.NoDefault",
                            "future_stack": "bool"
                        }
                    },
                    "std": {
                        "type": "function",
                        "info": "Return sample standard deviation over requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "ddof": "int",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "style": {
                        "type": "property",
                        "info": "Returns a Styler object.",
                        "returns": "Styler"
                    },
                    "sub": {
                        "type": "function",
                        "info": "Get Subtraction of dataframe and other, element-wise (binary operator `sub`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "subtract": {
                        "type": "function",
                        "info": "Get Subtraction of dataframe and other, element-wise (binary operator `sub`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "sum": {
                        "type": "function",
                        "info": "Return the sum of the values over the requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "min_count": "int",
                            "kwargs": "."
                        }
                    },
                    "swapaxes": {
                        "type": "function",
                        "info": "Interchange axes and swap values axes appropriately.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis1": "Axis",
                            "axis2": "Axis",
                            "copy": "bool_t | None"
                        }
                    },
                    "swaplevel": {
                        "type": "function",
                        "info": "Swap levels i and j in a :class:`MultiIndex`.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "i": "Axis",
                            "j": "Axis",
                            "axis": "Axis"
                        }
                    },
                    "tail": {
                        "type": "function",
                        "info": "Return the last `n` rows.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "n": "int"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return the elements in the given *positional* indices along an axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "indices": "<class 'NoneType'>",
                            "axis": "Axis",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "to_clipboard": {
                        "type": "function",
                        "info": "Copy object to the system clipboard.",
                        "returns": "None",
                        "parameters": {
                            "excel": "bool_t",
                            "sep": "str | None",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "to_csv": {
                        "type": "function",
                        "info": "Write object to a comma-separated values (csv) file.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "path_or_buf": "FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None",
                            "sep": "str",
                            "na_rep": "str",
                            "float_format": "str | Callable | None",
                            "columns": "Sequence[Hashable] | None",
                            "header": "bool_t | list[str]",
                            "index": "bool_t",
                            "index_label": "IndexLabel | None",
                            "mode": "str",
                            "encoding": "str | None",
                            "compression": "CompressionOptions",
                            "quoting": "int | None",
                            "quotechar": "str",
                            "lineterminator": "str | None",
                            "chunksize": "int | None",
                            "date_format": "str | None",
                            "doublequote": "bool_t",
                            "escapechar": "str | None",
                            "decimal": "str",
                            "errors": "OpenFileErrors",
                            "storage_options": "StorageOptions | None"
                        }
                    },
                    "to_dict": {
                        "type": "function",
                        "info": "Convert the DataFrame to a dictionary.",
                        "returns": "MutableMappingT | list[MutableMappingT]",
                        "parameters": {
                            "orient": "Literal['dict', 'list', 'series', 'split', 'tight', 'records', 'index']",
                            "into": "type[MutableMappingT] | MutableMappingT",
                            "index": "bool"
                        }
                    },
                    "to_excel": {
                        "type": "function",
                        "info": "Write object to an Excel sheet.",
                        "returns": "None",
                        "parameters": {
                            "excel_writer": "FilePath | WriteExcelBuffer | ExcelWriter",
                            "sheet_name": "str",
                            "na_rep": "str",
                            "float_format": "str | None",
                            "columns": "Sequence[Hashable] | None",
                            "header": "Sequence[Hashable] | bool_t",
                            "index": "bool_t",
                            "index_label": "IndexLabel | None",
                            "startrow": "int",
                            "startcol": "int",
                            "engine": "Literal['openpyxl', 'xlsxwriter'] | None",
                            "merge_cells": "bool_t",
                            "inf_rep": "str",
                            "freeze_panes": "tuple[int, int] | None",
                            "storage_options": "StorageOptions | None",
                            "engine_kwargs": "dict[str, Any] | None"
                        }
                    },
                    "to_feather": {
                        "type": "function",
                        "info": "Write a DataFrame to the binary Feather format.",
                        "returns": "None",
                        "parameters": {
                            "path": "FilePath | WriteBuffer[bytes]",
                            "kwargs": "."
                        }
                    },
                    "to_gbq": {
                        "type": "function",
                        "info": "Write a DataFrame to a Google BigQuery table.",
                        "returns": "None",
                        "parameters": {
                            "destination_table": "str",
                            "project_id": "str | None",
                            "chunksize": "int | None",
                            "reauth": "bool",
                            "if_exists": "ToGbqIfexist",
                            "auth_local_webserver": "bool",
                            "table_schema": "list[dict[str, str]] | None",
                            "location": "str | None",
                            "progress_bar": "bool",
                            "credentials": "."
                        }
                    },
                    "to_hdf": {
                        "type": "function",
                        "info": "Write the contained data to an HDF5 file using HDFStore.",
                        "returns": "None",
                        "parameters": {
                            "path_or_buf": "FilePath | HDFStore",
                            "key": "str",
                            "mode": "Literal['a', 'w', 'r+']",
                            "complevel": "int | None",
                            "complib": "Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None",
                            "append": "bool_t",
                            "format": "Literal['fixed', 'table'] | None",
                            "index": "bool_t",
                            "min_itemsize": "int | dict[str, int] | None",
                            "nan_rep": ".",
                            "dropna": "bool_t | None",
                            "data_columns": "Literal[True] | list[str] | None",
                            "errors": "OpenFileErrors",
                            "encoding": "str"
                        }
                    },
                    "to_html": {
                        "type": "function",
                        "info": "Render a DataFrame as an HTML table.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "buf": "FilePath | WriteBuffer[str] | None",
                            "columns": "Axes | None",
                            "col_space": "ColspaceArgType | None",
                            "header": "bool",
                            "index": "bool",
                            "na_rep": "str",
                            "formatters": "FormattersType | None",
                            "float_format": "FloatFormatType | None",
                            "sparsify": "bool | None",
                            "index_names": "bool",
                            "justify": "str | None",
                            "max_rows": "int | None",
                            "max_cols": "int | None",
                            "show_dimensions": "bool | str",
                            "decimal": "str",
                            "bold_rows": "bool",
                            "classes": "str | list | tuple | None",
                            "escape": "bool",
                            "notebook": "bool",
                            "border": "int | bool | None",
                            "table_id": "str | None",
                            "render_links": "bool",
                            "encoding": "str | None"
                        }
                    },
                    "to_json": {
                        "type": "function",
                        "info": "Convert the object to a JSON string.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "path_or_buf": "FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None",
                            "orient": "Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None",
                            "date_format": "str | None",
                            "double_precision": "int",
                            "force_ascii": "bool_t",
                            "date_unit": "TimeUnit",
                            "default_handler": "Callable[[Any], JSONSerializable] | None",
                            "lines": "bool_t",
                            "compression": "CompressionOptions",
                            "index": "bool_t | None",
                            "indent": "int | None",
                            "storage_options": "StorageOptions | None",
                            "mode": "Literal['a', 'w']"
                        }
                    },
                    "to_latex": {
                        "type": "function",
                        "info": "Render object to a LaTeX tabular, longtable, or nested table.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "buf": "FilePath | WriteBuffer[str] | None",
                            "columns": "Sequence[Hashable] | None",
                            "header": "bool_t | SequenceNotStr[str]",
                            "index": "bool_t",
                            "na_rep": "str",
                            "formatters": "FormattersType | None",
                            "float_format": "FloatFormatType | None",
                            "sparsify": "bool_t | None",
                            "index_names": "bool_t",
                            "bold_rows": "bool_t",
                            "column_format": "str | None",
                            "longtable": "bool_t | None",
                            "escape": "bool_t | None",
                            "encoding": "str | None",
                            "decimal": "str",
                            "multicolumn": "bool_t | None",
                            "multicolumn_format": "str | None",
                            "multirow": "bool_t | None",
                            "caption": "str | tuple[str, str] | None",
                            "label": "str | None",
                            "position": "str | None"
                        }
                    },
                    "to_markdown": {
                        "type": "function",
                        "info": "Print DataFrame in Markdown-friendly format.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "buf": "FilePath | WriteBuffer[str] | None",
                            "mode": "str",
                            "index": "bool",
                            "storage_options": "StorageOptions | None",
                            "kwargs": "."
                        }
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "Convert the DataFrame to a NumPy array.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object"
                        }
                    },
                    "to_orc": {
                        "type": "function",
                        "info": "Write a DataFrame to the ORC format.",
                        "returns": "bytes | None",
                        "parameters": {
                            "path": "FilePath | WriteBuffer[bytes] | None",
                            "engine": "Literal['pyarrow']",
                            "index": "bool | None",
                            "engine_kwargs": "dict[str, Any] | None"
                        }
                    },
                    "to_parquet": {
                        "type": "function",
                        "info": "Write a DataFrame to the binary parquet format.",
                        "returns": "bytes | None",
                        "parameters": {
                            "path": "FilePath | WriteBuffer[bytes] | None",
                            "engine": "Literal['auto', 'pyarrow', 'fastparquet']",
                            "compression": "str | None",
                            "index": "bool | None",
                            "partition_cols": "list[str] | None",
                            "storage_options": "StorageOptions | None",
                            "kwargs": "."
                        }
                    },
                    "to_period": {
                        "type": "function",
                        "info": "Convert DataFrame from DatetimeIndex to PeriodIndex.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "freq": "Frequency | None",
                            "axis": "Axis",
                            "copy": "bool | None"
                        }
                    },
                    "to_pickle": {
                        "type": "function",
                        "info": "Pickle (serialize) object to file.",
                        "returns": "None",
                        "parameters": {
                            "path": "FilePath | WriteBuffer[bytes]",
                            "compression": "CompressionOptions",
                            "protocol": "int",
                            "storage_options": "StorageOptions | None"
                        }
                    },
                    "to_records": {
                        "type": "function",
                        "info": "Convert DataFrame to a NumPy record array.",
                        "returns": "np.rec.recarray",
                        "parameters": {
                            "index": "bool",
                            "column_dtypes": "<class 'numpy.recarray'>",
                            "index_dtypes": "<class 'numpy.recarray'>"
                        }
                    },
                    "to_sql": {
                        "type": "function",
                        "info": "Write records stored in a DataFrame to a SQL database.",
                        "returns": "int | None",
                        "parameters": {
                            "name": "str",
                            "con": "int | None",
                            "schema": "str | None",
                            "if_exists": "Literal['fail', 'replace', 'append']",
                            "index": "bool_t",
                            "index_label": "IndexLabel | None",
                            "chunksize": "int | None",
                            "dtype": "DtypeArg | None",
                            "method": "Literal['multi'] | Callable | None"
                        }
                    },
                    "to_stata": {
                        "type": "function",
                        "info": "Export DataFrame object to Stata dta format.",
                        "returns": "None",
                        "parameters": {
                            "path": "FilePath | WriteBuffer[bytes]",
                            "convert_dates": "dict[Hashable, str] | None",
                            "write_index": "bool",
                            "byteorder": "ToStataByteorder | None",
                            "time_stamp": "datetime.datetime | None",
                            "data_label": "str | None",
                            "variable_labels": "dict[Hashable, str] | None",
                            "version": "int | None",
                            "convert_strl": "Sequence[Hashable] | None",
                            "compression": "CompressionOptions",
                            "storage_options": "StorageOptions | None",
                            "value_labels": "dict[Hashable, dict[float, str]] | None"
                        }
                    },
                    "to_string": {
                        "type": "function",
                        "info": "Render a DataFrame to a console-friendly tabular output.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "buf": "FilePath | WriteBuffer[str] | None",
                            "columns": "Axes | None",
                            "col_space": "int | list[int] | dict[Hashable, int] | None",
                            "header": "bool | SequenceNotStr[str]",
                            "index": "bool",
                            "na_rep": "str",
                            "formatters": "fmt.FormattersType | None",
                            "float_format": "fmt.FloatFormatType | None",
                            "sparsify": "bool | None",
                            "index_names": "bool",
                            "justify": "str | None",
                            "max_rows": "int | None",
                            "max_cols": "int | None",
                            "show_dimensions": "bool",
                            "decimal": "str",
                            "line_width": "int | None",
                            "min_rows": "int | None",
                            "max_colwidth": "int | None",
                            "encoding": "str | None"
                        }
                    },
                    "to_timestamp": {
                        "type": "function",
                        "info": "Cast to DatetimeIndex of timestamps, at *beginning* of period.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "freq": "Frequency | None",
                            "how": "ToTimestampHow",
                            "axis": "Axis",
                            "copy": "bool | None"
                        }
                    },
                    "to_xarray": {
                        "type": "function",
                        "info": "Return an xarray object from the pandas object.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_xml": {
                        "type": "function",
                        "info": "Render a DataFrame to an XML document.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "path_or_buffer": "FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None",
                            "index": "bool",
                            "root_name": "str | None",
                            "row_name": "str | None",
                            "na_rep": "str | None",
                            "attr_cols": "list[str] | None",
                            "elem_cols": "list[str] | None",
                            "namespaces": "dict[str | None, str] | None",
                            "prefix": "str | None",
                            "encoding": "str",
                            "xml_declaration": "bool | None",
                            "pretty_print": "bool | None",
                            "parser": "XMLParsers | None",
                            "stylesheet": "FilePath | ReadBuffer[str] | ReadBuffer[bytes] | None",
                            "compression": "CompressionOptions",
                            "storage_options": "StorageOptions | None"
                        }
                    },
                    "transform": {
                        "type": "function",
                        "info": "Call ``func`` on self producing a DataFrame with the same axis shape as self.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "func": "AggFuncType",
                            "axis": "Axis",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Transpose index and columns.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "args": "<class 'pandas.core.frame.DataFrame'>",
                            "copy": "bool"
                        }
                    },
                    "truediv": {
                        "type": "function",
                        "info": "Get Floating division of dataframe and other, element-wise (binary operator `truediv`).",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "other": ".",
                            "axis": "Axis",
                            "level": ".",
                            "fill_value": "."
                        }
                    },
                    "truncate": {
                        "type": "function",
                        "info": "Truncate a Series or DataFrame before and after some index value.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "before": "<class 'NoneType'>",
                            "after": "<class 'NoneType'>",
                            "axis": "Axis | None",
                            "copy": "bool_t | None"
                        }
                    },
                    "tz_convert": {
                        "type": "function",
                        "info": "Convert tz-aware axis to target time zone.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "tz": "<class 'NoneType'>",
                            "axis": "Axis",
                            "level": "<class 'NoneType'>",
                            "copy": "bool_t | None"
                        }
                    },
                    "tz_localize": {
                        "type": "function",
                        "info": "Localize tz-naive index of a Series or DataFrame to target time zone.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "tz": ".",
                            "axis": "Axis",
                            "level": ".",
                            "copy": "bool_t | None",
                            "ambiguous": "TimeAmbiguous",
                            "nonexistent": "TimeNonexistent"
                        }
                    },
                    "unstack": {
                        "type": "function",
                        "info": "Pivot a level of the (necessarily hierarchical) index labels.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "level": "IndexLabel",
                            "fill_value": ".",
                            "sort": "bool"
                        }
                    },
                    "update": {
                        "type": "function",
                        "info": "Modify in place using non-NA values from another DataFrame.",
                        "returns": "None",
                        "parameters": {
                            "other": ".",
                            "join": "UpdateJoin",
                            "overwrite": "bool",
                            "filter_func": ".",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing the frequency of each distinct row in the Dataframe.",
                        "returns": "pd.Series",
                        "parameters": {
                            "subset": "IndexLabel | None",
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "dropna": "bool"
                        }
                    },
                    "values": {
                        "type": "property",
                        "info": "Return a Numpy representation of the DataFrame.",
                        "returns": "np.ndarray"
                    },
                    "var": {
                        "type": "function",
                        "info": "Return unbiased variance over requested axis.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "ddof": "int",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "xs": {
                        "type": "function",
                        "info": "Return cross-section from the Series/DataFrame.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "key": "IndexLabel",
                            "axis": "Axis",
                            "level": "IndexLabel | None",
                            "drop_level": "bool_t"
                        }
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "data": ".",
                            "index": "Axes | None",
                            "columns": "Axes | None",
                            "dtype": "Dtype | None",
                            "copy": "bool | None"
                        }
                    }
                }
            },
            "DateOffset": {
                "type": "class",
                "info": "Standard kind of date increment used for a date range.",
                "returns": "pd.DateOffset",
                "items": {
                    "base": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "copy": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "freqstr": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_anchored": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "is_month_end": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "is_month_start": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "is_on_offset": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "is_quarter_end": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "is_quarter_start": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "is_year_end": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "is_year_start": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "kwds": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "n": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "name": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "nanos": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "normalize": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "rollback": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "rollforward": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "rule_code": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "DatetimeIndex": {
                "type": "class",
                "info": "Immutable ndarray-like of datetime64 data.",
                "returns": "pd.DatetimeIndex",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.DatetimeIndex"
                    },
                    "tz": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "dt.tzinfo | None"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "Override numpy.ndarray's __getitem__ method to work as desired.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "append": {
                        "type": "function",
                        "info": "Append a collection of Index options together.",
                        "returns": "pd.Index",
                        "parameters": {
                            "other": "Index | Sequence[Index]"
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return int position of the largest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return int position of the smallest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Return the integer indices that would sort the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "array": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "as_unit": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "asi8": {
                        "type": "property",
                        "info": "",
                        "returns": "npt.NDArray[np.int64]"
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the label from the index, or, if not present, the previous one.",
                        "returns": "None",
                        "parameters": {
                            "label": "None"
                        }
                    },
                    "asof_locs": {
                        "type": "function",
                        "info": "Return the locations (indices) of labels in the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "where": "Index",
                            "mask": "npt.NDArray[np.bool_]"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Create an Index with values cast to dtypes.",
                        "returns": "None",
                        "parameters": {
                            "dtype": "None",
                            "copy": "bool"
                        }
                    },
                    "ceil": {
                        "type": "function",
                        "info": "Perform ceil operation on the data to the specified `freq`.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "name": "Hashable | None",
                            "deep": "bool"
                        }
                    },
                    "day_name": {
                        "type": "function",
                        "info": "Return the day names with specified locale.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "delete": {
                        "type": "function",
                        "info": "Make new Index with passed location(-s) deleted.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "loc": "."
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "Computes the difference between consecutive values in the Index object.",
                        "returns": "pd.Index",
                        "parameters": {
                            "periods": "int"
                        }
                    },
                    "difference": {
                        "type": "function",
                        "info": "Return a new Index with elements of index not in `other`.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Make new Index with passed list of labels deleted.",
                        "returns": "pd.Index",
                        "parameters": {
                            "labels": "Index | np.ndarray | Iterable[Hashable]",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return Index with duplicate values removed.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return index with requested level(s) removed.",
                        "returns": "None",
                        "parameters": {
                            "level": "IndexLabel"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return Index without NA/NaN values.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "how": "AnyAll"
                        }
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Indicate duplicate index values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "",
                        "returns": "bool"
                    },
                    "equals": {
                        "type": "function",
                        "info": "Determines if two Index objects contain the same elements.",
                        "returns": "bool",
                        "parameters": {
                            "other": "Any"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the object as an enumerated type or categorical variable.",
                        "returns": "tuple[npt.NDArray[np.intp], Index]",
                        "parameters": {
                            "sort": "bool",
                            "use_na_sentinel": "bool"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values with the specified value.",
                        "returns": "None",
                        "parameters": {
                            "value": "None",
                            "downcast": "None"
                        }
                    },
                    "floor": {
                        "type": "function",
                        "info": "Perform floor operation on the data to the specified `freq`.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "format": {
                        "type": "function",
                        "info": "Render a string representation of the Index.",
                        "returns": "list[str]",
                        "parameters": {
                            "name": "bool",
                            "formatter": "Callable | None",
                            "na_rep": "str",
                            "date_format": "str | None"
                        }
                    },
                    "freq": {
                        "type": "property",
                        "info": "",
                        "returns": "BaseOffset | None"
                    },
                    "freqstr": {
                        "type": "property",
                        "info": "Return the frequency object as a string if it's set, otherwise None.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "get_indexer": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "get_indexer_for": {
                        "type": "function",
                        "info": "Guaranteed return of an indexer even when non-unique.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_indexer_non_unique": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_level_values": {
                        "type": "function",
                        "info": "Return an Index of values for requested level.",
                        "returns": "pd.Index",
                        "parameters": {
                            "level": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "get_loc": {
                        "type": "function",
                        "info": "Get integer location for requested label",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "get_slice_bound": {
                        "type": "function",
                        "info": "Calculate slice bound that corresponds to given label.",
                        "returns": "int",
                        "parameters": {
                            "label": "<class 'int'>",
                            "side": "Literal['left', 'right']"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group the index labels by a given array of values.",
                        "returns": "PrettyDict[Hashable, np.ndarray]",
                        "parameters": {
                            "values": "."
                        }
                    },
                    "has_duplicates": {
                        "type": "property",
                        "info": "Check if the Index has duplicate values.",
                        "returns": "bool"
                    },
                    "hasnans": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "holds_integer": {
                        "type": "function",
                        "info": "Whether the type is an integer type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "identical": {
                        "type": "function",
                        "info": "Similar to equals, but checks that object attributes and types are also equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "indexer_at_time": {
                        "type": "function",
                        "info": "Return index locations of values at particular time of day.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "time": ".",
                            "asof": "bool"
                        }
                    },
                    "indexer_between_time": {
                        "type": "function",
                        "info": "Return index locations of values between particular times of day.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "start_time": ".",
                            "end_time": ".",
                            "include_start": "bool",
                            "include_end": "bool"
                        }
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "If we have an object dtype, try to infer a non-object dtype.",
                        "returns": "pd.Index",
                        "parameters": {
                            "copy": "bool"
                        }
                    },
                    "inferred_freq": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "inferred_type": {
                        "type": "property",
                        "info": "Return a string of the type inferred from the values.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "insert": {
                        "type": "function",
                        "info": "Make new Index inserting new item at location.",
                        "returns": "None",
                        "parameters": {
                            "loc": "int",
                            "item": "None"
                        }
                    },
                    "intersection": {
                        "type": "function",
                        "info": "Form the intersection of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "bool"
                        }
                    },
                    "is_": {
                        "type": "function",
                        "info": "More flexible, faster check like ``is`` but that works through views.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "is_boolean": {
                        "type": "function",
                        "info": "Check if the Index only consists of booleans.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_categorical": {
                        "type": "function",
                        "info": "Check if the Index holds categorical data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_floating": {
                        "type": "function",
                        "info": "Check if the Index is a floating type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_integer": {
                        "type": "function",
                        "info": "Check if the Index only consists of integers.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_interval": {
                        "type": "function",
                        "info": "Check if the Index holds Interval objects.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_monotonic_decreasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or decreasing.",
                        "returns": "bool"
                    },
                    "is_monotonic_increasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or increasing.",
                        "returns": "bool"
                    },
                    "is_normalized": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_numeric": {
                        "type": "function",
                        "info": "Check if the Index only consists of numeric data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_object": {
                        "type": "function",
                        "info": "Check if the Index is of the object dtype.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_unique": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "isin": {
                        "type": "function",
                        "info": "Return a boolean array where the index values are in `values`.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "values": ".",
                            "level": "."
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isocalendar": {
                        "type": "function",
                        "info": "Calculate year, week, and day according to the ISO 8601 standard.",
                        "returns": "pd.DataFrame",
                        "parameters": {}
                    },
                    "item": {
                        "type": "function",
                        "info": "Return the first element of the underlying data as a Python scalar.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "join": {
                        "type": "function",
                        "info": "Compute join_index and indexers to conform data structures to the new index.",
                        "returns": "pd.Index| tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "other": "Index",
                            "how": "JoinHow",
                            "level": "Level | None",
                            "return_indexers": "bool",
                            "sort": "bool"
                        }
                    },
                    "map": {
                        "type": "function",
                        "info": "Map values using an input mapping or function.",
                        "returns": "None",
                        "parameters": {
                            "mapper": "None",
                            "na_action": "Literal['ignore'] | None"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "Return the maximum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "mean": {
                        "type": "function",
                        "info": "Return the mean value of the Array.",
                        "returns": "None",
                        "parameters": {
                            "skipna": "bool",
                            "axis": "int | None"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Memory usage of the values.",
                        "returns": "int",
                        "parameters": {
                            "deep": "bool"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "Return the minimum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "month_name": {
                        "type": "function",
                        "info": "Return the month names with specified locale.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "name": {
                        "type": "property",
                        "info": "Return Index or MultiIndex name.",
                        "returns": "Hashable"
                    },
                    "names": {
                        "type": "property",
                        "info": "",
                        "returns": "FrozenList"
                    },
                    "nbytes": {
                        "type": "property",
                        "info": "Return the number of bytes in the underlying data.",
                        "returns": "int"
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Number of dimensions of the underlying data, by definition 1.",
                        "returns": "int"
                    },
                    "nlevels": {
                        "type": "property",
                        "info": "Number of levels.",
                        "returns": "int"
                    },
                    "normalize": {
                        "type": "function",
                        "info": "Convert times to midnight.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Return number of unique elements in the object.",
                        "returns": "int",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "putmask": {
                        "type": "function",
                        "info": "Return a new Index of the values set with the mask.",
                        "returns": "pd.Index",
                        "parameters": {
                            "mask": "<class 'pandas.core.indexes.base.Index'>",
                            "value": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "ravel": {
                        "type": "function",
                        "info": "Return a view on self.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "order": "str_t"
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Create index with target's values.",
                        "returns": "tuple[Index, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "level": ".",
                            "limit": "int | None",
                            "tolerance": "float | None"
                        }
                    },
                    "repeat": {
                        "type": "function",
                        "info": "Repeat elements of a Index.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "repeats": "<class 'NoneType'>",
                            "axis": "None"
                        }
                    },
                    "resolution": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "round": {
                        "type": "function",
                        "info": "Perform round operation on the data to the specified `freq`.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "npt.NDArray[np.intp] | np.intp",
                        "parameters": {
                            "value": "NumpyValueArrayLike | ExtensionArray",
                            "side": "Literal['left', 'right']",
                            "sorter": "NumpySorter | None"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple of the shape of the underlying data.",
                        "returns": "Shape"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of time frequency increments.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "periods": "int",
                            "freq": "."
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return the number of elements in the underlying data.",
                        "returns": "int"
                    },
                    "slice_indexer": {
                        "type": "function",
                        "info": "Return indexer for specified label slice.",
                        "returns": "None",
                        "parameters": {
                            "start": "None",
                            "end": "None",
                            "step": "None"
                        }
                    },
                    "slice_locs": {
                        "type": "function",
                        "info": "Compute slice locations for input labels.",
                        "returns": "tuple[int, int]",
                        "parameters": {
                            "start": "tuple[int, int]",
                            "end": "tuple[int, int]",
                            "step": "tuple[int, int]"
                        }
                    },
                    "snap": {
                        "type": "function",
                        "info": "Snap time stamps to nearest occurring frequency.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "freq": "Frequency"
                        }
                    },
                    "sort": {
                        "type": "function",
                        "info": "Use sort_values instead.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Return a sorted copy of the index.",
                        "returns": "pd.DatetimeIndex | tuple[pd.DatetimeIndex, np.ndarray]",
                        "parameters": {
                            "return_indexer": "bool",
                            "ascending": "bool",
                            "na_position": "NaPosition",
                            "key": "Callable | None"
                        }
                    },
                    "sortlevel": {
                        "type": "function",
                        "info": "For internal compatibility with the Index API.",
                        "returns": "None",
                        "parameters": {
                            "level": "None",
                            "ascending": "bool | list[bool]",
                            "sort_remaining": "None",
                            "na_position": "NaPosition"
                        }
                    },
                    "std": {
                        "type": "function",
                        "info": "Return sample standard deviation over requested axis.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "strftime": {
                        "type": "function",
                        "info": "Convert to Index using specified date_format.",
                        "returns": "pd.Index",
                        "parameters": {
                            "date_format": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "symmetric_difference": {
                        "type": "function",
                        "info": "Compute the symmetric difference of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "result_name": "None",
                            "sort": "None"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return a new Index of the values selected by the indices.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "indices": ".",
                            "axis": "Axis",
                            "allow_fill": "bool",
                            "fill_value": ".",
                            "kwargs": "."
                        }
                    },
                    "to_flat_index": {
                        "type": "function",
                        "info": "Identity method.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {}
                    },
                    "to_frame": {
                        "type": "function",
                        "info": "Create a DataFrame with a column containing the Index.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "index": "bool",
                            "name": "Hashable"
                        }
                    },
                    "to_julian_date": {
                        "type": "function",
                        "info": "Convert Datetime Array to float64 ndarray of Julian Dates.",
                        "returns": "pd.Index",
                        "parameters": {}
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "A NumPy ndarray representing the values in this Series or Index.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object",
                            "kwargs": "."
                        }
                    },
                    "to_period": {
                        "type": "function",
                        "info": "Cast to PeriodArray/PeriodIndex at a particular frequency.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "to_pydatetime": {
                        "type": "function",
                        "info": "Return an ndarray of ``datetime.datetime`` objects.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "to_series": {
                        "type": "function",
                        "info": "Create a Series with both index and values equal to the index keys.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": ".",
                            "name": "Hashable | None"
                        }
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "args": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "tz_convert": {
                        "type": "function",
                        "info": "Convert tz-aware Datetime Array/Index from one time zone to another.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "tz": "."
                        }
                    },
                    "tz_localize": {
                        "type": "function",
                        "info": "Localize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "tz": ".",
                            "ambiguous": "TimeAmbiguous",
                            "nonexistent": "TimeNonexistent"
                        }
                    },
                    "union": {
                        "type": "function",
                        "info": "Form the union of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return unique values in the index.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "level": "Hashable | None"
                        }
                    },
                    "unit": {
                        "type": "property",
                        "info": "",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of unique values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "bins": ".",
                            "dropna": "bool"
                        }
                    },
                    "values": {
                        "type": "property",
                        "info": "Return an array representing the data in the Index.",
                        "returns": "np.ndarray"
                    },
                    "view": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "cls": "None"
                        }
                    },
                    "where": {
                        "type": "function",
                        "info": "Replace values where the condition is False.",
                        "returns": "pd.Index",
                        "parameters": {
                            "cond": "<class 'pandas.core.indexes.base.Index'>",
                            "other": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "DatetimeTZDtype": {
                "type": "class",
                "info": "An ExtensionDtype for timezone-aware datetime data.",
                "returns": "pd.DatetimeTZDtype",
                "items": {
                    "kind": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "base": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "isbuiltin": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "isnative": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "NaTType"
                    },
                    "name": {
                        "type": "property",
                        "info": "A string representation of the dtype.",
                        "returns": "str_type"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "num": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "reset_cache": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "shape": {
                        "type": "object",
                        "info": "Built-in immutable sequence.",
                        "returns": "tuple"
                    },
                    "str": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "tz": {
                        "type": "property",
                        "info": "The timezone.",
                        "returns": "tzinfo"
                    },
                    "unit": {
                        "type": "property",
                        "info": "The precision of the datetime data.",
                        "returns": "str_type"
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "unit": "str_type | DatetimeTZDtype",
                            "tz": "<class 'NoneType'>"
                        }
                    }
                }
            },
            "ExcelFile": {
                "type": "class",
                "info": "Class for parsing tabular Excel sheets into DataFrame objects.",
                "returns": "pd.ExcelFile",
                "items": {
                    "CalamineReader": {
                        "type": "class",
                        "info": "Abstract base class for generic types.",
                        "returns": "pd.ExcelFile.CalamineReader",
                        "items": {
                            "close": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {}
                            },
                            "get_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "CalamineSheet",
                                "parameters": {
                                    "index": "int"
                                }
                            },
                            "get_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "CalamineSheet",
                                "parameters": {
                                    "name": "str"
                                }
                            },
                            "get_sheet_data": {
                                "type": "function",
                                "info": "",
                                "returns": "list[list[Scalar | NaTType | time]]",
                                "parameters": {
                                    "sheet": "CalamineSheet",
                                    "file_rows_needed": "int | None"
                                }
                            },
                            "load_workbook": {
                                "type": "function",
                                "info": "",
                                "returns": "CalamineWorkbook",
                                "parameters": {
                                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                                    "engine_kwargs": "Any"
                                }
                            },
                            "parse": {
                                "type": "function",
                                "info": "",
                                "returns": "pd.pd.ExcelFile.CalamineReader",
                                "parameters": {
                                    "sheet_name": "str | int | list[int] | list[str] | None",
                                    "header": "int | Sequence[int] | None",
                                    "names": "SequenceNotStr[Hashable] | range | None",
                                    "index_col": "int | Sequence[int] | None",
                                    "usecols": ".",
                                    "dtype": "DtypeArg | None",
                                    "true_values": "Iterable[Hashable] | None",
                                    "false_values": "Iterable[Hashable] | None",
                                    "skiprows": "Sequence[int] | int | Callable[[int], object] | None",
                                    "nrows": "int | None",
                                    "na_values": ".",
                                    "verbose": "bool",
                                    "parse_dates": "list | dict | bool",
                                    "date_parser": "Callable | lib.NoDefault",
                                    "date_format": "dict[Hashable, str] | str | None",
                                    "thousands": "str | None",
                                    "decimal": "str",
                                    "comment": "str | None",
                                    "skipfooter": "int",
                                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                                    "kwds": "."
                                }
                            },
                            "raise_if_bad_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "index": "int"
                                }
                            },
                            "raise_if_bad_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "name": "str"
                                }
                            },
                            "sheet_names": {
                                "type": "property",
                                "info": "",
                                "returns": "list[str]"
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Reader using calamine engine (xlsx/xls/xlsb/ods).",
                                "returns": "None",
                                "parameters": {
                                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                                    "storage_options": "StorageOptions | None",
                                    "engine_kwargs": "dict | None"
                                }
                            }
                        }
                    },
                    "ODFReader": {
                        "type": "class",
                        "info": "",
                        "returns": "pd.ExcelFile.ODFReader",
                        "items": {
                            "close": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {}
                            },
                            "empty_value": {
                                "type": "property",
                                "info": "Property for compat with other readers.",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "get_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "index": "int"
                                }
                            },
                            "get_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "name": "str"
                                }
                            },
                            "get_sheet_data": {
                                "type": "function",
                                "info": "Parse an ODF Table into a list of lists",
                                "returns": "list[list[Scalar | NaTType]]",
                                "parameters": {
                                    "sheet": ".",
                                    "file_rows_needed": "int | None"
                                }
                            },
                            "load_workbook": {
                                "type": "function",
                                "info": "",
                                "returns": "OpenDocument",
                                "parameters": {
                                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                                    "engine_kwargs": "."
                                }
                            },
                            "parse": {
                                "type": "function",
                                "info": "",
                                "returns": "pd.pd.ExcelFile.ODFReader",
                                "parameters": {
                                    "sheet_name": "str | int | list[int] | list[str] | None",
                                    "header": "int | Sequence[int] | None",
                                    "names": "SequenceNotStr[Hashable] | range | None",
                                    "index_col": "int | Sequence[int] | None",
                                    "usecols": ".",
                                    "dtype": "DtypeArg | None",
                                    "true_values": "Iterable[Hashable] | None",
                                    "false_values": "Iterable[Hashable] | None",
                                    "skiprows": "Sequence[int] | int | Callable[[int], object] | None",
                                    "nrows": "int | None",
                                    "na_values": ".",
                                    "verbose": "bool",
                                    "parse_dates": "list | dict | bool",
                                    "date_parser": "Callable | lib.NoDefault",
                                    "date_format": "dict[Hashable, str] | str | None",
                                    "thousands": "str | None",
                                    "decimal": "str",
                                    "comment": "str | None",
                                    "skipfooter": "int",
                                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                                    "kwds": "."
                                }
                            },
                            "raise_if_bad_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "index": "int"
                                }
                            },
                            "raise_if_bad_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "name": "str"
                                }
                            },
                            "sheet_names": {
                                "type": "property",
                                "info": "Return a list of sheet names present in the document",
                                "returns": "list[str]"
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Read tables out of OpenDocument formatted files.",
                                "returns": "None",
                                "parameters": {
                                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                                    "storage_options": "StorageOptions | None",
                                    "engine_kwargs": "dict | None"
                                }
                            }
                        }
                    },
                    "OpenpyxlReader": {
                        "type": "class",
                        "info": "Abstract base class for generic types.",
                        "returns": "pd.ExcelFile.OpenpyxlReader",
                        "items": {
                            "close": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {}
                            },
                            "get_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "index": "int"
                                }
                            },
                            "get_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "name": "str"
                                }
                            },
                            "get_sheet_data": {
                                "type": "function",
                                "info": "",
                                "returns": "list[list[Scalar]]",
                                "parameters": {
                                    "sheet": ".",
                                    "file_rows_needed": "int | None"
                                }
                            },
                            "load_workbook": {
                                "type": "function",
                                "info": "",
                                "returns": "Workbook",
                                "parameters": {
                                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                                    "engine_kwargs": "."
                                }
                            },
                            "parse": {
                                "type": "function",
                                "info": "",
                                "returns": "pd.pd.ExcelFile.OpenpyxlReader",
                                "parameters": {
                                    "sheet_name": "str | int | list[int] | list[str] | None",
                                    "header": "int | Sequence[int] | None",
                                    "names": "SequenceNotStr[Hashable] | range | None",
                                    "index_col": "int | Sequence[int] | None",
                                    "usecols": ".",
                                    "dtype": "DtypeArg | None",
                                    "true_values": "Iterable[Hashable] | None",
                                    "false_values": "Iterable[Hashable] | None",
                                    "skiprows": "Sequence[int] | int | Callable[[int], object] | None",
                                    "nrows": "int | None",
                                    "na_values": ".",
                                    "verbose": "bool",
                                    "parse_dates": "list | dict | bool",
                                    "date_parser": "Callable | lib.NoDefault",
                                    "date_format": "dict[Hashable, str] | str | None",
                                    "thousands": "str | None",
                                    "decimal": "str",
                                    "comment": "str | None",
                                    "skipfooter": "int",
                                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                                    "kwds": "."
                                }
                            },
                            "raise_if_bad_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "index": "int"
                                }
                            },
                            "raise_if_bad_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "name": "str"
                                }
                            },
                            "sheet_names": {
                                "type": "property",
                                "info": "",
                                "returns": "list[str]"
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Reader using openpyxl engine.",
                                "returns": "None",
                                "parameters": {
                                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                                    "storage_options": "StorageOptions | None",
                                    "engine_kwargs": "dict | None"
                                }
                            }
                        }
                    },
                    "PyxlsbReader": {
                        "type": "class",
                        "info": "Abstract base class for generic types.",
                        "returns": "pd.ExcelFile.PyxlsbReader",
                        "items": {
                            "close": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {}
                            },
                            "get_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "index": "int"
                                }
                            },
                            "get_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "name": "str"
                                }
                            },
                            "get_sheet_data": {
                                "type": "function",
                                "info": "",
                                "returns": "list[list[Scalar]]",
                                "parameters": {
                                    "sheet": ".",
                                    "file_rows_needed": "int | None"
                                }
                            },
                            "load_workbook": {
                                "type": "function",
                                "info": "",
                                "returns": "Workbook",
                                "parameters": {
                                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                                    "engine_kwargs": "."
                                }
                            },
                            "parse": {
                                "type": "function",
                                "info": "",
                                "returns": "pd.pd.ExcelFile.PyxlsbReader",
                                "parameters": {
                                    "sheet_name": "str | int | list[int] | list[str] | None",
                                    "header": "int | Sequence[int] | None",
                                    "names": "SequenceNotStr[Hashable] | range | None",
                                    "index_col": "int | Sequence[int] | None",
                                    "usecols": ".",
                                    "dtype": "DtypeArg | None",
                                    "true_values": "Iterable[Hashable] | None",
                                    "false_values": "Iterable[Hashable] | None",
                                    "skiprows": "Sequence[int] | int | Callable[[int], object] | None",
                                    "nrows": "int | None",
                                    "na_values": ".",
                                    "verbose": "bool",
                                    "parse_dates": "list | dict | bool",
                                    "date_parser": "Callable | lib.NoDefault",
                                    "date_format": "dict[Hashable, str] | str | None",
                                    "thousands": "str | None",
                                    "decimal": "str",
                                    "comment": "str | None",
                                    "skipfooter": "int",
                                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                                    "kwds": "."
                                }
                            },
                            "raise_if_bad_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "index": "int"
                                }
                            },
                            "raise_if_bad_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "name": "str"
                                }
                            },
                            "sheet_names": {
                                "type": "property",
                                "info": "",
                                "returns": "list[str]"
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Reader using pyxlsb engine.",
                                "returns": "None",
                                "parameters": {
                                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                                    "storage_options": "StorageOptions | None",
                                    "engine_kwargs": "dict | None"
                                }
                            }
                        }
                    },
                    "XlrdReader": {
                        "type": "class",
                        "info": "Abstract base class for generic types.",
                        "returns": "pd.ExcelFile.XlrdReader",
                        "items": {
                            "close": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {}
                            },
                            "get_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "index": "None"
                                }
                            },
                            "get_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "name": "None"
                                }
                            },
                            "get_sheet_data": {
                                "type": "function",
                                "info": "",
                                "returns": "list[list[Scalar]]",
                                "parameters": {
                                    "sheet": ".",
                                    "file_rows_needed": "int | None"
                                }
                            },
                            "load_workbook": {
                                "type": "function",
                                "info": "",
                                "returns": "Book",
                                "parameters": {
                                    "filepath_or_buffer": ".",
                                    "engine_kwargs": "."
                                }
                            },
                            "parse": {
                                "type": "function",
                                "info": "",
                                "returns": "pd.pd.ExcelFile.XlrdReader",
                                "parameters": {
                                    "sheet_name": "str | int | list[int] | list[str] | None",
                                    "header": "int | Sequence[int] | None",
                                    "names": "SequenceNotStr[Hashable] | range | None",
                                    "index_col": "int | Sequence[int] | None",
                                    "usecols": ".",
                                    "dtype": "DtypeArg | None",
                                    "true_values": "Iterable[Hashable] | None",
                                    "false_values": "Iterable[Hashable] | None",
                                    "skiprows": "Sequence[int] | int | Callable[[int], object] | None",
                                    "nrows": "int | None",
                                    "na_values": ".",
                                    "verbose": "bool",
                                    "parse_dates": "list | dict | bool",
                                    "date_parser": "Callable | lib.NoDefault",
                                    "date_format": "dict[Hashable, str] | str | None",
                                    "thousands": "str | None",
                                    "decimal": "str",
                                    "comment": "str | None",
                                    "skipfooter": "int",
                                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                                    "kwds": "."
                                }
                            },
                            "raise_if_bad_sheet_by_index": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "index": "int"
                                }
                            },
                            "raise_if_bad_sheet_by_name": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "name": "str"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Reader using xlrd engine.",
                                "returns": "None",
                                "parameters": {
                                    "filepath_or_buffer": ".",
                                    "storage_options": "StorageOptions | None",
                                    "engine_kwargs": "dict | None"
                                }
                            }
                        }
                    },
                    "close": {
                        "type": "function",
                        "info": "close io if necessary",
                        "returns": "None",
                        "parameters": {}
                    },
                    "parse": {
                        "type": "function",
                        "info": "Parse specified sheet(s) into a DataFrame.",
                        "returns": "pd.DataFrame| dict[str, DataFrame] | dict[int, DataFrame]",
                        "parameters": {
                            "sheet_name": "str | int | list[int] | list[str] | None",
                            "header": "int | Sequence[int] | None",
                            "names": "SequenceNotStr[Hashable] | range | None",
                            "index_col": "int | Sequence[int] | None",
                            "usecols": ".",
                            "converters": ".",
                            "true_values": "Iterable[Hashable] | None",
                            "false_values": "Iterable[Hashable] | None",
                            "skiprows": "Sequence[int] | int | Callable[[int], object] | None",
                            "nrows": "int | None",
                            "na_values": ".",
                            "parse_dates": "list | dict | bool",
                            "date_parser": "Callable | lib.NoDefault",
                            "date_format": "str | dict[Hashable, str] | None",
                            "thousands": "str | None",
                            "comment": "str | None",
                            "skipfooter": "int",
                            "dtype_backend": "DtypeBackend | lib.NoDefault",
                            "kwds": "."
                        }
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "path_or_buffer": ".",
                            "engine": "str | None",
                            "storage_options": "StorageOptions | None",
                            "engine_kwargs": "dict | None"
                        }
                    }
                }
            },
            "ExcelWriter": {
                "type": "class",
                "info": "Class for writing DataFrame objects into excel sheets.",
                "returns": "pd.ExcelWriter",
                "items": {
                    "book": {
                        "type": "property",
                        "info": "Book instance. Class type will depend on the engine used.",
                        "returns": "_WorkbookT"
                    },
                    "check_extension": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "close": {
                        "type": "function",
                        "info": "synonym for save, to make it more file-like",
                        "returns": "None",
                        "parameters": {}
                    },
                    "date_format": {
                        "type": "property",
                        "info": "Format string for dates written into Excel files (e.g. 'YYYY-MM-DD').",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "datetime_format": {
                        "type": "property",
                        "info": "Format string for dates written into Excel files (e.g. 'YYYY-MM-DD').",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "engine": {
                        "type": "property",
                        "info": "Name of engine.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "if_sheet_exists": {
                        "type": "property",
                        "info": "How to behave when writing to a sheet that already exists in append mode.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "sheets": {
                        "type": "property",
                        "info": "Mapping of sheet names to sheet objects.",
                        "returns": "dict[str, Any]"
                    },
                    "supported_extensions": {
                        "type": "property",
                        "info": "Extensions that writer engine supports.",
                        "returns": "tuple[str, ...]"
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "path": "FilePath | WriteExcelBuffer | ExcelWriter",
                            "engine": "str | None",
                            "date_format": "str | None",
                            "datetime_format": "str | None",
                            "mode": "str",
                            "storage_options": "StorageOptions | None",
                            "if_sheet_exists": "ExcelWriterIfSheetExists | None",
                            "engine_kwargs": "dict[str, Any] | None"
                        }
                    }
                }
            },
            "Flags": {
                "type": "class",
                "info": "Flags that apply to pandas objects.",
                "returns": "pd.Flags",
                "items": {
                    "__getitem__": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "key": "str"
                        }
                    },
                    "allows_duplicate_labels": {
                        "type": "property",
                        "info": "Whether this object allows duplicate labels.",
                        "returns": "bool"
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "obj": "NDFrame",
                            "allows_duplicate_labels": "bool"
                        }
                    }
                }
            },
            "Float32Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for float32 data.",
                "returns": "pd.Float32Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Single-precision floating-point number type, compatible with C ``float``.",
                        "returns": "numpy.float32",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "as_integer_ratio": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Float64Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for float64 data.",
                "returns": "pd.Float64Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Double-precision floating-point number type, compatible with Python `float`",
                        "returns": "numpy.float64",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "as_integer_ratio": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fromhex": {
                                "type": "object",
                                "info": "",
                                "returns": "builtin_function_or_method"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "hex": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Grouper": {
                "type": "class",
                "info": "A Grouper allows the user to specify a groupby instruction for an object.",
                "returns": "pd.Grouper",
                "items": {
                    "sort": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "bool"
                    },
                    "dropna": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "bool"
                    },
                    "ax": {
                        "type": "property",
                        "info": "",
                        "returns": "pd.Index"
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "key": ".",
                            "level": ".",
                            "freq": ".",
                            "axis": "Axis | lib.NoDefault",
                            "sort": "bool",
                            "dropna": "bool"
                        }
                    }
                }
            },
            "HDFStore": {
                "type": "class",
                "info": "Dict-like IO interface for storing pandas objects in PyTables.",
                "returns": "pd.HDFStore",
                "items": {
                    "__getitem__": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "key": "str"
                        }
                    },
                    "append": {
                        "type": "function",
                        "info": "Append to Table in file.",
                        "returns": "None",
                        "parameters": {
                            "key": "str",
                            "value": "DataFrame | Series",
                            "format": "<class 'NoneType'>",
                            "axes": "<class 'NoneType'>",
                            "index": "bool | list[str]",
                            "append": "bool",
                            "complib": "<class 'NoneType'>",
                            "complevel": "int | None",
                            "columns": "<class 'NoneType'>",
                            "min_itemsize": "int | dict[str, int] | None",
                            "nan_rep": "<class 'NoneType'>",
                            "chunksize": "int | None",
                            "expectedrows": "<class 'NoneType'>",
                            "dropna": "bool | None",
                            "data_columns": "Literal[True] | list[str] | None",
                            "encoding": "<class 'NoneType'>",
                            "errors": "str"
                        }
                    },
                    "append_to_multiple": {
                        "type": "function",
                        "info": "Append to multiple tables",
                        "returns": "None",
                        "parameters": {
                            "d": "dict",
                            "value": "<class 'NoneType'>",
                            "selector": "<class 'NoneType'>",
                            "data_columns": "<class 'NoneType'>",
                            "axes": "<class 'NoneType'>",
                            "dropna": "bool",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "close": {
                        "type": "function",
                        "info": "Close the PyTables file handle",
                        "returns": "None",
                        "parameters": {}
                    },
                    "copy": {
                        "type": "function",
                        "info": "Copy the existing store to a new file, updating in place.",
                        "returns": "pd.HDFStore",
                        "parameters": {
                            "file": "<class 'pandas.io.pytables.HDFStore'>",
                            "mode": "str",
                            "propindexes": "bool",
                            "keys": "<class 'pandas.io.pytables.HDFStore'>",
                            "complib": "<class 'pandas.io.pytables.HDFStore'>",
                            "complevel": "int | None",
                            "fletcher32": "bool",
                            "overwrite": "bool"
                        }
                    },
                    "create_table_index": {
                        "type": "function",
                        "info": "Create a pytables index on the table.",
                        "returns": "None",
                        "parameters": {
                            "key": "str",
                            "columns": "<class 'NoneType'>",
                            "optlevel": "int | None",
                            "kind": "str | None"
                        }
                    },
                    "filename": {
                        "type": "property",
                        "info": "",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "flush": {
                        "type": "function",
                        "info": "Force all buffered modifications to be written to disk.",
                        "returns": "None",
                        "parameters": {
                            "fsync": "bool"
                        }
                    },
                    "get": {
                        "type": "function",
                        "info": "Retrieve pandas object stored in file.",
                        "returns": "None",
                        "parameters": {
                            "key": "str"
                        }
                    },
                    "get_node": {
                        "type": "function",
                        "info": "return the node with the key or None if it does not exist",
                        "returns": "Node | None",
                        "parameters": {
                            "key": "str"
                        }
                    },
                    "get_storer": {
                        "type": "function",
                        "info": "return the storer object for a key, raise if not in the file",
                        "returns": "GenericFixed | Table",
                        "parameters": {
                            "key": "str"
                        }
                    },
                    "groups": {
                        "type": "function",
                        "info": "Return a list of all the top-level nodes.",
                        "returns": "pd.Series.list",
                        "parameters": {}
                    },
                    "info": {
                        "type": "function",
                        "info": "Print detailed information on the store.",
                        "returns": "pd.CategoricalIndex.str",
                        "parameters": {}
                    },
                    "is_open": {
                        "type": "property",
                        "info": "return a boolean indicating whether the file is open",
                        "returns": "bool"
                    },
                    "items": {
                        "type": "function",
                        "info": "iterate on key->group",
                        "returns": "Iterator[tuple[str, list]]",
                        "parameters": {}
                    },
                    "keys": {
                        "type": "function",
                        "info": "Return a list of keys corresponding to objects stored in HDFStore.",
                        "returns": "list[str]",
                        "parameters": {
                            "include": "str"
                        }
                    },
                    "open": {
                        "type": "function",
                        "info": "Open the file in the specified mode",
                        "returns": "None",
                        "parameters": {
                            "mode": "str",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "put": {
                        "type": "function",
                        "info": "Store object in HDFStore.",
                        "returns": "None",
                        "parameters": {
                            "key": "str",
                            "value": "DataFrame | Series",
                            "format": "<class 'NoneType'>",
                            "index": "bool",
                            "append": "bool",
                            "complib": "<class 'NoneType'>",
                            "complevel": "int | None",
                            "min_itemsize": "int | dict[str, int] | None",
                            "nan_rep": "<class 'NoneType'>",
                            "data_columns": "Literal[True] | list[str] | None",
                            "encoding": "<class 'NoneType'>",
                            "errors": "str",
                            "track_times": "bool",
                            "dropna": "bool"
                        }
                    },
                    "remove": {
                        "type": "function",
                        "info": "Remove pandas object partially by specifying the where condition",
                        "returns": "None",
                        "parameters": {
                            "key": "str",
                            "where": "<class 'NoneType'>",
                            "start": "<class 'NoneType'>",
                            "stop": "<class 'NoneType'>"
                        }
                    },
                    "select": {
                        "type": "function",
                        "info": "Retrieve pandas object stored in file, optionally based on where criteria.",
                        "returns": "None",
                        "parameters": {
                            "key": "str",
                            "where": "None",
                            "start": "None",
                            "stop": "None",
                            "columns": "None",
                            "iterator": "bool",
                            "chunksize": "int | None",
                            "auto_close": "bool"
                        }
                    },
                    "select_as_coordinates": {
                        "type": "function",
                        "info": "return the selection as an Index",
                        "returns": "None",
                        "parameters": {
                            "key": "str",
                            "where": "None",
                            "start": "int | None",
                            "stop": "int | None"
                        }
                    },
                    "select_as_multiple": {
                        "type": "function",
                        "info": "Retrieve pandas objects from multiple tables.",
                        "returns": "None",
                        "parameters": {
                            "keys": "None",
                            "where": "None",
                            "selector": "None",
                            "columns": "None",
                            "start": "None",
                            "stop": "None",
                            "iterator": "bool",
                            "chunksize": "int | None",
                            "auto_close": "bool"
                        }
                    },
                    "select_column": {
                        "type": "function",
                        "info": "return a single column from the table. This is generally only useful to",
                        "returns": "None",
                        "parameters": {
                            "key": "str",
                            "column": "str",
                            "start": "int | None",
                            "stop": "int | None"
                        }
                    },
                    "walk": {
                        "type": "function",
                        "info": "Walk the pytables group hierarchy for pandas objects.",
                        "returns": "Iterator[tuple[str, list[str], list[str]]]",
                        "parameters": {
                            "where": "str"
                        }
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "path": "<class 'NoneType'>",
                            "mode": "str",
                            "complevel": "int | None",
                            "complib": "<class 'NoneType'>",
                            "fletcher32": "bool",
                            "kwargs": "<class 'NoneType'>"
                        }
                    }
                }
            },
            "Index": {
                "type": "class",
                "info": "Immutable sequence used for indexing and alignment.",
                "returns": "pd.Index",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.Index"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "Override numpy.ndarray's __getitem__ method to work as desired.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "append": {
                        "type": "function",
                        "info": "Append a collection of Index options together.",
                        "returns": "pd.Index",
                        "parameters": {
                            "other": "Index | Sequence[Index]"
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return int position of the largest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return int position of the smallest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Return the integer indices that would sort the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "array": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the label from the index, or, if not present, the previous one.",
                        "returns": "None",
                        "parameters": {
                            "label": "None"
                        }
                    },
                    "asof_locs": {
                        "type": "function",
                        "info": "Return the locations (indices) of labels in the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "where": "Index",
                            "mask": "npt.NDArray[np.bool_]"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Create an Index with values cast to dtypes.",
                        "returns": "None",
                        "parameters": {
                            "dtype": "None",
                            "copy": "bool"
                        }
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object.",
                        "returns": "pd.Index",
                        "parameters": {
                            "name": "Hashable | None",
                            "deep": "bool"
                        }
                    },
                    "delete": {
                        "type": "function",
                        "info": "Make new Index with passed location(-s) deleted.",
                        "returns": "pd.Index",
                        "parameters": {
                            "loc": "<class 'NoneType'>"
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "Computes the difference between consecutive values in the Index object.",
                        "returns": "pd.Index",
                        "parameters": {
                            "periods": "int"
                        }
                    },
                    "difference": {
                        "type": "function",
                        "info": "Return a new Index with elements of index not in `other`.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Make new Index with passed list of labels deleted.",
                        "returns": "pd.Index",
                        "parameters": {
                            "labels": "Index | np.ndarray | Iterable[Hashable]",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return Index with duplicate values removed.",
                        "returns": "pd.Index",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return index with requested level(s) removed.",
                        "returns": "None",
                        "parameters": {
                            "level": "IndexLabel"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return Index without NA/NaN values.",
                        "returns": "pd.Index",
                        "parameters": {
                            "how": "AnyAll"
                        }
                    },
                    "dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Indicate duplicate index values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "",
                        "returns": "bool"
                    },
                    "equals": {
                        "type": "function",
                        "info": "Determine if two Index object are equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "Any"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the object as an enumerated type or categorical variable.",
                        "returns": "tuple[npt.NDArray[np.intp], Index]",
                        "parameters": {
                            "sort": "bool",
                            "use_na_sentinel": "bool"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values with the specified value.",
                        "returns": "None",
                        "parameters": {
                            "value": "None",
                            "downcast": "None"
                        }
                    },
                    "format": {
                        "type": "function",
                        "info": "Render a string representation of the Index.",
                        "returns": "list[str_t]",
                        "parameters": {
                            "name": "bool",
                            "formatter": "Callable | None",
                            "na_rep": "str_t"
                        }
                    },
                    "get_indexer": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "get_indexer_for": {
                        "type": "function",
                        "info": "Guaranteed return of an indexer even when non-unique.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_indexer_non_unique": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_level_values": {
                        "type": "function",
                        "info": "Return an Index of values for requested level.",
                        "returns": "pd.Index",
                        "parameters": {
                            "level": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "get_loc": {
                        "type": "function",
                        "info": "Get integer location, slice or boolean mask for requested label.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "get_slice_bound": {
                        "type": "function",
                        "info": "Calculate slice bound that corresponds to given label.",
                        "returns": "int",
                        "parameters": {
                            "label": "<class 'int'>",
                            "side": "Literal['left', 'right']"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group the index labels by a given array of values.",
                        "returns": "PrettyDict[Hashable, np.ndarray]",
                        "parameters": {
                            "values": "."
                        }
                    },
                    "has_duplicates": {
                        "type": "property",
                        "info": "Check if the Index has duplicate values.",
                        "returns": "bool"
                    },
                    "hasnans": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "holds_integer": {
                        "type": "function",
                        "info": "Whether the type is an integer type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "identical": {
                        "type": "function",
                        "info": "Similar to equals, but checks that object attributes and types are also equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "If we have an object dtype, try to infer a non-object dtype.",
                        "returns": "pd.Index",
                        "parameters": {
                            "copy": "bool"
                        }
                    },
                    "inferred_type": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "insert": {
                        "type": "function",
                        "info": "Make new Index inserting new item at location.",
                        "returns": "pd.Index",
                        "parameters": {
                            "loc": "int",
                            "item": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "intersection": {
                        "type": "function",
                        "info": "Form the intersection of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "bool"
                        }
                    },
                    "is_": {
                        "type": "function",
                        "info": "More flexible, faster check like ``is`` but that works through views.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "is_boolean": {
                        "type": "function",
                        "info": "Check if the Index only consists of booleans.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_categorical": {
                        "type": "function",
                        "info": "Check if the Index holds categorical data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_floating": {
                        "type": "function",
                        "info": "Check if the Index is a floating type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_integer": {
                        "type": "function",
                        "info": "Check if the Index only consists of integers.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_interval": {
                        "type": "function",
                        "info": "Check if the Index holds Interval objects.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_monotonic_decreasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or decreasing.",
                        "returns": "bool"
                    },
                    "is_monotonic_increasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or increasing.",
                        "returns": "bool"
                    },
                    "is_numeric": {
                        "type": "function",
                        "info": "Check if the Index only consists of numeric data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_object": {
                        "type": "function",
                        "info": "Check if the Index is of the object dtype.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_unique": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "isin": {
                        "type": "function",
                        "info": "Return a boolean array where the index values are in `values`.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "values": ".",
                            "level": "."
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "item": {
                        "type": "function",
                        "info": "Return the first element of the underlying data as a Python scalar.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "join": {
                        "type": "function",
                        "info": "Compute join_index and indexers to conform data structures to the new index.",
                        "returns": "pd.Index | pd.tuple[Index, npt.NDArray[np.intp] | pd.None, npt.NDArray[np.intp] | pd.None]",
                        "parameters": {
                            "other": "Index",
                            "how": "JoinHow",
                            "level": "Level | None",
                            "return_indexers": "bool",
                            "sort": "bool"
                        }
                    },
                    "map": {
                        "type": "function",
                        "info": "Map values using an input mapping or function.",
                        "returns": "None",
                        "parameters": {
                            "mapper": "None",
                            "na_action": "Literal['ignore'] | None"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "Return the maximum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Memory usage of the values.",
                        "returns": "int",
                        "parameters": {
                            "deep": "bool"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "Return the minimum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "name": {
                        "type": "property",
                        "info": "Return Index or MultiIndex name.",
                        "returns": "Hashable"
                    },
                    "names": {
                        "type": "property",
                        "info": "",
                        "returns": "FrozenList"
                    },
                    "nbytes": {
                        "type": "property",
                        "info": "Return the number of bytes in the underlying data.",
                        "returns": "int"
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Number of dimensions of the underlying data, by definition 1.",
                        "returns": "int"
                    },
                    "nlevels": {
                        "type": "property",
                        "info": "Number of levels.",
                        "returns": "int"
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Return number of unique elements in the object.",
                        "returns": "int",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "putmask": {
                        "type": "function",
                        "info": "Return a new Index of the values set with the mask.",
                        "returns": "pd.Index",
                        "parameters": {
                            "mask": "<class 'pandas.core.indexes.base.Index'>",
                            "value": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "ravel": {
                        "type": "function",
                        "info": "Return a view on self.",
                        "returns": "pd.Index",
                        "parameters": {
                            "order": "str_t"
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Create index with target's values.",
                        "returns": "tuple[Index, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "level": ".",
                            "limit": "int | None",
                            "tolerance": "float | None"
                        }
                    },
                    "repeat": {
                        "type": "function",
                        "info": "Repeat elements of a Index.",
                        "returns": "pd.Index",
                        "parameters": {
                            "repeats": "<class 'NoneType'>",
                            "axis": "None"
                        }
                    },
                    "round": {
                        "type": "function",
                        "info": "Round each value in the Index to the given number of decimals.",
                        "returns": "pd.Index",
                        "parameters": {
                            "decimals": "int"
                        }
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "npt.NDArray[np.intp] | np.intp",
                        "parameters": {
                            "value": "NumpyValueArrayLike | ExtensionArray",
                            "side": "Literal['left', 'right']",
                            "sorter": "NumpySorter | None"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple of the shape of the underlying data.",
                        "returns": "Shape"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of time frequency increments.",
                        "returns": "None",
                        "parameters": {
                            "periods": "int",
                            "freq": "None"
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return the number of elements in the underlying data.",
                        "returns": "int"
                    },
                    "slice_indexer": {
                        "type": "function",
                        "info": "Compute the slice indexer for input labels and step.",
                        "returns": "slice",
                        "parameters": {
                            "start": "Hashable | None",
                            "end": "Hashable | None",
                            "step": "int | None"
                        }
                    },
                    "slice_locs": {
                        "type": "function",
                        "info": "Compute slice locations for input labels.",
                        "returns": "tuple[int, int]",
                        "parameters": {
                            "start": "tuple[int, int]",
                            "end": "tuple[int, int]",
                            "step": "tuple[int, int]"
                        }
                    },
                    "sort": {
                        "type": "function",
                        "info": "Use sort_values instead.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Return a sorted copy of the index.",
                        "returns": "pd.Index | tuple[pd.Index, np.ndarray]",
                        "parameters": {
                            "return_indexer": "bool",
                            "ascending": "bool",
                            "na_position": "NaPosition",
                            "key": "Callable | None"
                        }
                    },
                    "sortlevel": {
                        "type": "function",
                        "info": "For internal compatibility with the Index API.",
                        "returns": "None",
                        "parameters": {
                            "level": "None",
                            "ascending": "bool | list[bool]",
                            "sort_remaining": "None",
                            "na_position": "NaPosition"
                        }
                    },
                    "symmetric_difference": {
                        "type": "function",
                        "info": "Compute the symmetric difference of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "result_name": "None",
                            "sort": "None"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return a new Index of the values selected by the indices.",
                        "returns": "pd.Index",
                        "parameters": {
                            "indices": "<class 'NoneType'>",
                            "axis": "Axis",
                            "allow_fill": "bool",
                            "fill_value": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "to_flat_index": {
                        "type": "function",
                        "info": "Identity method.",
                        "returns": "pd.Index",
                        "parameters": {}
                    },
                    "to_frame": {
                        "type": "function",
                        "info": "Create a DataFrame with a column containing the Index.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "index": "bool",
                            "name": "Hashable"
                        }
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "A NumPy ndarray representing the values in this Series or Index.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object",
                            "kwargs": "."
                        }
                    },
                    "to_series": {
                        "type": "function",
                        "info": "Create a Series with both index and values equal to the index keys.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": ".",
                            "name": "Hashable | None"
                        }
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.Index",
                        "parameters": {
                            "args": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "union": {
                        "type": "function",
                        "info": "Form the union of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return unique values in the index.",
                        "returns": "pd.Index",
                        "parameters": {
                            "level": "Hashable | None"
                        }
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of unique values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "bins": ".",
                            "dropna": "bool"
                        }
                    },
                    "values": {
                        "type": "property",
                        "info": "Return an array representing the data in the Index.",
                        "returns": "ArrayLike"
                    },
                    "view": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "cls": "None"
                        }
                    },
                    "where": {
                        "type": "function",
                        "info": "Replace values where the condition is False.",
                        "returns": "pd.Index",
                        "parameters": {
                            "cond": "<class 'pandas.core.indexes.base.Index'>",
                            "other": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "IndexSlice": {
                "type": "object",
                "info": "Create an object to more easily perform multi-index slicing.",
                "returns": "pandas.core.indexing._IndexSlice"
            },
            "Int16Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for int16 integer data.",
                "returns": "pd.Int16Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Signed integer type, compatible with C ``short``.",
                        "returns": "numpy.int16",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "bit_count": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "denominator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "numerator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Int32Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for int32 integer data.",
                "returns": "pd.Int32Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Signed integer type, compatible with C ``int``.",
                        "returns": "numpy.int32",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "bit_count": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "denominator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "numerator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Int64Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for int64 integer data.",
                "returns": "pd.Int64Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Signed integer type, compatible with Python `int` and C ``long``.",
                        "returns": "numpy.int64",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "bit_count": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "denominator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "numerator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Int8Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for int8 integer data.",
                "returns": "pd.Int8Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Signed integer type, compatible with C ``char``.",
                        "returns": "numpy.int8",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "bit_count": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "denominator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "numerator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Interval": {
                "type": "class",
                "info": "Immutable object implementing an Interval, a bounded slice-like interval.",
                "returns": "pd.Interval",
                "items": {
                    "closed": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "closed_left": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "closed_right": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "is_empty": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "left": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "length": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "mid": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "open_left": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "open_right": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "overlaps": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "right": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "IntervalDtype": {
                "type": "class",
                "info": "An ExtensionDtype for Interval data.",
                "returns": "pd.IntervalDtype",
                "items": {
                    "kind": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "base": {
                        "type": "object",
                        "info": "DType class corresponding to the scalar type and dtype of the same name.",
                        "returns": "numpy.dtypes.ObjectDType"
                    },
                    "closed": {
                        "type": "property",
                        "info": "",
                        "returns": "IntervalClosedType"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "isbuiltin": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "isnative": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "object"
                    },
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "num": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "reset_cache": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "shape": {
                        "type": "object",
                        "info": "Built-in immutable sequence.",
                        "returns": "tuple"
                    },
                    "str": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "type": {
                        "type": "property",
                        "info": "The scalar type for the array, e.g. ``int``",
                        "returns": "type[Interval]"
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "subtype": ".",
                            "closed": "IntervalClosedType | None"
                        }
                    }
                }
            },
            "IntervalIndex": {
                "type": "class",
                "info": "Immutable index of intervals that are closed on the same side.",
                "returns": "pd.IntervalIndex",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.IntervalIndex"
                    },
                    "closed": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_non_overlapping_monotonic": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "closed_left": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "bool"
                    },
                    "closed_right": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "bool"
                    },
                    "open_left": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "bool"
                    },
                    "open_right": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "bool"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "Override numpy.ndarray's __getitem__ method to work as desired.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "append": {
                        "type": "function",
                        "info": "Append a collection of Index options together.",
                        "returns": "pd.Index",
                        "parameters": {
                            "other": "Index | Sequence[Index]"
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return int position of the largest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return int position of the smallest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Return the integer indices that would sort the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "array": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the label from the index, or, if not present, the previous one.",
                        "returns": "None",
                        "parameters": {
                            "label": "None"
                        }
                    },
                    "asof_locs": {
                        "type": "function",
                        "info": "Return the locations (indices) of labels in the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "where": "Index",
                            "mask": "npt.NDArray[np.bool_]"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Create an Index with values cast to dtypes.",
                        "returns": "None",
                        "parameters": {
                            "dtype": "None",
                            "copy": "bool"
                        }
                    },
                    "contains": {
                        "type": "function",
                        "info": "Check elementwise if the Intervals contain the value.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "name": "Hashable | None",
                            "deep": "bool"
                        }
                    },
                    "delete": {
                        "type": "function",
                        "info": "Make new Index with passed location(-s) deleted.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "loc": "<class 'NoneType'>"
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "Computes the difference between consecutive values in the Index object.",
                        "returns": "pd.Index",
                        "parameters": {
                            "periods": "int"
                        }
                    },
                    "difference": {
                        "type": "function",
                        "info": "Return a new Index with elements of index not in `other`.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Make new Index with passed list of labels deleted.",
                        "returns": "pd.Index",
                        "parameters": {
                            "labels": "Index | np.ndarray | Iterable[Hashable]",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return Index with duplicate values removed.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return index with requested level(s) removed.",
                        "returns": "None",
                        "parameters": {
                            "level": "IndexLabel"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return Index without NA/NaN values.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "how": "AnyAll"
                        }
                    },
                    "dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Indicate duplicate index values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "",
                        "returns": "bool"
                    },
                    "equals": {
                        "type": "function",
                        "info": "Determine if two Index object are equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "Any"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the object as an enumerated type or categorical variable.",
                        "returns": "tuple[npt.NDArray[np.intp], Index]",
                        "parameters": {
                            "sort": "bool",
                            "use_na_sentinel": "bool"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values with the specified value.",
                        "returns": "None",
                        "parameters": {
                            "value": "None",
                            "downcast": "None"
                        }
                    },
                    "format": {
                        "type": "function",
                        "info": "Render a string representation of the Index.",
                        "returns": "list[str_t]",
                        "parameters": {
                            "name": "bool",
                            "formatter": "Callable | None",
                            "na_rep": "str_t"
                        }
                    },
                    "from_arrays": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "from_breaks": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "from_tuples": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "get_indexer": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "get_indexer_for": {
                        "type": "function",
                        "info": "Guaranteed return of an indexer even when non-unique.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_indexer_non_unique": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]",
                        "parameters": {
                            "target": "Index"
                        }
                    },
                    "get_level_values": {
                        "type": "function",
                        "info": "Return an Index of values for requested level.",
                        "returns": "pd.Index",
                        "parameters": {
                            "level": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "get_loc": {
                        "type": "function",
                        "info": "Get integer location, slice or boolean mask for requested label.",
                        "returns": "int | slice | np.ndarray",
                        "parameters": {
                            "key": "int | slice | numpy.ndarray"
                        }
                    },
                    "get_slice_bound": {
                        "type": "function",
                        "info": "Calculate slice bound that corresponds to given label.",
                        "returns": "int",
                        "parameters": {
                            "label": "<class 'int'>",
                            "side": "Literal['left', 'right']"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group the index labels by a given array of values.",
                        "returns": "PrettyDict[Hashable, np.ndarray]",
                        "parameters": {
                            "values": "."
                        }
                    },
                    "has_duplicates": {
                        "type": "property",
                        "info": "Check if the Index has duplicate values.",
                        "returns": "bool"
                    },
                    "hasnans": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "holds_integer": {
                        "type": "function",
                        "info": "Whether the type is an integer type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "identical": {
                        "type": "function",
                        "info": "Similar to equals, but checks that object attributes and types are also equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "If we have an object dtype, try to infer a non-object dtype.",
                        "returns": "pd.Index",
                        "parameters": {
                            "copy": "bool"
                        }
                    },
                    "inferred_type": {
                        "type": "property",
                        "info": "Return a string of the type inferred from the values",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "insert": {
                        "type": "function",
                        "info": "Make new Index inserting new item at location.",
                        "returns": "pd.Index",
                        "parameters": {
                            "loc": "int",
                            "item": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "intersection": {
                        "type": "function",
                        "info": "Form the intersection of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "bool"
                        }
                    },
                    "is_": {
                        "type": "function",
                        "info": "More flexible, faster check like ``is`` but that works through views.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "is_boolean": {
                        "type": "function",
                        "info": "Check if the Index only consists of booleans.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_categorical": {
                        "type": "function",
                        "info": "Check if the Index holds categorical data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_floating": {
                        "type": "function",
                        "info": "Check if the Index is a floating type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_integer": {
                        "type": "function",
                        "info": "Check if the Index only consists of integers.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_interval": {
                        "type": "function",
                        "info": "Check if the Index holds Interval objects.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_monotonic_decreasing": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_monotonic_increasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or increasing.",
                        "returns": "bool"
                    },
                    "is_numeric": {
                        "type": "function",
                        "info": "Check if the Index only consists of numeric data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_object": {
                        "type": "function",
                        "info": "Check if the Index is of the object dtype.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_overlapping": {
                        "type": "property",
                        "info": "Return True if the IntervalIndex has overlapping intervals, else False.",
                        "returns": "bool"
                    },
                    "is_unique": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "isin": {
                        "type": "function",
                        "info": "Return a boolean array where the index values are in `values`.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "values": ".",
                            "level": "."
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "item": {
                        "type": "function",
                        "info": "Return the first element of the underlying data as a Python scalar.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "join": {
                        "type": "function",
                        "info": "Compute join_index and indexers to conform data structures to the new index.",
                        "returns": "pd.Index| tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "other": "Index",
                            "how": "JoinHow",
                            "level": "Level | None",
                            "return_indexers": "bool",
                            "sort": "bool"
                        }
                    },
                    "left": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "length": {
                        "type": "property",
                        "info": "",
                        "returns": "pd.Index"
                    },
                    "map": {
                        "type": "function",
                        "info": "Map values using an input mapping or function.",
                        "returns": "None",
                        "parameters": {
                            "mapper": "None",
                            "na_action": "Literal['ignore'] | None"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "Return the maximum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Memory usage of the values.",
                        "returns": "int",
                        "parameters": {
                            "deep": "bool"
                        }
                    },
                    "mid": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "min": {
                        "type": "function",
                        "info": "Return the minimum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "name": {
                        "type": "property",
                        "info": "Return Index or MultiIndex name.",
                        "returns": "Hashable"
                    },
                    "names": {
                        "type": "property",
                        "info": "",
                        "returns": "FrozenList"
                    },
                    "nbytes": {
                        "type": "property",
                        "info": "Return the number of bytes in the underlying data.",
                        "returns": "int"
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Number of dimensions of the underlying data, by definition 1.",
                        "returns": "int"
                    },
                    "nlevels": {
                        "type": "property",
                        "info": "Number of levels.",
                        "returns": "int"
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Return number of unique elements in the object.",
                        "returns": "int",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "overlaps": {
                        "type": "function",
                        "info": "Check elementwise if an Interval overlaps the values in the IntervalArray.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "putmask": {
                        "type": "function",
                        "info": "Return a new Index of the values set with the mask.",
                        "returns": "pd.Index",
                        "parameters": {
                            "mask": "<class 'pandas.core.indexes.base.Index'>",
                            "value": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "ravel": {
                        "type": "function",
                        "info": "Return a view on self.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "order": "str_t"
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Create index with target's values.",
                        "returns": "tuple[Index, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "level": ".",
                            "limit": "int | None",
                            "tolerance": "float | None"
                        }
                    },
                    "repeat": {
                        "type": "function",
                        "info": "Repeat elements of a Index.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "repeats": "<class 'NoneType'>",
                            "axis": "None"
                        }
                    },
                    "right": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "round": {
                        "type": "function",
                        "info": "Round each value in the Index to the given number of decimals.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "decimals": "int"
                        }
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "npt.NDArray[np.intp] | np.intp",
                        "parameters": {
                            "value": "NumpyValueArrayLike | ExtensionArray",
                            "side": "Literal['left', 'right']",
                            "sorter": "NumpySorter | None"
                        }
                    },
                    "set_closed": {
                        "type": "function",
                        "info": "Return an identical IntervalArray closed on the specified side.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple of the shape of the underlying data.",
                        "returns": "Shape"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of time frequency increments.",
                        "returns": "None",
                        "parameters": {
                            "periods": "int",
                            "freq": "None"
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return the number of elements in the underlying data.",
                        "returns": "int"
                    },
                    "slice_indexer": {
                        "type": "function",
                        "info": "Compute the slice indexer for input labels and step.",
                        "returns": "slice",
                        "parameters": {
                            "start": "Hashable | None",
                            "end": "Hashable | None",
                            "step": "int | None"
                        }
                    },
                    "slice_locs": {
                        "type": "function",
                        "info": "Compute slice locations for input labels.",
                        "returns": "tuple[int, int]",
                        "parameters": {
                            "start": "tuple[int, int]",
                            "end": "tuple[int, int]",
                            "step": "tuple[int, int]"
                        }
                    },
                    "sort": {
                        "type": "function",
                        "info": "Use sort_values instead.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Return a sorted copy of the index.",
                        "returns": "pd.IntervalIndex | tuple[pd.IntervalIndex, np.ndarray]",
                        "parameters": {
                            "return_indexer": "bool",
                            "ascending": "bool",
                            "na_position": "NaPosition",
                            "key": "Callable | None"
                        }
                    },
                    "sortlevel": {
                        "type": "function",
                        "info": "For internal compatibility with the Index API.",
                        "returns": "None",
                        "parameters": {
                            "level": "None",
                            "ascending": "bool | list[bool]",
                            "sort_remaining": "None",
                            "na_position": "NaPosition"
                        }
                    },
                    "symmetric_difference": {
                        "type": "function",
                        "info": "Compute the symmetric difference of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "result_name": "None",
                            "sort": "None"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return a new Index of the values selected by the indices.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "indices": "<class 'NoneType'>",
                            "axis": "Axis",
                            "allow_fill": "bool",
                            "fill_value": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "to_flat_index": {
                        "type": "function",
                        "info": "Identity method.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {}
                    },
                    "to_frame": {
                        "type": "function",
                        "info": "Create a DataFrame with a column containing the Index.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "index": "bool",
                            "name": "Hashable"
                        }
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "A NumPy ndarray representing the values in this Series or Index.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object",
                            "kwargs": "."
                        }
                    },
                    "to_series": {
                        "type": "function",
                        "info": "Create a Series with both index and values equal to the index keys.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": ".",
                            "name": "Hashable | None"
                        }
                    },
                    "to_tuples": {
                        "type": "function",
                        "info": "Return an ndarray (if self is IntervalArray) or Index (if self is IntervalIndex) of tuples of the...",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "args": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "union": {
                        "type": "function",
                        "info": "Form the union of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return unique values in the index.",
                        "returns": "pd.IntervalIndex",
                        "parameters": {
                            "level": "Hashable | None"
                        }
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of unique values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "bins": ".",
                            "dropna": "bool"
                        }
                    },
                    "values": {
                        "type": "property",
                        "info": "Return an array representing the data in the Index.",
                        "returns": "ArrayLike"
                    },
                    "view": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "cls": "None"
                        }
                    },
                    "where": {
                        "type": "function",
                        "info": "Replace values where the condition is False.",
                        "returns": "pd.Index",
                        "parameters": {
                            "cond": "<class 'pandas.core.indexes.base.Index'>",
                            "other": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "MultiIndex": {
                "type": "class",
                "info": "A multi-level, or hierarchical, index object for pandas objects.",
                "returns": "pd.MultiIndex",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.MultiIndex"
                    },
                    "sortorder": {
                        "type": "attribute",
                        "info": "str(object='') -> str",
                        "returns": "int | None"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "Override numpy.ndarray's __getitem__ method to work as desired.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "append": {
                        "type": "function",
                        "info": "Append a collection of Index options together.",
                        "returns": "None",
                        "parameters": {
                            "other": "None"
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return int position of the largest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return int position of the smallest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Return the integer indices that would sort the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "args": ".",
                            "na_position": "str",
                            "kwargs": "."
                        }
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the label from the index, or, if not present, the previous one.",
                        "returns": "None",
                        "parameters": {
                            "label": "None"
                        }
                    },
                    "asof_locs": {
                        "type": "function",
                        "info": "Return the locations (indices) of labels in the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "where": "Index",
                            "mask": "npt.NDArray[np.bool_]"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Create an Index with values cast to dtypes.",
                        "returns": "None",
                        "parameters": {
                            "dtype": "None",
                            "copy": "bool"
                        }
                    },
                    "codes": {
                        "type": "property",
                        "info": "",
                        "returns": "FrozenList"
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "names": "<class 'NoneType'>",
                            "deep": "bool",
                            "name": "<class 'NoneType'>"
                        }
                    },
                    "delete": {
                        "type": "function",
                        "info": "Make new index with passed location deleted",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "loc": "<class 'pandas.core.indexes.multi.MultiIndex'>"
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "Computes the difference between consecutive values in the Index object.",
                        "returns": "pd.Index",
                        "parameters": {
                            "periods": "int"
                        }
                    },
                    "difference": {
                        "type": "function",
                        "info": "Return a new Index with elements of index not in `other`.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Make a new :class:`pandas.MultiIndex` with the passed list of codes deleted.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "codes": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "level": "Index | np.ndarray | Iterable[Hashable] | None",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return Index with duplicate values removed.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return index with requested level(s) removed.",
                        "returns": "None",
                        "parameters": {
                            "level": "IndexLabel"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return Index without NA/NaN values.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "how": "AnyAll"
                        }
                    },
                    "dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "dtypes": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Indicate duplicate index values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "",
                        "returns": "bool"
                    },
                    "equal_levels": {
                        "type": "function",
                        "info": "Return True if the levels of both MultiIndex objects are the same",
                        "returns": "bool",
                        "parameters": {
                            "other": "MultiIndex"
                        }
                    },
                    "equals": {
                        "type": "function",
                        "info": "Determines if two MultiIndex objects have the same labeling information",
                        "returns": "bool",
                        "parameters": {
                            "other": "object"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the object as an enumerated type or categorical variable.",
                        "returns": "tuple[npt.NDArray[np.intp], Index]",
                        "parameters": {
                            "sort": "bool",
                            "use_na_sentinel": "bool"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "fillna is not implemented for MultiIndex",
                        "returns": "None",
                        "parameters": {
                            "value": "None",
                            "downcast": "None"
                        }
                    },
                    "format": {
                        "type": "function",
                        "info": "Render a string representation of the Index.",
                        "returns": "pd.Series.list",
                        "parameters": {
                            "name": "bool | None",
                            "formatter": "Callable | None",
                            "na_rep": "str | None",
                            "names": "bool",
                            "space": "int",
                            "sparsify": "<class 'list'>",
                            "adjoin": "bool"
                        }
                    },
                    "from_arrays": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "from_frame": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "from_product": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "from_tuples": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "get_indexer": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "get_indexer_for": {
                        "type": "function",
                        "info": "Guaranteed return of an indexer even when non-unique.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_indexer_non_unique": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_level_values": {
                        "type": "function",
                        "info": "Return vector of label values for requested level.",
                        "returns": "pd.Index",
                        "parameters": {
                            "level": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "get_loc": {
                        "type": "function",
                        "info": "Get location for a label or a tuple of labels.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "get_loc_level": {
                        "type": "function",
                        "info": "Get location and sliced index for requested label(s)/level(s).",
                        "returns": "None",
                        "parameters": {
                            "key": "None",
                            "level": "IndexLabel",
                            "drop_level": "bool"
                        }
                    },
                    "get_locs": {
                        "type": "function",
                        "info": "Get location for a sequence of labels.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "seq": "."
                        }
                    },
                    "get_slice_bound": {
                        "type": "function",
                        "info": "For an ordered MultiIndex, compute slice bound",
                        "returns": "int",
                        "parameters": {
                            "label": "Hashable | Sequence[Hashable]",
                            "side": "Literal['left', 'right']"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group the index labels by a given array of values.",
                        "returns": "PrettyDict[Hashable, np.ndarray]",
                        "parameters": {
                            "values": "."
                        }
                    },
                    "has_duplicates": {
                        "type": "property",
                        "info": "Check if the Index has duplicate values.",
                        "returns": "bool"
                    },
                    "hasnans": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "holds_integer": {
                        "type": "function",
                        "info": "Whether the type is an integer type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "identical": {
                        "type": "function",
                        "info": "Similar to equals, but checks that object attributes and types are also equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "If we have an object dtype, try to infer a non-object dtype.",
                        "returns": "pd.Index",
                        "parameters": {
                            "copy": "bool"
                        }
                    },
                    "inferred_type": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "insert": {
                        "type": "function",
                        "info": "Make new MultiIndex inserting new item at location",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "loc": "int",
                            "item": "<class 'pandas.core.indexes.multi.MultiIndex'>"
                        }
                    },
                    "intersection": {
                        "type": "function",
                        "info": "Form the intersection of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "bool"
                        }
                    },
                    "is_": {
                        "type": "function",
                        "info": "More flexible, faster check like ``is`` but that works through views.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "is_boolean": {
                        "type": "function",
                        "info": "Check if the Index only consists of booleans.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_categorical": {
                        "type": "function",
                        "info": "Check if the Index holds categorical data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_floating": {
                        "type": "function",
                        "info": "Check if the Index is a floating type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_integer": {
                        "type": "function",
                        "info": "Check if the Index only consists of integers.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_interval": {
                        "type": "function",
                        "info": "Check if the Index holds Interval objects.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_monotonic_decreasing": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_monotonic_increasing": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_numeric": {
                        "type": "function",
                        "info": "Check if the Index only consists of numeric data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_object": {
                        "type": "function",
                        "info": "Check if the Index is of the object dtype.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_unique": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "isin": {
                        "type": "function",
                        "info": "Return a boolean array where the index values are in `values`.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "values": ".",
                            "level": "."
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "item": {
                        "type": "function",
                        "info": "Return the first element of the underlying data as a Python scalar.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "join": {
                        "type": "function",
                        "info": "Compute join_index and indexers to conform data structures to the new index.",
                        "returns": "pd.Index| tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "other": "Index",
                            "how": "JoinHow",
                            "level": "Level | None",
                            "return_indexers": "bool",
                            "sort": "bool"
                        }
                    },
                    "levels": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "levshape": {
                        "type": "property",
                        "info": "A tuple with the length of each level.",
                        "returns": "Shape"
                    },
                    "map": {
                        "type": "function",
                        "info": "Map values using an input mapping or function.",
                        "returns": "None",
                        "parameters": {
                            "mapper": "None",
                            "na_action": "Literal['ignore'] | None"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "Return the maximum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Memory usage of the values.",
                        "returns": "int",
                        "parameters": {
                            "deep": "bool"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "Return the minimum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "name": {
                        "type": "property",
                        "info": "Return Index or MultiIndex name.",
                        "returns": "Hashable"
                    },
                    "names": {
                        "type": "property",
                        "info": "Names of levels in MultiIndex.",
                        "returns": "FrozenList"
                    },
                    "nbytes": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Number of dimensions of the underlying data, by definition 1.",
                        "returns": "int"
                    },
                    "nlevels": {
                        "type": "property",
                        "info": "Integer number of levels in this MultiIndex.",
                        "returns": "int"
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Return number of unique elements in the object.",
                        "returns": "int",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "putmask": {
                        "type": "function",
                        "info": "Return a new MultiIndex of the values set with the mask.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "mask": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "value": "MultiIndex"
                        }
                    },
                    "ravel": {
                        "type": "function",
                        "info": "Return a view on self.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "order": "str_t"
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Create index with target's values.",
                        "returns": "tuple[Index, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "level": ".",
                            "limit": "int | None",
                            "tolerance": "float | None"
                        }
                    },
                    "remove_unused_levels": {
                        "type": "function",
                        "info": "Create new MultiIndex from current that removes unused levels.",
                        "returns": "pd.MultiIndex",
                        "parameters": {}
                    },
                    "reorder_levels": {
                        "type": "function",
                        "info": "Rearrange levels using input order. May not drop or duplicate levels.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "order": "<class 'pandas.core.indexes.multi.MultiIndex'>"
                        }
                    },
                    "repeat": {
                        "type": "function",
                        "info": "Repeat elements of a MultiIndex.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "repeats": "int",
                            "axis": "<class 'pandas.core.indexes.multi.MultiIndex'>"
                        }
                    },
                    "round": {
                        "type": "function",
                        "info": "Round each value in the Index to the given number of decimals.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "decimals": "int"
                        }
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "npt.NDArray[np.intp] | np.intp",
                        "parameters": {
                            "value": "NumpyValueArrayLike | ExtensionArray",
                            "side": "Literal['left', 'right']",
                            "sorter": "NumpySorter | None"
                        }
                    },
                    "set_codes": {
                        "type": "function",
                        "info": "Set new codes on MultiIndex. Defaults to returning new index.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "codes": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "level": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "verify_integrity": "bool"
                        }
                    },
                    "set_levels": {
                        "type": "function",
                        "info": "Set new levels on MultiIndex. Defaults to returning new index.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "levels": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "level": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "verify_integrity": "bool"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple of the shape of the underlying data.",
                        "returns": "Shape"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of time frequency increments.",
                        "returns": "None",
                        "parameters": {
                            "periods": "int",
                            "freq": "None"
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return the number of elements in the underlying data.",
                        "returns": "int"
                    },
                    "slice_indexer": {
                        "type": "function",
                        "info": "Compute the slice indexer for input labels and step.",
                        "returns": "slice",
                        "parameters": {
                            "start": "Hashable | None",
                            "end": "Hashable | None",
                            "step": "int | None"
                        }
                    },
                    "slice_locs": {
                        "type": "function",
                        "info": "For an ordered MultiIndex, compute the slice locations for input",
                        "returns": "tuple[int, int]",
                        "parameters": {
                            "start": "tuple[int, int]",
                            "end": "tuple[int, int]",
                            "step": "tuple[int, int]"
                        }
                    },
                    "sort": {
                        "type": "function",
                        "info": "Use sort_values instead.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Return a sorted copy of the index.",
                        "returns": "pd.MultiIndex | tuple[pd.MultiIndex, np.ndarray]",
                        "parameters": {
                            "return_indexer": "bool",
                            "ascending": "bool",
                            "na_position": "NaPosition",
                            "key": "Callable | None"
                        }
                    },
                    "sortlevel": {
                        "type": "function",
                        "info": "Sort MultiIndex at the requested level.",
                        "returns": "tuple[MultiIndex, npt.NDArray[np.intp]]",
                        "parameters": {
                            "level": "IndexLabel",
                            "ascending": "bool | list[bool]",
                            "sort_remaining": "bool",
                            "na_position": "str"
                        }
                    },
                    "swaplevel": {
                        "type": "function",
                        "info": "Swap level i with level j.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "i": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "j": "<class 'pandas.core.indexes.multi.MultiIndex'>"
                        }
                    },
                    "symmetric_difference": {
                        "type": "function",
                        "info": "Compute the symmetric difference of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "result_name": "None",
                            "sort": "None"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return a new MultiIndex of the values selected by the indices.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "indices": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "axis": "Axis",
                            "allow_fill": "bool",
                            "fill_value": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "kwargs": "<class 'pandas.core.indexes.multi.MultiIndex'>"
                        }
                    },
                    "to_flat_index": {
                        "type": "function",
                        "info": "Convert a MultiIndex to an Index of Tuples containing the level values.",
                        "returns": "pd.Index",
                        "parameters": {}
                    },
                    "to_frame": {
                        "type": "function",
                        "info": "Create a DataFrame with the levels of the MultiIndex as columns.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "index": "bool",
                            "name": ".",
                            "allow_duplicates": "bool"
                        }
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "A NumPy ndarray representing the values in this Series or Index.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object",
                            "kwargs": "."
                        }
                    },
                    "to_series": {
                        "type": "function",
                        "info": "Create a Series with both index and values equal to the index keys.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": ".",
                            "name": "Hashable | None"
                        }
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "args": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "truncate": {
                        "type": "function",
                        "info": "Slice index between two labels / tuples, return new MultiIndex.",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "before": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                            "after": "<class 'pandas.core.indexes.multi.MultiIndex'>"
                        }
                    },
                    "union": {
                        "type": "function",
                        "info": "Form the union of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return unique values in the index.",
                        "returns": "None",
                        "parameters": {
                            "level": "None"
                        }
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of unique values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "bins": ".",
                            "dropna": "bool"
                        }
                    },
                    "values": {
                        "type": "property",
                        "info": "Return an array representing the data in the Index.",
                        "returns": "np.ndarray"
                    },
                    "view": {
                        "type": "function",
                        "info": "this is defined as a copy with the same identity",
                        "returns": "pd.MultiIndex",
                        "parameters": {
                            "cls": "<class 'NoneType'>"
                        }
                    },
                    "where": {
                        "type": "function",
                        "info": "Replace values where the condition is False.",
                        "returns": "pd.Index",
                        "parameters": {
                            "cond": "<class 'pandas.core.indexes.base.Index'>",
                            "other": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "NA": {
                "type": "object",
                "info": "NA (\"not available\") missing value indicator.",
                "returns": "pandas._libs.missing.NAType"
            },
            "NaT": {
                "type": "object",
                "info": "(N)ot-(A)-(T)ime, the time equivalent of NaN.",
                "returns": "pandas._libs.tslibs.nattype.NaTType"
            },
            "NamedAgg": {
                "type": "class",
                "info": "Helper for column specific aggregation with control over output column names.",
                "returns": "pd.NamedAgg",
                "items": {
                    "column": {
                        "type": "object",
                        "info": "",
                        "returns": "collections._tuplegetter"
                    },
                    "aggfunc": {
                        "type": "object",
                        "info": "",
                        "returns": "collections._tuplegetter"
                    },
                    "__getitem__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    },
                    "count": {
                        "type": "object",
                        "info": "",
                        "returns": "method_descriptor"
                    },
                    "index": {
                        "type": "object",
                        "info": "",
                        "returns": "method_descriptor"
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Period": {
                "type": "class",
                "info": "Represents a period of time.",
                "returns": "pd.Period",
                "items": {
                    "asfreq": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "day": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "day_of_week": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "day_of_year": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "dayofweek": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "dayofyear": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "days_in_month": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "daysinmonth": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "end_time": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "freq": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "freqstr": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "hour": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "is_leap_year": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "minute": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "month": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "now": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "ordinal": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "quarter": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "qyear": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "second": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "start_time": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "strftime": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "to_timestamp": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "week": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "weekday": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "weekofyear": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "year": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "PeriodDtype": {
                "type": "class",
                "info": "An ExtensionDtype for Period data.",
                "returns": "pd.PeriodDtype",
                "items": {
                    "kind": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "base": {
                        "type": "object",
                        "info": "DType class corresponding to the scalar type and dtype of the same name.",
                        "returns": "numpy.dtypes.ObjectDType"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "freq": {
                        "type": "property",
                        "info": "The frequency object of this PeriodDtype.",
                        "returns": "BaseOffset"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "isbuiltin": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "isnative": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "NaTType"
                    },
                    "name": {
                        "type": "property",
                        "info": "A string identifying the data type.",
                        "returns": "str_type"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "num": {
                        "type": "object",
                        "info": "int([x]) -> integer",
                        "returns": "int"
                    },
                    "reset_cache": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "shape": {
                        "type": "object",
                        "info": "Built-in immutable sequence.",
                        "returns": "tuple"
                    },
                    "str": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "PeriodIndex": {
                "type": "class",
                "info": "Immutable ndarray holding ordinal values indicating regular periods in time.",
                "returns": "pd.PeriodIndex",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.PeriodIndex"
                    },
                    "freq": {
                        "type": "property",
                        "info": "",
                        "returns": "BaseOffset | None"
                    },
                    "dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "Override numpy.ndarray's __getitem__ method to work as desired.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "append": {
                        "type": "function",
                        "info": "Append a collection of Index options together.",
                        "returns": "pd.Index",
                        "parameters": {
                            "other": "Index | Sequence[Index]"
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return int position of the largest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return int position of the smallest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Return the integer indices that would sort the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "array": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "asfreq": {
                        "type": "function",
                        "info": "Convert the PeriodArray to the specified frequency `freq`.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "freq": ".",
                            "how": "str"
                        }
                    },
                    "asi8": {
                        "type": "property",
                        "info": "",
                        "returns": "npt.NDArray[np.int64]"
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the label from the index, or, if not present, the previous one.",
                        "returns": "None",
                        "parameters": {
                            "label": "None"
                        }
                    },
                    "asof_locs": {
                        "type": "function",
                        "info": "where : array of timestamps",
                        "returns": "np.ndarray",
                        "parameters": {
                            "where": "Index",
                            "mask": "npt.NDArray[np.bool_]"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Create an Index with values cast to dtypes.",
                        "returns": "None",
                        "parameters": {
                            "dtype": "None",
                            "copy": "bool"
                        }
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "name": "Hashable | None",
                            "deep": "bool"
                        }
                    },
                    "delete": {
                        "type": "function",
                        "info": "Make new Index with passed location(-s) deleted.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "loc": "<class 'NoneType'>"
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "Computes the difference between consecutive values in the Index object.",
                        "returns": "pd.Index",
                        "parameters": {
                            "periods": "int"
                        }
                    },
                    "difference": {
                        "type": "function",
                        "info": "Return a new Index with elements of index not in `other`.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Make new Index with passed list of labels deleted.",
                        "returns": "pd.Index",
                        "parameters": {
                            "labels": "Index | np.ndarray | Iterable[Hashable]",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return Index with duplicate values removed.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return index with requested level(s) removed.",
                        "returns": "None",
                        "parameters": {
                            "level": "IndexLabel"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return Index without NA/NaN values.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "how": "AnyAll"
                        }
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Indicate duplicate index values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "",
                        "returns": "bool"
                    },
                    "equals": {
                        "type": "function",
                        "info": "Determines if two Index objects contain the same elements.",
                        "returns": "bool",
                        "parameters": {
                            "other": "Any"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the object as an enumerated type or categorical variable.",
                        "returns": "tuple[npt.NDArray[np.intp], Index]",
                        "parameters": {
                            "sort": "bool",
                            "use_na_sentinel": "bool"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values with the specified value.",
                        "returns": "None",
                        "parameters": {
                            "value": "None",
                            "downcast": "None"
                        }
                    },
                    "format": {
                        "type": "function",
                        "info": "Render a string representation of the Index.",
                        "returns": "list[str]",
                        "parameters": {
                            "name": "bool",
                            "formatter": "Callable | None",
                            "na_rep": "str",
                            "date_format": "str | None"
                        }
                    },
                    "freqstr": {
                        "type": "property",
                        "info": "Return the frequency object as a string if it's set, otherwise None.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "from_fields": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "from_ordinals": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "get_indexer": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "get_indexer_for": {
                        "type": "function",
                        "info": "Guaranteed return of an indexer even when non-unique.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_indexer_non_unique": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_level_values": {
                        "type": "function",
                        "info": "Return an Index of values for requested level.",
                        "returns": "pd.Index",
                        "parameters": {
                            "level": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "get_loc": {
                        "type": "function",
                        "info": "Get integer location for requested label.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "get_slice_bound": {
                        "type": "function",
                        "info": "Calculate slice bound that corresponds to given label.",
                        "returns": "int",
                        "parameters": {
                            "label": "<class 'int'>",
                            "side": "Literal['left', 'right']"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group the index labels by a given array of values.",
                        "returns": "PrettyDict[Hashable, np.ndarray]",
                        "parameters": {
                            "values": "."
                        }
                    },
                    "has_duplicates": {
                        "type": "property",
                        "info": "Check if the Index has duplicate values.",
                        "returns": "bool"
                    },
                    "hasnans": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "holds_integer": {
                        "type": "function",
                        "info": "Whether the type is an integer type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "identical": {
                        "type": "function",
                        "info": "Similar to equals, but checks that object attributes and types are also equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "If we have an object dtype, try to infer a non-object dtype.",
                        "returns": "pd.Index",
                        "parameters": {
                            "copy": "bool"
                        }
                    },
                    "inferred_type": {
                        "type": "property",
                        "info": "Return a string of the type inferred from the values.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "insert": {
                        "type": "function",
                        "info": "Make new Index inserting new item at location.",
                        "returns": "pd.Index",
                        "parameters": {
                            "loc": "int",
                            "item": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "intersection": {
                        "type": "function",
                        "info": "Form the intersection of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "bool"
                        }
                    },
                    "is_": {
                        "type": "function",
                        "info": "More flexible, faster check like ``is`` but that works through views.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "is_boolean": {
                        "type": "function",
                        "info": "Check if the Index only consists of booleans.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_categorical": {
                        "type": "function",
                        "info": "Check if the Index holds categorical data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_floating": {
                        "type": "function",
                        "info": "Check if the Index is a floating type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_full": {
                        "type": "property",
                        "info": "Returns True if this PeriodIndex is range-like in that all Periods",
                        "returns": "bool"
                    },
                    "is_integer": {
                        "type": "function",
                        "info": "Check if the Index only consists of integers.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_interval": {
                        "type": "function",
                        "info": "Check if the Index holds Interval objects.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_monotonic_decreasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or decreasing.",
                        "returns": "bool"
                    },
                    "is_monotonic_increasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or increasing.",
                        "returns": "bool"
                    },
                    "is_numeric": {
                        "type": "function",
                        "info": "Check if the Index only consists of numeric data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_object": {
                        "type": "function",
                        "info": "Check if the Index is of the object dtype.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_unique": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "isin": {
                        "type": "function",
                        "info": "Return a boolean array where the index values are in `values`.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "values": ".",
                            "level": "."
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "item": {
                        "type": "function",
                        "info": "Return the first element of the underlying data as a Python scalar.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "join": {
                        "type": "function",
                        "info": "Compute join_index and indexers to conform data structures to the new index.",
                        "returns": "pd.Index| tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "other": "Index",
                            "how": "JoinHow",
                            "level": "Level | None",
                            "return_indexers": "bool",
                            "sort": "bool"
                        }
                    },
                    "map": {
                        "type": "function",
                        "info": "Map values using an input mapping or function.",
                        "returns": "None",
                        "parameters": {
                            "mapper": "None",
                            "na_action": "Literal['ignore'] | None"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "Return the maximum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "mean": {
                        "type": "function",
                        "info": "Return the mean value of the Array.",
                        "returns": "None",
                        "parameters": {
                            "skipna": "bool",
                            "axis": "int | None"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Memory usage of the values.",
                        "returns": "int",
                        "parameters": {
                            "deep": "bool"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "Return the minimum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "name": {
                        "type": "property",
                        "info": "Return Index or MultiIndex name.",
                        "returns": "Hashable"
                    },
                    "names": {
                        "type": "property",
                        "info": "",
                        "returns": "FrozenList"
                    },
                    "nbytes": {
                        "type": "property",
                        "info": "Return the number of bytes in the underlying data.",
                        "returns": "int"
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Number of dimensions of the underlying data, by definition 1.",
                        "returns": "int"
                    },
                    "nlevels": {
                        "type": "property",
                        "info": "Number of levels.",
                        "returns": "int"
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Return number of unique elements in the object.",
                        "returns": "int",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "putmask": {
                        "type": "function",
                        "info": "Return a new Index of the values set with the mask.",
                        "returns": "pd.Index",
                        "parameters": {
                            "mask": "<class 'pandas.core.indexes.base.Index'>",
                            "value": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "ravel": {
                        "type": "function",
                        "info": "Return a view on self.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "order": "str_t"
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Create index with target's values.",
                        "returns": "tuple[Index, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "level": ".",
                            "limit": "int | None",
                            "tolerance": "float | None"
                        }
                    },
                    "repeat": {
                        "type": "function",
                        "info": "Repeat elements of a Index.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "repeats": "<class 'NoneType'>",
                            "axis": "None"
                        }
                    },
                    "resolution": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "round": {
                        "type": "function",
                        "info": "Round each value in the Index to the given number of decimals.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "decimals": "int"
                        }
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "npt.NDArray[np.intp] | np.intp",
                        "parameters": {
                            "value": "NumpyValueArrayLike | ExtensionArray",
                            "side": "Literal['left', 'right']",
                            "sorter": "NumpySorter | None"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple of the shape of the underlying data.",
                        "returns": "Shape"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of time frequency increments.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "periods": "int",
                            "freq": "."
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return the number of elements in the underlying data.",
                        "returns": "int"
                    },
                    "slice_indexer": {
                        "type": "function",
                        "info": "Compute the slice indexer for input labels and step.",
                        "returns": "slice",
                        "parameters": {
                            "start": "Hashable | None",
                            "end": "Hashable | None",
                            "step": "int | None"
                        }
                    },
                    "slice_locs": {
                        "type": "function",
                        "info": "Compute slice locations for input labels.",
                        "returns": "tuple[int, int]",
                        "parameters": {
                            "start": "tuple[int, int]",
                            "end": "tuple[int, int]",
                            "step": "tuple[int, int]"
                        }
                    },
                    "sort": {
                        "type": "function",
                        "info": "Use sort_values instead.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Return a sorted copy of the index.",
                        "returns": "pd.PeriodIndex | tuple[pd.PeriodIndex, np.ndarray]",
                        "parameters": {
                            "return_indexer": "bool",
                            "ascending": "bool",
                            "na_position": "NaPosition",
                            "key": "Callable | None"
                        }
                    },
                    "sortlevel": {
                        "type": "function",
                        "info": "For internal compatibility with the Index API.",
                        "returns": "None",
                        "parameters": {
                            "level": "None",
                            "ascending": "bool | list[bool]",
                            "sort_remaining": "None",
                            "na_position": "NaPosition"
                        }
                    },
                    "strftime": {
                        "type": "function",
                        "info": "Convert to Index using specified date_format.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "symmetric_difference": {
                        "type": "function",
                        "info": "Compute the symmetric difference of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "result_name": "None",
                            "sort": "None"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return a new Index of the values selected by the indices.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "indices": "<class 'NoneType'>",
                            "axis": "Axis",
                            "allow_fill": "bool",
                            "fill_value": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "to_flat_index": {
                        "type": "function",
                        "info": "Identity method.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {}
                    },
                    "to_frame": {
                        "type": "function",
                        "info": "Create a DataFrame with a column containing the Index.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "index": "bool",
                            "name": "Hashable"
                        }
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "A NumPy ndarray representing the values in this Series or Index.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object",
                            "kwargs": "."
                        }
                    },
                    "to_series": {
                        "type": "function",
                        "info": "Create a Series with both index and values equal to the index keys.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": ".",
                            "name": "Hashable | None"
                        }
                    },
                    "to_timestamp": {
                        "type": "function",
                        "info": "Cast to DatetimeArray/Index.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "freq": "<class 'pandas.core.indexes.datetimes.DatetimeIndex'>",
                            "how": "str"
                        }
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "args": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "union": {
                        "type": "function",
                        "info": "Form the union of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return unique values in the index.",
                        "returns": "pd.PeriodIndex",
                        "parameters": {
                            "level": "Hashable | None"
                        }
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of unique values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "bins": ".",
                            "dropna": "bool"
                        }
                    },
                    "values": {
                        "type": "property",
                        "info": "Return an array representing the data in the Index.",
                        "returns": "npt.NDArray[np.object_]"
                    },
                    "view": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "cls": "None"
                        }
                    },
                    "where": {
                        "type": "function",
                        "info": "Replace values where the condition is False.",
                        "returns": "pd.Index",
                        "parameters": {
                            "cond": "<class 'pandas.core.indexes.base.Index'>",
                            "other": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "RangeIndex": {
                "type": "class",
                "info": "Immutable Index implementing a monotonic integer range.",
                "returns": "pd.RangeIndex",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.RangeIndex"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "Conserve RangeIndex type for scalar and slice keys.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are Truthy.",
                        "returns": "bool",
                        "parameters": {
                            "args": "<class 'bool'>",
                            "kwargs": "<class 'bool'>"
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is Truthy.",
                        "returns": "bool",
                        "parameters": {
                            "args": "<class 'bool'>",
                            "kwargs": "<class 'bool'>"
                        }
                    },
                    "append": {
                        "type": "function",
                        "info": "Append a collection of Index options together.",
                        "returns": "pd.Index",
                        "parameters": {
                            "other": "Index | Sequence[Index]"
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return int position of the largest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return int position of the smallest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Returns the indices that would sort the index and its",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "array": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the label from the index, or, if not present, the previous one.",
                        "returns": "None",
                        "parameters": {
                            "label": "None"
                        }
                    },
                    "asof_locs": {
                        "type": "function",
                        "info": "Return the locations (indices) of labels in the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "where": "Index",
                            "mask": "npt.NDArray[np.bool_]"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Create an Index with values cast to dtypes.",
                        "returns": "None",
                        "parameters": {
                            "dtype": "None",
                            "copy": "bool"
                        }
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object.",
                        "returns": "pd.RangeIndex",
                        "parameters": {
                            "name": "Hashable | None",
                            "deep": "bool"
                        }
                    },
                    "delete": {
                        "type": "function",
                        "info": "Make new Index with passed location(-s) deleted.",
                        "returns": "pd.Index",
                        "parameters": {
                            "loc": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "Computes the difference between consecutive values in the Index object.",
                        "returns": "pd.Index",
                        "parameters": {
                            "periods": "int"
                        }
                    },
                    "difference": {
                        "type": "function",
                        "info": "Return a new Index with elements of index not in `other`.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Make new Index with passed list of labels deleted.",
                        "returns": "pd.Index",
                        "parameters": {
                            "labels": "Index | np.ndarray | Iterable[Hashable]",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return Index with duplicate values removed.",
                        "returns": "pd.RangeIndex",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return index with requested level(s) removed.",
                        "returns": "None",
                        "parameters": {
                            "level": "IndexLabel"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return Index without NA/NaN values.",
                        "returns": "pd.RangeIndex",
                        "parameters": {
                            "how": "AnyAll"
                        }
                    },
                    "dtype": {
                        "type": "property",
                        "info": "Return the dtype object of the underlying data.",
                        "returns": "np.dtype"
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Indicate duplicate index values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "",
                        "returns": "bool"
                    },
                    "equals": {
                        "type": "function",
                        "info": "Determines if two Index objects contain the same elements.",
                        "returns": "bool",
                        "parameters": {
                            "other": "object"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the object as an enumerated type or categorical variable.",
                        "returns": "tuple[npt.NDArray[np.intp], RangeIndex]",
                        "parameters": {
                            "sort": "bool",
                            "use_na_sentinel": "bool"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values with the specified value.",
                        "returns": "None",
                        "parameters": {
                            "value": "None",
                            "downcast": "None"
                        }
                    },
                    "format": {
                        "type": "function",
                        "info": "Render a string representation of the Index.",
                        "returns": "list[str_t]",
                        "parameters": {
                            "name": "bool",
                            "formatter": "Callable | None",
                            "na_rep": "str_t"
                        }
                    },
                    "from_range": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "get_indexer": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "get_indexer_for": {
                        "type": "function",
                        "info": "Guaranteed return of an indexer even when non-unique.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_indexer_non_unique": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_level_values": {
                        "type": "function",
                        "info": "Return an Index of values for requested level.",
                        "returns": "pd.Index",
                        "parameters": {
                            "level": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "get_loc": {
                        "type": "function",
                        "info": "Get integer location, slice or boolean mask for requested label.",
                        "returns": "int",
                        "parameters": {
                            "key": "<class 'int'>"
                        }
                    },
                    "get_slice_bound": {
                        "type": "function",
                        "info": "Calculate slice bound that corresponds to given label.",
                        "returns": "int",
                        "parameters": {
                            "label": "<class 'int'>",
                            "side": "Literal['left', 'right']"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group the index labels by a given array of values.",
                        "returns": "PrettyDict[Hashable, np.ndarray]",
                        "parameters": {
                            "values": "."
                        }
                    },
                    "has_duplicates": {
                        "type": "property",
                        "info": "Check if the Index has duplicate values.",
                        "returns": "bool"
                    },
                    "hasnans": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "holds_integer": {
                        "type": "function",
                        "info": "Whether the type is an integer type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "identical": {
                        "type": "function",
                        "info": "Similar to equals, but checks that object attributes and types are also equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "If we have an object dtype, try to infer a non-object dtype.",
                        "returns": "pd.Index",
                        "parameters": {
                            "copy": "bool"
                        }
                    },
                    "inferred_type": {
                        "type": "property",
                        "info": "Return a string of the type inferred from the values.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "insert": {
                        "type": "function",
                        "info": "Make new Index inserting new item at location.",
                        "returns": "pd.Index",
                        "parameters": {
                            "loc": "int",
                            "item": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "intersection": {
                        "type": "function",
                        "info": "Form the intersection of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "bool"
                        }
                    },
                    "is_": {
                        "type": "function",
                        "info": "More flexible, faster check like ``is`` but that works through views.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "is_boolean": {
                        "type": "function",
                        "info": "Check if the Index only consists of booleans.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_categorical": {
                        "type": "function",
                        "info": "Check if the Index holds categorical data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_floating": {
                        "type": "function",
                        "info": "Check if the Index is a floating type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_integer": {
                        "type": "function",
                        "info": "Check if the Index only consists of integers.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_interval": {
                        "type": "function",
                        "info": "Check if the Index holds Interval objects.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_monotonic_decreasing": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_monotonic_increasing": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_numeric": {
                        "type": "function",
                        "info": "Check if the Index only consists of numeric data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_object": {
                        "type": "function",
                        "info": "Check if the Index is of the object dtype.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_unique": {
                        "type": "property",
                        "info": "return if the index has unique values",
                        "returns": "bool"
                    },
                    "isin": {
                        "type": "function",
                        "info": "Return a boolean array where the index values are in `values`.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "values": ".",
                            "level": "."
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "item": {
                        "type": "function",
                        "info": "Return the first element of the underlying data as a Python scalar.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "join": {
                        "type": "function",
                        "info": "Compute join_index and indexers to conform data structures to the new index.",
                        "returns": "pd.Index| tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "other": "Index",
                            "how": "JoinHow",
                            "level": "Level | None",
                            "return_indexers": "bool",
                            "sort": "bool"
                        }
                    },
                    "map": {
                        "type": "function",
                        "info": "Map values using an input mapping or function.",
                        "returns": "None",
                        "parameters": {
                            "mapper": "None",
                            "na_action": "Literal['ignore'] | None"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "The maximum value of the RangeIndex",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Memory usage of my values",
                        "returns": "int",
                        "parameters": {
                            "deep": "bool"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "The minimum value of the RangeIndex",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "name": {
                        "type": "property",
                        "info": "Return Index or MultiIndex name.",
                        "returns": "Hashable"
                    },
                    "names": {
                        "type": "property",
                        "info": "",
                        "returns": "FrozenList"
                    },
                    "nbytes": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Number of dimensions of the underlying data, by definition 1.",
                        "returns": "int"
                    },
                    "nlevels": {
                        "type": "property",
                        "info": "Number of levels.",
                        "returns": "int"
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Return number of unique elements in the object.",
                        "returns": "int",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "putmask": {
                        "type": "function",
                        "info": "Return a new Index of the values set with the mask.",
                        "returns": "pd.Index",
                        "parameters": {
                            "mask": "<class 'pandas.core.indexes.base.Index'>",
                            "value": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "ravel": {
                        "type": "function",
                        "info": "Return a view on self.",
                        "returns": "pd.RangeIndex",
                        "parameters": {
                            "order": "str_t"
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Create index with target's values.",
                        "returns": "tuple[Index, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "level": ".",
                            "limit": "int | None",
                            "tolerance": "float | None"
                        }
                    },
                    "repeat": {
                        "type": "function",
                        "info": "Repeat elements of a Index.",
                        "returns": "pd.RangeIndex",
                        "parameters": {
                            "repeats": "<class 'NoneType'>",
                            "axis": "None"
                        }
                    },
                    "round": {
                        "type": "function",
                        "info": "Round each value in the Index to the given number of decimals.",
                        "returns": "pd.RangeIndex",
                        "parameters": {
                            "decimals": "int"
                        }
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "npt.NDArray[np.intp] | np.intp",
                        "parameters": {
                            "value": "NumpyValueArrayLike | ExtensionArray",
                            "side": "Literal['left', 'right']",
                            "sorter": "NumpySorter | None"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple of the shape of the underlying data.",
                        "returns": "Shape"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of time frequency increments.",
                        "returns": "None",
                        "parameters": {
                            "periods": "int",
                            "freq": "None"
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return the number of elements in the underlying data.",
                        "returns": "int"
                    },
                    "slice_indexer": {
                        "type": "function",
                        "info": "Compute the slice indexer for input labels and step.",
                        "returns": "slice",
                        "parameters": {
                            "start": "Hashable | None",
                            "end": "Hashable | None",
                            "step": "int | None"
                        }
                    },
                    "slice_locs": {
                        "type": "function",
                        "info": "Compute slice locations for input labels.",
                        "returns": "tuple[int, int]",
                        "parameters": {
                            "start": "tuple[int, int]",
                            "end": "tuple[int, int]",
                            "step": "tuple[int, int]"
                        }
                    },
                    "sort": {
                        "type": "function",
                        "info": "Use sort_values instead.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Return a sorted copy of the index.",
                        "returns": "pd.RangeIndex | tuple[pd.RangeIndex, np.ndarray | RangeIndex]",
                        "parameters": {
                            "return_indexer": "bool",
                            "ascending": "bool",
                            "na_position": "NaPosition",
                            "key": "Callable | None"
                        }
                    },
                    "sortlevel": {
                        "type": "function",
                        "info": "For internal compatibility with the Index API.",
                        "returns": "None",
                        "parameters": {
                            "level": "None",
                            "ascending": "bool | list[bool]",
                            "sort_remaining": "None",
                            "na_position": "NaPosition"
                        }
                    },
                    "start": {
                        "type": "property",
                        "info": "The value of the `start` parameter (``0`` if this was not supplied).",
                        "returns": "int"
                    },
                    "step": {
                        "type": "property",
                        "info": "The value of the `step` parameter (``1`` if this was not supplied).",
                        "returns": "int"
                    },
                    "stop": {
                        "type": "property",
                        "info": "The value of the `stop` parameter.",
                        "returns": "int"
                    },
                    "symmetric_difference": {
                        "type": "function",
                        "info": "Compute the symmetric difference of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "result_name": "Hashable | None",
                            "sort": "None"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return a new Index of the values selected by the indices.",
                        "returns": "pd.Index",
                        "parameters": {
                            "indices": ".",
                            "axis": "Axis",
                            "allow_fill": "bool",
                            "fill_value": ".",
                            "kwargs": "."
                        }
                    },
                    "to_flat_index": {
                        "type": "function",
                        "info": "Identity method.",
                        "returns": "pd.RangeIndex",
                        "parameters": {}
                    },
                    "to_frame": {
                        "type": "function",
                        "info": "Create a DataFrame with a column containing the Index.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "index": "bool",
                            "name": "Hashable"
                        }
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "A NumPy ndarray representing the values in this Series or Index.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object",
                            "kwargs": "."
                        }
                    },
                    "to_series": {
                        "type": "function",
                        "info": "Create a Series with both index and values equal to the index keys.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": ".",
                            "name": "Hashable | None"
                        }
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "list[int]",
                        "parameters": {}
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.RangeIndex",
                        "parameters": {
                            "args": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "union": {
                        "type": "function",
                        "info": "Form the union of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return unique values in the index.",
                        "returns": "pd.RangeIndex",
                        "parameters": {
                            "level": "Hashable | None"
                        }
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of unique values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "bins": ".",
                            "dropna": "bool"
                        }
                    },
                    "values": {
                        "type": "property",
                        "info": "Return an array representing the data in the Index.",
                        "returns": "ArrayLike"
                    },
                    "view": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "cls": "None"
                        }
                    },
                    "where": {
                        "type": "function",
                        "info": "Replace values where the condition is False.",
                        "returns": "pd.Index",
                        "parameters": {
                            "cond": "<class 'pandas.core.indexes.base.Index'>",
                            "other": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Series": {
                "type": "class",
                "info": "One-dimensional ndarray with axis labels (including time series).",
                "returns": "pd.Series",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.Series"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "abs": {
                        "type": "function",
                        "info": "Return a Series/DataFrame with absolute numeric value of each element.",
                        "returns": "pd.Series",
                        "parameters": {}
                    },
                    "add": {
                        "type": "function",
                        "info": "Return Addition of series and other, element-wise (binary operator `add`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "add_prefix": {
                        "type": "function",
                        "info": "Prefix labels with string `prefix`.",
                        "returns": "pd.Series",
                        "parameters": {
                            "prefix": "str",
                            "axis": "Axis | None"
                        }
                    },
                    "add_suffix": {
                        "type": "function",
                        "info": "Suffix labels with string `suffix`.",
                        "returns": "pd.Series",
                        "parameters": {
                            "suffix": "str",
                            "axis": "Axis | None"
                        }
                    },
                    "agg": {
                        "type": "function",
                        "info": "Aggregate using one or more operations over the specified axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "func": ".",
                            "axis": "Axis",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "aggregate": {
                        "type": "function",
                        "info": "Aggregate using one or more operations over the specified axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "func": ".",
                            "axis": "Axis",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "align": {
                        "type": "function",
                        "info": "Align two objects on their axes with the specified join method.",
                        "returns": "tuple[pd.Series, NDFrameT]",
                        "parameters": {
                            "other": "NDFrameT",
                            "join": "AlignJoin",
                            "axis": "Axis | None",
                            "level": "Level | None",
                            "copy": "bool_t | None",
                            "fill_value": "Hashable | None",
                            "method": "FillnaOptions | None | lib.NoDefault",
                            "limit": "int | None | lib.NoDefault",
                            "fill_axis": "Axis | lib.NoDefault",
                            "broadcast_axis": "Axis | None | lib.NoDefault"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are True, potentially over an axis.",
                        "returns": "bool",
                        "parameters": {
                            "axis": "Axis",
                            "bool_only": "bool",
                            "skipna": "bool",
                            "kwargs": "."
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is True, potentially over an axis.",
                        "returns": "bool",
                        "parameters": {
                            "axis": "Axis",
                            "bool_only": "bool",
                            "skipna": "bool",
                            "kwargs": "."
                        }
                    },
                    "apply": {
                        "type": "function",
                        "info": "Invoke function on values of Series.",
                        "returns": "pd.DataFrame | pd.Series",
                        "parameters": {
                            "func": "AggFuncType",
                            "convert_dtype": "bool | lib.NoDefault",
                            "args": "tuple[Any, ...]",
                            "by_row": "Literal[False, 'compat']",
                            "kwargs": "."
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return int position of the largest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "AxisInt | None",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return int position of the smallest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "AxisInt | None",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Return the integer indices that would sort the Series values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis",
                            "kind": "SortKind",
                            "order": "None",
                            "stable": "None"
                        }
                    },
                    "array": {
                        "type": "property",
                        "info": "The ExtensionArray of the data backing this Series or Index.",
                        "returns": "ExtensionArray"
                    },
                    "asfreq": {
                        "type": "function",
                        "info": "Convert time series to specified frequency.",
                        "returns": "pd.Series",
                        "parameters": {
                            "freq": "Frequency",
                            "method": "FillnaOptions | None",
                            "how": "Literal['start', 'end'] | None",
                            "normalize": "bool_t",
                            "fill_value": "Hashable | None"
                        }
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the last row(s) without any NaNs before `where`.",
                        "returns": "None",
                        "parameters": {
                            "where": "None",
                            "subset": "None"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Cast a pandas object to a specified dtype ``dtype``.",
                        "returns": "pd.Series",
                        "parameters": {
                            "dtype": "<class 'NoneType'>",
                            "copy": "bool_t | None",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "at": {
                        "type": "property",
                        "info": "Access a single value for a row/column label pair.",
                        "returns": "_AtIndexer"
                    },
                    "at_time": {
                        "type": "function",
                        "info": "Select values at particular time of day (e.g., 9:30AM).",
                        "returns": "pd.Series",
                        "parameters": {
                            "time": "<class 'NoneType'>",
                            "asof": "bool_t",
                            "axis": "Axis | None"
                        }
                    },
                    "attrs": {
                        "type": "property",
                        "info": "Dictionary of global attributes of this dataset.",
                        "returns": "dict[Hashable, Any]"
                    },
                    "autocorr": {
                        "type": "function",
                        "info": "Compute the lag-N autocorrelation.",
                        "returns": "float",
                        "parameters": {
                            "lag": "int"
                        }
                    },
                    "axes": {
                        "type": "property",
                        "info": "Return a list of the row axis labels.",
                        "returns": "list[Index]"
                    },
                    "backfill": {
                        "type": "function",
                        "info": "Fill NA/NaN values by using the next valid observation to fill the gap.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "axis": "None | Axis",
                            "inplace": "bool_t",
                            "limit": "None | int",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "between": {
                        "type": "function",
                        "info": "Return boolean Series equivalent to left <= series <= right.",
                        "returns": "pd.Series",
                        "parameters": {
                            "left": "<class 'pandas.core.series.Series'>",
                            "right": "<class 'pandas.core.series.Series'>",
                            "inclusive": "Literal['both', 'neither', 'left', 'right']"
                        }
                    },
                    "between_time": {
                        "type": "function",
                        "info": "Select values between particular times of the day (e.g., 9:00-9:30 AM).",
                        "returns": "pd.Series",
                        "parameters": {
                            "start_time": "<class 'NoneType'>",
                            "end_time": "<class 'NoneType'>",
                            "inclusive": "IntervalClosedType",
                            "axis": "Axis | None"
                        }
                    },
                    "bfill": {
                        "type": "function",
                        "info": "Fill NA/NaN values by using the next valid observation to fill the gap.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "axis": "None | Axis",
                            "inplace": "bool_t",
                            "limit": "None | int",
                            "limit_area": "Literal['inside', 'outside'] | None",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "bool": {
                        "type": "function",
                        "info": "Return the bool of a single element Series or DataFrame.",
                        "returns": "bool_t",
                        "parameters": {}
                    },
                    "case_when": {
                        "type": "function",
                        "info": "Replace values where the conditions are True.",
                        "returns": "pd.Series",
                        "parameters": {
                            "caselist": "list[tuple[ArrayLike | Callable[[Series], Series | np.ndarray | Sequence[bool]], ArrayLike | Scalar | Callable[[Series], Series | np.ndarray]],]"
                        }
                    },
                    "cat": {
                        "type": "class",
                        "info": "Accessor object for categorical properties of the Series values.",
                        "returns": "pd.Series.cat",
                        "items": {
                            "add_categories": {
                                "type": "function",
                                "info": "Add new categories.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "as_ordered": {
                                "type": "function",
                                "info": "Set the Categorical to be ordered.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "as_unordered": {
                                "type": "function",
                                "info": "Set the Categorical to be unordered.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "codes": {
                                "type": "property",
                                "info": "Return Series of codes as well as the index.",
                                "returns": "pd.Series"
                            },
                            "remove_categories": {
                                "type": "function",
                                "info": "Remove the specified categories.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "remove_unused_categories": {
                                "type": "function",
                                "info": "Remove categories which are not used.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "rename_categories": {
                                "type": "function",
                                "info": "Rename categories.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "reorder_categories": {
                                "type": "function",
                                "info": "Reorder categories as specified in new_categories.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "set_categories": {
                                "type": "function",
                                "info": "Set the categories to the specified new categories.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "data": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "combine": {
                        "type": "function",
                        "info": "Combine the Series with a Series or scalar according to `func`.",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": "Series | Hashable",
                            "func": "Callable[[Hashable, Hashable], Hashable]",
                            "fill_value": "Hashable | None"
                        }
                    },
                    "combine_first": {
                        "type": "function",
                        "info": "Update null elements with value in the same location in 'other'.",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": "<class 'pandas.core.series.Series'>"
                        }
                    },
                    "compare": {
                        "type": "function",
                        "info": "Compare to another Series and show the differences.",
                        "returns": "pd.DataFrame | pd.Series",
                        "parameters": {
                            "other": "Series",
                            "align_axis": "Axis",
                            "keep_shape": "bool",
                            "keep_equal": "bool",
                            "result_names": "Suffixes"
                        }
                    },
                    "convert_dtypes": {
                        "type": "function",
                        "info": "Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.",
                        "returns": "pd.Series",
                        "parameters": {
                            "infer_objects": "bool_t",
                            "convert_string": "bool_t",
                            "convert_integer": "bool_t",
                            "convert_boolean": "bool_t",
                            "convert_floating": "bool_t",
                            "dtype_backend": "DtypeBackend"
                        }
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object's indices and data.",
                        "returns": "pd.Series",
                        "parameters": {
                            "deep": "bool_t | None"
                        }
                    },
                    "corr": {
                        "type": "function",
                        "info": "Compute correlation with `other` Series, excluding missing values.",
                        "returns": "float",
                        "parameters": {
                            "other": "Series",
                            "method": "CorrelationMethod",
                            "min_periods": "int | None"
                        }
                    },
                    "count": {
                        "type": "function",
                        "info": "Return number of non-NA/null observations in the Series.",
                        "returns": "int",
                        "parameters": {}
                    },
                    "cov": {
                        "type": "function",
                        "info": "Compute covariance with Series, excluding missing values.",
                        "returns": "float",
                        "parameters": {
                            "other": "Series",
                            "min_periods": "int | None",
                            "ddof": "int | None"
                        }
                    },
                    "cummax": {
                        "type": "function",
                        "info": "Return cumulative maximum over a DataFrame or Series axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "cummin": {
                        "type": "function",
                        "info": "Return cumulative minimum over a DataFrame or Series axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "cumprod": {
                        "type": "function",
                        "info": "Return cumulative product over a DataFrame or Series axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "cumsum": {
                        "type": "function",
                        "info": "Return cumulative sum over a DataFrame or Series axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "describe": {
                        "type": "function",
                        "info": "Generate descriptive statistics.",
                        "returns": "pd.Series",
                        "parameters": {
                            "percentiles": "<class 'NoneType'>",
                            "include": "<class 'NoneType'>",
                            "exclude": "<class 'NoneType'>"
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "First discrete difference of element.",
                        "returns": "pd.Series",
                        "parameters": {
                            "periods": "int"
                        }
                    },
                    "div": {
                        "type": "function",
                        "info": "Return Floating division of series and other, element-wise (binary operator `truediv`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "divide": {
                        "type": "function",
                        "info": "Return Floating division of series and other, element-wise (binary operator `truediv`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "divmod": {
                        "type": "function",
                        "info": "Return Integer division and modulo of series and other, element-wise (binary operator `divmod`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "dot": {
                        "type": "function",
                        "info": "Compute the dot product between the Series and the columns of other.",
                        "returns": "pd.Series | pd.np.ndarray",
                        "parameters": {
                            "other": "AnyArrayLike"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Return Series with specified index labels removed.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "labels": "IndexLabel | None",
                            "axis": "Axis",
                            "index": "IndexLabel | None",
                            "columns": "IndexLabel | None",
                            "level": "Level | None",
                            "inplace": "bool",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return Series with duplicate values removed.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "keep": "DropKeep",
                            "inplace": "bool",
                            "ignore_index": "bool"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return Series/DataFrame with requested index / column level(s) removed.",
                        "returns": "pd.Series",
                        "parameters": {
                            "level": "IndexLabel",
                            "axis": "Axis"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return a new Series with missing values removed.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "axis": "Axis",
                            "inplace": "bool",
                            "how": "AnyAll | None",
                            "ignore_index": "bool"
                        }
                    },
                    "dt": {
                        "type": "class",
                        "info": "Accessor object for datetimelike properties of the Series values.",
                        "returns": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties",
                        "items": {
                            "as_unit": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "asfreq": {
                                "type": "function",
                                "info": "Convert the PeriodArray to the specified frequency `freq`.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "ceil": {
                                "type": "function",
                                "info": "Perform ceil operation on the data to the specified `freq`.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "day_name": {
                                "type": "function",
                                "info": "Return the day names with specified locale.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "floor": {
                                "type": "function",
                                "info": "Perform floor operation on the data to the specified `freq`.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "isocalendar": {
                                "type": "function",
                                "info": "Calculate year, week, and day according to the ISO 8601 standard.",
                                "returns": "pd.DataFrame",
                                "parameters": {}
                            },
                            "month_name": {
                                "type": "function",
                                "info": "Return the month names with specified locale.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "normalize": {
                                "type": "function",
                                "info": "Convert times to midnight.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "round": {
                                "type": "function",
                                "info": "Perform round operation on the data to the specified `freq`.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "strftime": {
                                "type": "function",
                                "info": "Convert to Index using specified date_format.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "to_period": {
                                "type": "function",
                                "info": "Cast to PeriodArray/PeriodIndex at a particular frequency.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "to_pydatetime": {
                                "type": "function",
                                "info": "Return the data as an array of :class:`datetime.datetime` objects.",
                                "returns": "np.ndarray",
                                "parameters": {}
                            },
                            "to_pytimedelta": {
                                "type": "function",
                                "info": "Return an array of native :class:`datetime.timedelta` objects.",
                                "returns": "np.ndarray",
                                "parameters": {}
                            },
                            "to_timestamp": {
                                "type": "function",
                                "info": "Cast to DatetimeArray/Index.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "total_seconds": {
                                "type": "function",
                                "info": "Return total duration of each element expressed in seconds.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "tz_convert": {
                                "type": "function",
                                "info": "Convert tz-aware Datetime Array/Index from one time zone to another.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "tz_localize": {
                                "type": "function",
                                "info": "Localize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index.",
                                "returns": "None",
                                "parameters": {
                                    "args": "None",
                                    "kwargs": "None"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "data": "Series",
                                    "orig": "."
                                }
                            }
                        }
                    },
                    "dtype": {
                        "type": "property",
                        "info": "Return the dtype object of the underlying data.",
                        "returns": "DtypeObj"
                    },
                    "dtypes": {
                        "type": "property",
                        "info": "Return the dtype object of the underlying data.",
                        "returns": "DtypeObj"
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Indicate duplicate Series values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "",
                        "returns": "bool"
                    },
                    "eq": {
                        "type": "function",
                        "info": "Return Equal to of series and other, element-wise (binary operator `eq`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": "Level | None",
                            "fill_value": "float | None",
                            "axis": "Axis"
                        }
                    },
                    "equals": {
                        "type": "function",
                        "info": "Test whether two objects contain the same elements.",
                        "returns": "bool_t",
                        "parameters": {
                            "other": "object"
                        }
                    },
                    "ewm": {
                        "type": "function",
                        "info": "Provide exponentially weighted (EW) calculations.",
                        "returns": "ExponentialMovingWindow",
                        "parameters": {
                            "com": "float | None",
                            "span": "float | None",
                            "halflife": "float | TimedeltaConvertibleTypes | None",
                            "alpha": "float | None",
                            "min_periods": "int | None",
                            "adjust": "bool_t",
                            "ignore_na": "bool_t",
                            "axis": "Axis | lib.NoDefault",
                            "times": "np.ndarray | DataFrame | Series | None",
                            "method": "Literal['single', 'table']"
                        }
                    },
                    "expanding": {
                        "type": "function",
                        "info": "Provide expanding window calculations.",
                        "returns": "Expanding",
                        "parameters": {
                            "min_periods": "int",
                            "axis": "Axis | lib.NoDefault",
                            "method": "Literal['single', 'table']"
                        }
                    },
                    "explode": {
                        "type": "function",
                        "info": "Transform each element of a list-like to a row.",
                        "returns": "pd.Series",
                        "parameters": {
                            "ignore_index": "bool"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the object as an enumerated type or categorical variable.",
                        "returns": "tuple[npt.NDArray[np.intp], Index]",
                        "parameters": {
                            "sort": "bool",
                            "use_na_sentinel": "bool"
                        }
                    },
                    "ffill": {
                        "type": "function",
                        "info": "Fill NA/NaN values by propagating the last valid observation to next valid.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "axis": "None | Axis",
                            "inplace": "bool_t",
                            "limit": "None | int",
                            "limit_area": "Literal['inside', 'outside'] | None",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values using the specified method.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "value": "Hashable | Mapping | Series | DataFrame | None",
                            "method": "FillnaOptions | None",
                            "axis": "Axis | None",
                            "inplace": "bool_t",
                            "limit": "int | None",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "filter": {
                        "type": "function",
                        "info": "Subset the dataframe rows or columns according to the specified index labels.",
                        "returns": "pd.Series",
                        "parameters": {
                            "items": "<class 'NoneType'>",
                            "like": "str | None",
                            "regex": "str | None",
                            "axis": "Axis | None"
                        }
                    },
                    "first": {
                        "type": "function",
                        "info": "Select initial periods of time series data based on a date offset.",
                        "returns": "pd.Series",
                        "parameters": {
                            "offset": "<class 'NoneType'>"
                        }
                    },
                    "first_valid_index": {
                        "type": "function",
                        "info": "Return index for first non-NA value or None, if no non-NA value is found.",
                        "returns": "Hashable | None",
                        "parameters": {}
                    },
                    "flags": {
                        "type": "property",
                        "info": "Get the properties associated with this pandas object.",
                        "returns": "pd.Flags"
                    },
                    "floordiv": {
                        "type": "function",
                        "info": "Return Integer division of series and other, element-wise (binary operator `floordiv`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "ge": {
                        "type": "function",
                        "info": "Return Greater than or equal to of series and other, element-wise (binary operator `ge`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "get": {
                        "type": "function",
                        "info": "Get item from object for given key (ex: DataFrame column).",
                        "returns": "None",
                        "parameters": {
                            "key": "None",
                            "default": "None"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group Series using a mapper or by a Series of columns.",
                        "returns": "SeriesGroupBy",
                        "parameters": {
                            "by": ".",
                            "axis": "Axis",
                            "level": "IndexLabel | None",
                            "as_index": "bool",
                            "sort": "bool",
                            "group_keys": "bool",
                            "observed": "bool | lib.NoDefault",
                            "dropna": "bool"
                        }
                    },
                    "gt": {
                        "type": "function",
                        "info": "Return Greater than of series and other, element-wise (binary operator `gt`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "hasnans": {
                        "type": "property",
                        "info": "Return True if there are any NaNs.",
                        "returns": "bool"
                    },
                    "head": {
                        "type": "function",
                        "info": "Return the first `n` rows.",
                        "returns": "pd.Series",
                        "parameters": {
                            "n": "int"
                        }
                    },
                    "hist": {
                        "type": "function",
                        "info": "Draw histogram of the input series using matplotlib.",
                        "returns": "pd.Series",
                        "parameters": {
                            "by": ".",
                            "ax": ".",
                            "grid": "bool",
                            "xlabelsize": "int | None",
                            "xrot": "float | None",
                            "ylabelsize": "int | None",
                            "yrot": "float | None",
                            "figsize": "tuple[int, int] | None",
                            "bins": "int | Sequence[int]",
                            "backend": "str | None",
                            "legend": "bool",
                            "kwargs": "."
                        }
                    },
                    "iat": {
                        "type": "property",
                        "info": "Access a single value for a row/column pair by integer position.",
                        "returns": "_iAtIndexer"
                    },
                    "idxmax": {
                        "type": "function",
                        "info": "Return the row label of the maximum value.",
                        "returns": "Hashable",
                        "parameters": {
                            "axis": "Axis",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "idxmin": {
                        "type": "function",
                        "info": "Return the row label of the minimum value.",
                        "returns": "Hashable",
                        "parameters": {
                            "axis": "Axis",
                            "skipna": "bool",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "iloc": {
                        "type": "property",
                        "info": "Purely integer-location based indexing for selection by position.",
                        "returns": "_iLocIndexer"
                    },
                    "index": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.AxisProperty"
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "Attempt to infer better dtypes for object columns.",
                        "returns": "pd.Series",
                        "parameters": {
                            "copy": "bool_t | None"
                        }
                    },
                    "info": {
                        "type": "function",
                        "info": "Print a concise summary of a Series.",
                        "returns": "None",
                        "parameters": {
                            "verbose": "bool | None",
                            "buf": "IO[str] | None",
                            "max_cols": "int | None",
                            "memory_usage": "bool | str | None",
                            "show_counts": "bool"
                        }
                    },
                    "is_monotonic_decreasing": {
                        "type": "property",
                        "info": "Return boolean if values in the object are monotonically decreasing.",
                        "returns": "bool"
                    },
                    "is_monotonic_increasing": {
                        "type": "property",
                        "info": "Return boolean if values in the object are monotonically increasing.",
                        "returns": "bool"
                    },
                    "is_unique": {
                        "type": "property",
                        "info": "Return boolean if values in the object are unique.",
                        "returns": "bool"
                    },
                    "isin": {
                        "type": "function",
                        "info": "Whether elements in Series are contained in `values`.",
                        "returns": "pd.Series",
                        "parameters": {
                            "values": "<class 'pandas.core.series.Series'>"
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "pd.Series",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Series.isnull is an alias for Series.isna.",
                        "returns": "pd.Series",
                        "parameters": {}
                    },
                    "item": {
                        "type": "function",
                        "info": "Return the first element of the underlying data as a Python scalar.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "items": {
                        "type": "function",
                        "info": "Lazily iterate over (index, value) tuples.",
                        "returns": "Iterable[tuple[Hashable, Any]]",
                        "parameters": {}
                    },
                    "keys": {
                        "type": "function",
                        "info": "Return alias for index.",
                        "returns": "pd.Index",
                        "parameters": {}
                    },
                    "kurt": {
                        "type": "function",
                        "info": "Return unbiased kurtosis over requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "kurtosis": {
                        "type": "function",
                        "info": "Return unbiased kurtosis over requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "last": {
                        "type": "function",
                        "info": "Select final periods of time series data based on a date offset.",
                        "returns": "pd.Series",
                        "parameters": {
                            "offset": "<class 'NoneType'>"
                        }
                    },
                    "last_valid_index": {
                        "type": "function",
                        "info": "Return index for last non-NA value or None, if no non-NA value is found.",
                        "returns": "Hashable | None",
                        "parameters": {}
                    },
                    "le": {
                        "type": "function",
                        "info": "Return Less than or equal to of series and other, element-wise (binary operator `le`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "list": {
                        "type": "class",
                        "info": "Accessor object for list data properties of the Series values.",
                        "returns": "pandas.core.arrays.arrow.accessors.ListAccessor",
                        "items": {
                            "__getitem__": {
                                "type": "function",
                                "info": "Index or slice lists in the Series.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "key": "int | slice"
                                }
                            },
                            "flatten": {
                                "type": "function",
                                "info": "Flatten list values.",
                                "returns": "pd.Series",
                                "parameters": {}
                            },
                            "len": {
                                "type": "function",
                                "info": "Return the length of each list in the Series.",
                                "returns": "pd.Series",
                                "parameters": {}
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "data": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "loc": {
                        "type": "property",
                        "info": "Access a group of rows and columns by label(s) or a boolean array.",
                        "returns": "_LocIndexer"
                    },
                    "lt": {
                        "type": "function",
                        "info": "Return Less than of series and other, element-wise (binary operator `lt`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "map": {
                        "type": "function",
                        "info": "Map values of Series according to an input mapping or function.",
                        "returns": "pd.Series",
                        "parameters": {
                            "arg": "Callable | Mapping | Series",
                            "na_action": "Literal['ignore'] | None"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "Return the maximum of the values over the requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "mean": {
                        "type": "function",
                        "info": "Return the mean of the values over the requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "median": {
                        "type": "function",
                        "info": "Return the median of the values over the requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Return the memory usage of the Series.",
                        "returns": "int",
                        "parameters": {
                            "index": "bool",
                            "deep": "bool"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "Return the minimum of the values over the requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "mod": {
                        "type": "function",
                        "info": "Return Modulo of series and other, element-wise (binary operator `mod`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "mode": {
                        "type": "function",
                        "info": "Return the mode(s) of the Series.",
                        "returns": "pd.Series",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "mul": {
                        "type": "function",
                        "info": "Return Multiplication of series and other, element-wise (binary operator `mul`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": "Level | None",
                            "fill_value": "float | None",
                            "axis": "Axis"
                        }
                    },
                    "multiply": {
                        "type": "function",
                        "info": "Return Multiplication of series and other, element-wise (binary operator `mul`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": "Level | None",
                            "fill_value": "float | None",
                            "axis": "Axis"
                        }
                    },
                    "name": {
                        "type": "property",
                        "info": "Return the name of the Series.",
                        "returns": "Hashable"
                    },
                    "nbytes": {
                        "type": "property",
                        "info": "Return the number of bytes in the underlying data.",
                        "returns": "int"
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Number of dimensions of the underlying data, by definition 1.",
                        "returns": "int"
                    },
                    "ne": {
                        "type": "function",
                        "info": "Return Not equal to of series and other, element-wise (binary operator `ne`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "nlargest": {
                        "type": "function",
                        "info": "Return the largest `n` elements.",
                        "returns": "pd.Series",
                        "parameters": {
                            "n": "int",
                            "keep": "Literal['first', 'last', 'all']"
                        }
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "pd.Series",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Series.notnull is an alias for Series.notna.",
                        "returns": "pd.Series",
                        "parameters": {}
                    },
                    "nsmallest": {
                        "type": "function",
                        "info": "Return the smallest `n` elements.",
                        "returns": "pd.Series",
                        "parameters": {
                            "n": "int",
                            "keep": "Literal['first', 'last', 'all']"
                        }
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Return number of unique elements in the object.",
                        "returns": "int",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "pad": {
                        "type": "function",
                        "info": "Fill NA/NaN values by propagating the last valid observation to next valid.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "axis": "None | Axis",
                            "inplace": "bool_t",
                            "limit": "None | int",
                            "downcast": "dict | None | lib.NoDefault"
                        }
                    },
                    "pct_change": {
                        "type": "function",
                        "info": "Fractional change between the current and a prior element.",
                        "returns": "pd.Series",
                        "parameters": {
                            "periods": "int",
                            "fill_method": "FillnaOptions | None | lib.NoDefault",
                            "limit": "int | None | lib.NoDefault",
                            "freq": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "pipe": {
                        "type": "function",
                        "info": "Apply chainable functions that expect Series or DataFrames.",
                        "returns": "T",
                        "parameters": {
                            "func": "Callable[..., T] | tuple[Callable[..., T], str]",
                            "args": "~T",
                            "kwargs": "~T"
                        }
                    },
                    "pop": {
                        "type": "function",
                        "info": "Return item and drops from series. Raise KeyError if not found.",
                        "returns": "noos.analytics._core.collections.Any",
                        "parameters": {
                            "item": "Hashable"
                        }
                    },
                    "pow": {
                        "type": "function",
                        "info": "Return Exponential power of series and other, element-wise (binary operator `pow`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "prod": {
                        "type": "function",
                        "info": "Return the product of the values over the requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "min_count": "int",
                            "kwargs": "."
                        }
                    },
                    "product": {
                        "type": "function",
                        "info": "Return the product of the values over the requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "min_count": "int",
                            "kwargs": "."
                        }
                    },
                    "quantile": {
                        "type": "function",
                        "info": "Return value at the given quantile.",
                        "returns": "pd.float | pd.Series",
                        "parameters": {
                            "q": "float | Sequence[float] | AnyArrayLike",
                            "interpolation": "QuantileInterpolation"
                        }
                    },
                    "radd": {
                        "type": "function",
                        "info": "Return Addition of series and other, element-wise (binary operator `radd`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "rank": {
                        "type": "function",
                        "info": "Compute numerical data ranks (1 through n) along axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis",
                            "method": "Literal['average', 'min', 'max', 'first', 'dense']",
                            "numeric_only": "bool_t",
                            "na_option": "Literal['keep', 'top', 'bottom']",
                            "ascending": "bool_t",
                            "pct": "bool_t"
                        }
                    },
                    "ravel": {
                        "type": "function",
                        "info": "Return the flattened underlying data as an ndarray or ExtensionArray.",
                        "returns": "ArrayLike",
                        "parameters": {
                            "order": "str"
                        }
                    },
                    "rdiv": {
                        "type": "function",
                        "info": "Return Floating division of series and other, element-wise (binary operator `rtruediv`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "rdivmod": {
                        "type": "function",
                        "info": "Return Integer division and modulo of series and other, element-wise (binary operator `rdivmod`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Conform Series to new index with optional filling logic.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": ".",
                            "axis": "Axis | None",
                            "method": "ReindexMethod | None",
                            "copy": "bool | None",
                            "level": "Level | None",
                            "fill_value": "Scalar | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "reindex_like": {
                        "type": "function",
                        "info": "Return an object with matching indices as other object.",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": "<class 'NoneType'>",
                            "method": "Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None",
                            "copy": "bool_t | None",
                            "limit": "int | None",
                            "tolerance": "<class 'NoneType'>"
                        }
                    },
                    "rename": {
                        "type": "function",
                        "info": "Alter Series index labels or name.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "index": "Renamer | Hashable | None",
                            "axis": "Axis | None",
                            "copy": "bool | None",
                            "inplace": "bool",
                            "level": "Level | None",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "rename_axis": {
                        "type": "function",
                        "info": "Set the name of the axis for the index or columns.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "mapper": "IndexLabel | lib.NoDefault",
                            "index": ".",
                            "axis": "Axis",
                            "copy": "bool",
                            "inplace": "bool"
                        }
                    },
                    "reorder_levels": {
                        "type": "function",
                        "info": "Rearrange index levels using input order.",
                        "returns": "pd.Series",
                        "parameters": {
                            "order": "Sequence[Level]"
                        }
                    },
                    "repeat": {
                        "type": "function",
                        "info": "Repeat elements of a Series.",
                        "returns": "pd.Series",
                        "parameters": {
                            "repeats": "int | Sequence[int]",
                            "axis": "None"
                        }
                    },
                    "resample": {
                        "type": "function",
                        "info": "Resample time-series data.",
                        "returns": "Resampler",
                        "parameters": {
                            "rule": ".",
                            "axis": "Axis | lib.NoDefault",
                            "closed": "Literal['right', 'left'] | None",
                            "label": "Literal['right', 'left'] | None",
                            "convention": "Literal['start', 'end', 's', 'e'] | lib.NoDefault",
                            "kind": "Literal['timestamp', 'period'] | None | lib.NoDefault",
                            "on": "Level | None",
                            "level": "Level | None",
                            "origin": "str | TimestampConvertibleTypes",
                            "offset": "TimedeltaConvertibleTypes | None",
                            "group_keys": "bool_t"
                        }
                    },
                    "reset_index": {
                        "type": "function",
                        "info": "Generate a new DataFrame or Series with the index reset.",
                        "returns": "pd.DataFrame | pd.Series | None",
                        "parameters": {
                            "level": "IndexLabel | None",
                            "drop": "bool",
                            "name": "Level",
                            "inplace": "bool",
                            "allow_duplicates": "bool"
                        }
                    },
                    "rfloordiv": {
                        "type": "function",
                        "info": "Return Integer division of series and other, element-wise (binary operator `rfloordiv`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "rmod": {
                        "type": "function",
                        "info": "Return Modulo of series and other, element-wise (binary operator `rmod`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "rmul": {
                        "type": "function",
                        "info": "Return Multiplication of series and other, element-wise (binary operator `rmul`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "rolling": {
                        "type": "function",
                        "info": "Provide rolling window calculations.",
                        "returns": "Window | Rolling",
                        "parameters": {
                            "window": "int | dt.timedelta | str | BaseOffset | BaseIndexer",
                            "min_periods": "int | None",
                            "center": "bool_t",
                            "win_type": "str | None",
                            "on": "str | None",
                            "axis": "Axis | lib.NoDefault",
                            "closed": "IntervalClosedType | None",
                            "step": "int | None",
                            "method": "str"
                        }
                    },
                    "round": {
                        "type": "function",
                        "info": "Round each value in a Series to the given number of decimals.",
                        "returns": "pd.Series",
                        "parameters": {
                            "decimals": "int",
                            "args": "<class 'pandas.core.series.Series'>",
                            "kwargs": "<class 'pandas.core.series.Series'>"
                        }
                    },
                    "rpow": {
                        "type": "function",
                        "info": "Return Exponential power of series and other, element-wise (binary operator `rpow`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "rsub": {
                        "type": "function",
                        "info": "Return Subtraction of series and other, element-wise (binary operator `rsub`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "rtruediv": {
                        "type": "function",
                        "info": "Return Floating division of series and other, element-wise (binary operator `rtruediv`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "sample": {
                        "type": "function",
                        "info": "Return a random sample of items from an axis of object.",
                        "returns": "pd.Series",
                        "parameters": {
                            "n": "int | None",
                            "frac": "float | None",
                            "replace": "bool_t",
                            "weights": "<class 'NoneType'>",
                            "random_state": "RandomState | None",
                            "axis": "Axis | None",
                            "ignore_index": "bool_t"
                        }
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "npt.NDArray[np.intp] | np.intp",
                        "parameters": {
                            "value": "NumpyValueArrayLike | ExtensionArray",
                            "side": "Literal['left', 'right']",
                            "sorter": "NumpySorter | None"
                        }
                    },
                    "sem": {
                        "type": "function",
                        "info": "Return unbiased standard error of the mean over requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "ddof": "int",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "set_axis": {
                        "type": "function",
                        "info": "Assign desired index to given axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "labels": ".",
                            "axis": "Axis",
                            "copy": "bool | None"
                        }
                    },
                    "set_flags": {
                        "type": "function",
                        "info": "Return a new object with updated flags.",
                        "returns": "pd.Series",
                        "parameters": {
                            "copy": "bool_t",
                            "allows_duplicate_labels": "bool_t | None"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple of the shape of the underlying data.",
                        "returns": "Shape"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of periods with an optional time `freq`.",
                        "returns": "pd.Series |pd.DataFrame",
                        "parameters": {
                            "periods": "int | Sequence[int]",
                            "freq": ".",
                            "axis": "Axis",
                            "fill_value": "Hashable",
                            "suffix": "str | None"
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return the number of elements in the underlying data.",
                        "returns": "int"
                    },
                    "skew": {
                        "type": "function",
                        "info": "Return unbiased skew over requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "sort_index": {
                        "type": "function",
                        "info": "Sort Series by index labels.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "axis": "Axis",
                            "level": "IndexLabel | None",
                            "ascending": "bool | Sequence[bool]",
                            "inplace": "bool",
                            "kind": "SortKind",
                            "na_position": "NaPosition",
                            "sort_remaining": "bool",
                            "ignore_index": "bool",
                            "key": "IndexKeyFunc | None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Sort by the values.",
                        "returns": "pd.Series | None",
                        "parameters": {
                            "axis": "Axis",
                            "ascending": "bool | Sequence[bool]",
                            "inplace": "bool",
                            "kind": "SortKind",
                            "na_position": "NaPosition",
                            "ignore_index": "bool",
                            "key": "ValueKeyFunc | None"
                        }
                    },
                    "sparse": {
                        "type": "class",
                        "info": "Accessor for SparseSparse from other sparse matrix data types.",
                        "returns": "pd.Series.sparse",
                        "items": {
                            "from_coo": {
                                "type": "object",
                                "info": "Create a bound instance method object.",
                                "returns": "method"
                            },
                            "to_coo": {
                                "type": "function",
                                "info": "Create a scipy.sparse.coo_matrix from a Series with MultiIndex.",
                                "returns": "None",
                                "parameters": {
                                    "row_levels": "None",
                                    "column_levels": "None",
                                    "sort_labels": "bool"
                                }
                            },
                            "to_dense": {
                                "type": "function",
                                "info": "Convert a Series from sparse values to dense.",
                                "returns": "pd.Series",
                                "parameters": {}
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "data": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "squeeze": {
                        "type": "function",
                        "info": "Squeeze 1 dimensional axis objects into scalars.",
                        "returns": "None",
                        "parameters": {
                            "axis": "Axis | None"
                        }
                    },
                    "std": {
                        "type": "function",
                        "info": "Return sample standard deviation over requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "ddof": "int",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "struct": {
                        "type": "class",
                        "info": "Accessor object for structured data properties of the Series values.",
                        "returns": "pandas.core.arrays.arrow.accessors.StructAccessor",
                        "items": {
                            "dtypes": {
                                "type": "property",
                                "info": "Return the dtype object of each child field of the struct.",
                                "returns": "pd.Series"
                            },
                            "explode": {
                                "type": "function",
                                "info": "Extract all child fields of a struct as a DataFrame.",
                                "returns": "pd.DataFrame",
                                "parameters": {}
                            },
                            "field": {
                                "type": "function",
                                "info": "Extract a child field of a struct as a Series.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "name_or_index": "list[str] | list[bytes] | list[int] | pc.Expression | bytes | str | int"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "data": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "sub": {
                        "type": "function",
                        "info": "Return Subtraction of series and other, element-wise (binary operator `sub`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "subtract": {
                        "type": "function",
                        "info": "Return Subtraction of series and other, element-wise (binary operator `sub`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "sum": {
                        "type": "function",
                        "info": "Return the sum of the values over the requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "numeric_only": "bool",
                            "min_count": "int",
                            "kwargs": "."
                        }
                    },
                    "swapaxes": {
                        "type": "function",
                        "info": "Interchange axes and swap values axes appropriately.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis1": "Axis",
                            "axis2": "Axis",
                            "copy": "bool_t | None"
                        }
                    },
                    "swaplevel": {
                        "type": "function",
                        "info": "Swap levels i and j in a :class:`MultiIndex`.",
                        "returns": "pd.Series",
                        "parameters": {
                            "i": "Level",
                            "j": "Level",
                            "copy": "bool | None"
                        }
                    },
                    "tail": {
                        "type": "function",
                        "info": "Return the last `n` rows.",
                        "returns": "pd.Series",
                        "parameters": {
                            "n": "int"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return the elements in the given *positional* indices along an axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "indices": "<class 'NoneType'>",
                            "axis": "Axis",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "to_clipboard": {
                        "type": "function",
                        "info": "Copy object to the system clipboard.",
                        "returns": "None",
                        "parameters": {
                            "excel": "bool_t",
                            "sep": "str | None",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "to_csv": {
                        "type": "function",
                        "info": "Write object to a comma-separated values (csv) file.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "path_or_buf": "FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None",
                            "sep": "str",
                            "na_rep": "str",
                            "float_format": "str | Callable | None",
                            "columns": "Sequence[Hashable] | None",
                            "header": "bool_t | list[str]",
                            "index": "bool_t",
                            "index_label": "IndexLabel | None",
                            "mode": "str",
                            "encoding": "str | None",
                            "compression": "CompressionOptions",
                            "quoting": "int | None",
                            "quotechar": "str",
                            "lineterminator": "str | None",
                            "chunksize": "int | None",
                            "date_format": "str | None",
                            "doublequote": "bool_t",
                            "escapechar": "str | None",
                            "decimal": "str",
                            "errors": "OpenFileErrors",
                            "storage_options": "StorageOptions | None"
                        }
                    },
                    "to_dict": {
                        "type": "function",
                        "info": "Convert Series to {label -> value} dict or dict-like object.",
                        "returns": "MutableMappingT",
                        "parameters": {
                            "into": "type[MutableMappingT] | MutableMappingT"
                        }
                    },
                    "to_excel": {
                        "type": "function",
                        "info": "Write object to an Excel sheet.",
                        "returns": "None",
                        "parameters": {
                            "excel_writer": "FilePath | WriteExcelBuffer | ExcelWriter",
                            "sheet_name": "str",
                            "na_rep": "str",
                            "float_format": "str | None",
                            "columns": "Sequence[Hashable] | None",
                            "header": "Sequence[Hashable] | bool_t",
                            "index": "bool_t",
                            "index_label": "IndexLabel | None",
                            "startrow": "int",
                            "startcol": "int",
                            "engine": "Literal['openpyxl', 'xlsxwriter'] | None",
                            "merge_cells": "bool_t",
                            "inf_rep": "str",
                            "freeze_panes": "tuple[int, int] | None",
                            "storage_options": "StorageOptions | None",
                            "engine_kwargs": "dict[str, Any] | None"
                        }
                    },
                    "to_frame": {
                        "type": "function",
                        "info": "Convert Series to DataFrame.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "name": "Hashable"
                        }
                    },
                    "to_hdf": {
                        "type": "function",
                        "info": "Write the contained data to an HDF5 file using HDFStore.",
                        "returns": "None",
                        "parameters": {
                            "path_or_buf": "FilePath | HDFStore",
                            "key": "str",
                            "mode": "Literal['a', 'w', 'r+']",
                            "complevel": "int | None",
                            "complib": "Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None",
                            "append": "bool_t",
                            "format": "Literal['fixed', 'table'] | None",
                            "index": "bool_t",
                            "min_itemsize": "int | dict[str, int] | None",
                            "nan_rep": ".",
                            "dropna": "bool_t | None",
                            "data_columns": "Literal[True] | list[str] | None",
                            "errors": "OpenFileErrors",
                            "encoding": "str"
                        }
                    },
                    "to_json": {
                        "type": "function",
                        "info": "Convert the object to a JSON string.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "path_or_buf": "FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None",
                            "orient": "Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None",
                            "date_format": "str | None",
                            "double_precision": "int",
                            "force_ascii": "bool_t",
                            "date_unit": "TimeUnit",
                            "default_handler": "Callable[[Any], JSONSerializable] | None",
                            "lines": "bool_t",
                            "compression": "CompressionOptions",
                            "index": "bool_t | None",
                            "indent": "int | None",
                            "storage_options": "StorageOptions | None",
                            "mode": "Literal['a', 'w']"
                        }
                    },
                    "to_latex": {
                        "type": "function",
                        "info": "Render object to a LaTeX tabular, longtable, or nested table.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "buf": "FilePath | WriteBuffer[str] | None",
                            "columns": "Sequence[Hashable] | None",
                            "header": "bool_t | SequenceNotStr[str]",
                            "index": "bool_t",
                            "na_rep": "str",
                            "formatters": "FormattersType | None",
                            "float_format": "FloatFormatType | None",
                            "sparsify": "bool_t | None",
                            "index_names": "bool_t",
                            "bold_rows": "bool_t",
                            "column_format": "str | None",
                            "longtable": "bool_t | None",
                            "escape": "bool_t | None",
                            "encoding": "str | None",
                            "decimal": "str",
                            "multicolumn": "bool_t | None",
                            "multicolumn_format": "str | None",
                            "multirow": "bool_t | None",
                            "caption": "str | tuple[str, str] | None",
                            "label": "str | None",
                            "position": "str | None"
                        }
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_markdown": {
                        "type": "function",
                        "info": "Print Series in Markdown-friendly format.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "buf": "IO[str] | None",
                            "mode": "str",
                            "index": "bool",
                            "storage_options": "StorageOptions | None",
                            "kwargs": "."
                        }
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "A NumPy ndarray representing the values in this Series or Index.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object",
                            "kwargs": "."
                        }
                    },
                    "to_period": {
                        "type": "function",
                        "info": "Convert Series from DatetimeIndex to PeriodIndex.",
                        "returns": "pd.Series",
                        "parameters": {
                            "freq": "str | None",
                            "copy": "bool | None"
                        }
                    },
                    "to_pickle": {
                        "type": "function",
                        "info": "Pickle (serialize) object to file.",
                        "returns": "None",
                        "parameters": {
                            "path": "FilePath | WriteBuffer[bytes]",
                            "compression": "CompressionOptions",
                            "protocol": "int",
                            "storage_options": "StorageOptions | None"
                        }
                    },
                    "to_sql": {
                        "type": "function",
                        "info": "Write records stored in a DataFrame to a SQL database.",
                        "returns": "int | None",
                        "parameters": {
                            "name": "str",
                            "con": "int | None",
                            "schema": "str | None",
                            "if_exists": "Literal['fail', 'replace', 'append']",
                            "index": "bool_t",
                            "index_label": "IndexLabel | None",
                            "chunksize": "int | None",
                            "dtype": "DtypeArg | None",
                            "method": "Literal['multi'] | Callable | None"
                        }
                    },
                    "to_string": {
                        "type": "function",
                        "info": "Render a string representation of the Series.",
                        "returns": "pd.CategoricalIndex.str| None",
                        "parameters": {
                            "buf": "FilePath | WriteBuffer[str] | None",
                            "na_rep": "str",
                            "float_format": "str | None",
                            "header": "bool",
                            "index": "bool",
                            "length": "bool",
                            "dtype": "bool",
                            "name": "bool",
                            "max_rows": "int | None",
                            "min_rows": "int | None"
                        }
                    },
                    "to_timestamp": {
                        "type": "function",
                        "info": "Cast to DatetimeIndex of Timestamps, at *beginning* of period.",
                        "returns": "pd.Series",
                        "parameters": {
                            "freq": "Frequency | None",
                            "how": "Literal['s', 'e', 'start', 'end']",
                            "copy": "bool | None"
                        }
                    },
                    "to_xarray": {
                        "type": "function",
                        "info": "Return an xarray object from the pandas object.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "transform": {
                        "type": "function",
                        "info": "Call ``func`` on self producing a Series with the same axis shape as self.",
                        "returns": "pd.DataFrame | pd.Series",
                        "parameters": {
                            "func": "AggFuncType",
                            "axis": "Axis",
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.Series",
                        "parameters": {
                            "args": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "truediv": {
                        "type": "function",
                        "info": "Return Floating division of series and other, element-wise (binary operator `truediv`).",
                        "returns": "pd.Series",
                        "parameters": {
                            "other": ".",
                            "level": ".",
                            "fill_value": ".",
                            "axis": "Axis"
                        }
                    },
                    "truncate": {
                        "type": "function",
                        "info": "Truncate a Series or DataFrame before and after some index value.",
                        "returns": "pd.Series",
                        "parameters": {
                            "before": "<class 'NoneType'>",
                            "after": "<class 'NoneType'>",
                            "axis": "Axis | None",
                            "copy": "bool_t | None"
                        }
                    },
                    "tz_convert": {
                        "type": "function",
                        "info": "Convert tz-aware axis to target time zone.",
                        "returns": "pd.Series",
                        "parameters": {
                            "tz": "<class 'NoneType'>",
                            "axis": "Axis",
                            "level": "<class 'NoneType'>",
                            "copy": "bool_t | None"
                        }
                    },
                    "tz_localize": {
                        "type": "function",
                        "info": "Localize tz-naive index of a Series or DataFrame to target time zone.",
                        "returns": "pd.Series",
                        "parameters": {
                            "tz": ".",
                            "axis": "Axis",
                            "level": ".",
                            "copy": "bool_t | None",
                            "ambiguous": "TimeAmbiguous",
                            "nonexistent": "TimeNonexistent"
                        }
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return unique values of Series object.",
                        "returns": "ArrayLike",
                        "parameters": {}
                    },
                    "unstack": {
                        "type": "function",
                        "info": "Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "level": "IndexLabel",
                            "fill_value": "Hashable | None",
                            "sort": "bool"
                        }
                    },
                    "update": {
                        "type": "function",
                        "info": "Modify Series in place using values from passed Series.",
                        "returns": "None",
                        "parameters": {
                            "other": "Series | Sequence | Mapping"
                        }
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of unique values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "bins": ".",
                            "dropna": "bool"
                        }
                    },
                    "var": {
                        "type": "function",
                        "info": "Return unbiased variance over requested axis.",
                        "returns": "pd.Series",
                        "parameters": {
                            "axis": "Axis | None",
                            "skipna": "bool",
                            "ddof": "int",
                            "numeric_only": "bool",
                            "kwargs": "."
                        }
                    },
                    "view": {
                        "type": "function",
                        "info": "Create a new view of the Series.",
                        "returns": "pd.Series",
                        "parameters": {
                            "dtype": "Dtype | None"
                        }
                    },
                    "xs": {
                        "type": "function",
                        "info": "Return cross-section from the Series/DataFrame.",
                        "returns": "pd.Series",
                        "parameters": {
                            "key": "IndexLabel",
                            "axis": "Axis",
                            "level": "IndexLabel | None",
                            "drop_level": "bool_t"
                        }
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "data": ".",
                            "index": ".",
                            "dtype": "Dtype | None",
                            "name": ".",
                            "copy": "bool | None",
                            "fastpath": "bool | lib.NoDefault"
                        }
                    }
                }
            },
            "SparseDtype": {
                "type": "class",
                "info": "Dtype for data stored in :class:`SparseArray`.",
                "returns": "pd.SparseDtype",
                "items": {
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "kind": {
                        "type": "property",
                        "info": "The sparse kind. Either 'integer', or 'block'.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "object"
                    },
                    "name": {
                        "type": "property",
                        "info": "A string identifying the data type.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "update_dtype": {
                        "type": "function",
                        "info": "Convert the SparseDtype to a new dtype.",
                        "returns": "pd.SparseDtype",
                        "parameters": {
                            "dtype": "<class 'pandas.core.dtypes.dtypes.SparseDtype'>"
                        }
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "dtype": "Dtype",
                            "fill_value": "Any"
                        }
                    }
                }
            },
            "StringDtype": {
                "type": "class",
                "info": "Extension dtype for string data.",
                "returns": "pd.StringDtype",
                "items": {
                    "construct_array_type": {
                        "type": "function",
                        "info": "Return the array type associated with this dtype.",
                        "returns": "type_t[BaseStringArray]",
                        "parameters": {}
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "kind": {
                        "type": "property",
                        "info": "A character code (one of 'biufcmMOSUV'), default 'O'",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType | float"
                    },
                    "name": {
                        "type": "property",
                        "info": "A string identifying the data type.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "type": {
                        "type": "property",
                        "info": "The scalar type for the array, e.g. ``int``",
                        "returns": "type[str]"
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "storage": "str | None",
                            "na_value": "libmissing.NAType | float"
                        }
                    }
                }
            },
            "Timedelta": {
                "type": "class",
                "info": "Represents a duration, the difference between two dates or times.",
                "returns": "pd.Timedelta",
                "items": {
                    "as_unit": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "asm8": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "ceil": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "components": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "days": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "floor": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "isoformat": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "max": {
                        "type": "object",
                        "info": "Represents a duration, the difference between two dates or times.",
                        "returns": "pd.Timedelta"
                    },
                    "microseconds": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "min": {
                        "type": "object",
                        "info": "Represents a duration, the difference between two dates or times.",
                        "returns": "pd.Timedelta"
                    },
                    "nanoseconds": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "resolution": {
                        "type": "object",
                        "info": "Represents a duration, the difference between two dates or times.",
                        "returns": "pd.Timedelta"
                    },
                    "resolution_string": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "round": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "seconds": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "to_numpy": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "to_pytimedelta": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "to_timedelta64": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "total_seconds": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "unit": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "value": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "view": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "TimedeltaIndex": {
                "type": "class",
                "info": "Immutable Index of timedelta64 data.",
                "returns": "pd.TimedeltaIndex",
                "items": {
                    "T": {
                        "type": "property",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.TimedeltaIndex"
                    },
                    "__getitem__": {
                        "type": "function",
                        "info": "Override numpy.ndarray's __getitem__ method to work as desired.",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "all": {
                        "type": "function",
                        "info": "Return whether all elements are Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "any": {
                        "type": "function",
                        "info": "Return whether any element is Truthy.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "append": {
                        "type": "function",
                        "info": "Append a collection of Index options together.",
                        "returns": "pd.Index",
                        "parameters": {
                            "other": "Index | Sequence[Index]"
                        }
                    },
                    "argmax": {
                        "type": "function",
                        "info": "Return int position of the largest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argmin": {
                        "type": "function",
                        "info": "Return int position of the smallest value in the Series.",
                        "returns": "int",
                        "parameters": {
                            "axis": "<class 'int'>",
                            "skipna": "bool",
                            "args": "<class 'int'>",
                            "kwargs": "<class 'int'>"
                        }
                    },
                    "argsort": {
                        "type": "function",
                        "info": "Return the integer indices that would sort the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "args": ".",
                            "kwargs": "."
                        }
                    },
                    "array": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "as_unit": {
                        "type": "function",
                        "info": "Convert to a dtype with the given unit resolution.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "unit": "str"
                        }
                    },
                    "asi8": {
                        "type": "property",
                        "info": "",
                        "returns": "npt.NDArray[np.int64]"
                    },
                    "asof": {
                        "type": "function",
                        "info": "Return the label from the index, or, if not present, the previous one.",
                        "returns": "None",
                        "parameters": {
                            "label": "None"
                        }
                    },
                    "asof_locs": {
                        "type": "function",
                        "info": "Return the locations (indices) of labels in the index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "where": "Index",
                            "mask": "npt.NDArray[np.bool_]"
                        }
                    },
                    "astype": {
                        "type": "function",
                        "info": "Create an Index with values cast to dtypes.",
                        "returns": "None",
                        "parameters": {
                            "dtype": "None",
                            "copy": "bool"
                        }
                    },
                    "ceil": {
                        "type": "function",
                        "info": "Perform ceil operation on the data to the specified `freq`.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "copy": {
                        "type": "function",
                        "info": "Make a copy of this object.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "name": "Hashable | None",
                            "deep": "bool"
                        }
                    },
                    "delete": {
                        "type": "function",
                        "info": "Make new Index with passed location(-s) deleted.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "loc": "."
                        }
                    },
                    "diff": {
                        "type": "function",
                        "info": "Computes the difference between consecutive values in the Index object.",
                        "returns": "pd.Index",
                        "parameters": {
                            "periods": "int"
                        }
                    },
                    "difference": {
                        "type": "function",
                        "info": "Return a new Index with elements of index not in `other`.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "drop": {
                        "type": "function",
                        "info": "Make new Index with passed list of labels deleted.",
                        "returns": "pd.Index",
                        "parameters": {
                            "labels": "Index | np.ndarray | Iterable[Hashable]",
                            "errors": "IgnoreRaise"
                        }
                    },
                    "drop_duplicates": {
                        "type": "function",
                        "info": "Return Index with duplicate values removed.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "droplevel": {
                        "type": "function",
                        "info": "Return index with requested level(s) removed.",
                        "returns": "None",
                        "parameters": {
                            "level": "IndexLabel"
                        }
                    },
                    "dropna": {
                        "type": "function",
                        "info": "Return Index without NA/NaN values.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "how": "AnyAll"
                        }
                    },
                    "dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "duplicated": {
                        "type": "function",
                        "info": "Indicate duplicate index values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "keep": "DropKeep"
                        }
                    },
                    "empty": {
                        "type": "property",
                        "info": "",
                        "returns": "bool"
                    },
                    "equals": {
                        "type": "function",
                        "info": "Determines if two Index objects contain the same elements.",
                        "returns": "bool",
                        "parameters": {
                            "other": "Any"
                        }
                    },
                    "factorize": {
                        "type": "function",
                        "info": "Encode the object as an enumerated type or categorical variable.",
                        "returns": "tuple[npt.NDArray[np.intp], Index]",
                        "parameters": {
                            "sort": "bool",
                            "use_na_sentinel": "bool"
                        }
                    },
                    "fillna": {
                        "type": "function",
                        "info": "Fill NA/NaN values with the specified value.",
                        "returns": "None",
                        "parameters": {
                            "value": "None",
                            "downcast": "None"
                        }
                    },
                    "floor": {
                        "type": "function",
                        "info": "Perform floor operation on the data to the specified `freq`.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "format": {
                        "type": "function",
                        "info": "Render a string representation of the Index.",
                        "returns": "list[str]",
                        "parameters": {
                            "name": "bool",
                            "formatter": "Callable | None",
                            "na_rep": "str",
                            "date_format": "str | None"
                        }
                    },
                    "freq": {
                        "type": "property",
                        "info": "",
                        "returns": "BaseOffset | None"
                    },
                    "freqstr": {
                        "type": "property",
                        "info": "Return the frequency object as a string if it's set, otherwise None.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "get_indexer": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "limit": "int | None",
                            "tolerance": "."
                        }
                    },
                    "get_indexer_for": {
                        "type": "function",
                        "info": "Guaranteed return of an indexer even when non-unique.",
                        "returns": "npt.NDArray[np.intp]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_indexer_non_unique": {
                        "type": "function",
                        "info": "Compute indexer and mask for new index given the current index.",
                        "returns": "tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]",
                        "parameters": {
                            "target": "."
                        }
                    },
                    "get_level_values": {
                        "type": "function",
                        "info": "Return an Index of values for requested level.",
                        "returns": "pd.Index",
                        "parameters": {
                            "level": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "get_loc": {
                        "type": "function",
                        "info": "Get integer location for requested label",
                        "returns": "None",
                        "parameters": {
                            "key": "None"
                        }
                    },
                    "get_slice_bound": {
                        "type": "function",
                        "info": "Calculate slice bound that corresponds to given label.",
                        "returns": "int",
                        "parameters": {
                            "label": "<class 'int'>",
                            "side": "Literal['left', 'right']"
                        }
                    },
                    "groupby": {
                        "type": "function",
                        "info": "Group the index labels by a given array of values.",
                        "returns": "PrettyDict[Hashable, np.ndarray]",
                        "parameters": {
                            "values": "."
                        }
                    },
                    "has_duplicates": {
                        "type": "property",
                        "info": "Check if the Index has duplicate values.",
                        "returns": "bool"
                    },
                    "hasnans": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "holds_integer": {
                        "type": "function",
                        "info": "Whether the type is an integer type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "identical": {
                        "type": "function",
                        "info": "Similar to equals, but checks that object attributes and types are also equal.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "infer_objects": {
                        "type": "function",
                        "info": "If we have an object dtype, try to infer a non-object dtype.",
                        "returns": "pd.Index",
                        "parameters": {
                            "copy": "bool"
                        }
                    },
                    "inferred_freq": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "inferred_type": {
                        "type": "property",
                        "info": "Return a string of the type inferred from the values.",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "insert": {
                        "type": "function",
                        "info": "Make new Index inserting new item at location.",
                        "returns": "None",
                        "parameters": {
                            "loc": "int",
                            "item": "None"
                        }
                    },
                    "intersection": {
                        "type": "function",
                        "info": "Form the intersection of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "bool"
                        }
                    },
                    "is_": {
                        "type": "function",
                        "info": "More flexible, faster check like ``is`` but that works through views.",
                        "returns": "bool",
                        "parameters": {
                            "other": "<class 'bool'>"
                        }
                    },
                    "is_boolean": {
                        "type": "function",
                        "info": "Check if the Index only consists of booleans.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_categorical": {
                        "type": "function",
                        "info": "Check if the Index holds categorical data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_floating": {
                        "type": "function",
                        "info": "Check if the Index is a floating type.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_integer": {
                        "type": "function",
                        "info": "Check if the Index only consists of integers.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_interval": {
                        "type": "function",
                        "info": "Check if the Index holds Interval objects.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_monotonic_decreasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or decreasing.",
                        "returns": "bool"
                    },
                    "is_monotonic_increasing": {
                        "type": "property",
                        "info": "Return a boolean if the values are equal or increasing.",
                        "returns": "bool"
                    },
                    "is_numeric": {
                        "type": "function",
                        "info": "Check if the Index only consists of numeric data.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_object": {
                        "type": "function",
                        "info": "Check if the Index is of the object dtype.",
                        "returns": "bool",
                        "parameters": {}
                    },
                    "is_unique": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "isin": {
                        "type": "function",
                        "info": "Return a boolean array where the index values are in `values`.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {
                            "values": ".",
                            "level": "."
                        }
                    },
                    "isna": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "isnull": {
                        "type": "function",
                        "info": "Detect missing values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "item": {
                        "type": "function",
                        "info": "Return the first element of the underlying data as a Python scalar.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "join": {
                        "type": "function",
                        "info": "Compute join_index and indexers to conform data structures to the new index.",
                        "returns": "pd.Index| tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "other": "Index",
                            "how": "JoinHow",
                            "level": "Level | None",
                            "return_indexers": "bool",
                            "sort": "bool"
                        }
                    },
                    "map": {
                        "type": "function",
                        "info": "Map values using an input mapping or function.",
                        "returns": "None",
                        "parameters": {
                            "mapper": "None",
                            "na_action": "Literal['ignore'] | None"
                        }
                    },
                    "max": {
                        "type": "function",
                        "info": "Return the maximum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "mean": {
                        "type": "function",
                        "info": "Return the mean value of the Array.",
                        "returns": "None",
                        "parameters": {
                            "skipna": "bool",
                            "axis": "int | None"
                        }
                    },
                    "median": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "memory_usage": {
                        "type": "function",
                        "info": "Memory usage of the values.",
                        "returns": "int",
                        "parameters": {
                            "deep": "bool"
                        }
                    },
                    "min": {
                        "type": "function",
                        "info": "Return the minimum value of the Index.",
                        "returns": "None",
                        "parameters": {
                            "axis": "None",
                            "skipna": "bool",
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "name": {
                        "type": "property",
                        "info": "Return Index or MultiIndex name.",
                        "returns": "Hashable"
                    },
                    "names": {
                        "type": "property",
                        "info": "",
                        "returns": "FrozenList"
                    },
                    "nbytes": {
                        "type": "property",
                        "info": "Return the number of bytes in the underlying data.",
                        "returns": "int"
                    },
                    "ndim": {
                        "type": "property",
                        "info": "Number of dimensions of the underlying data, by definition 1.",
                        "returns": "int"
                    },
                    "nlevels": {
                        "type": "property",
                        "info": "Number of levels.",
                        "returns": "int"
                    },
                    "notna": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "notnull": {
                        "type": "function",
                        "info": "Detect existing (non-missing) values.",
                        "returns": "npt.NDArray[np.bool_]",
                        "parameters": {}
                    },
                    "nunique": {
                        "type": "function",
                        "info": "Return number of unique elements in the object.",
                        "returns": "int",
                        "parameters": {
                            "dropna": "bool"
                        }
                    },
                    "putmask": {
                        "type": "function",
                        "info": "Return a new Index of the values set with the mask.",
                        "returns": "pd.Index",
                        "parameters": {
                            "mask": "<class 'pandas.core.indexes.base.Index'>",
                            "value": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "ravel": {
                        "type": "function",
                        "info": "Return a view on self.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "order": "str_t"
                        }
                    },
                    "reindex": {
                        "type": "function",
                        "info": "Create index with target's values.",
                        "returns": "tuple[Index, npt.NDArray[np.intp] | None]",
                        "parameters": {
                            "target": ".",
                            "method": "ReindexMethod | None",
                            "level": ".",
                            "limit": "int | None",
                            "tolerance": "float | None"
                        }
                    },
                    "repeat": {
                        "type": "function",
                        "info": "Repeat elements of a Index.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "repeats": "<class 'NoneType'>",
                            "axis": "None"
                        }
                    },
                    "resolution": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "round": {
                        "type": "function",
                        "info": "Perform round operation on the data to the specified `freq`.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "searchsorted": {
                        "type": "function",
                        "info": "Find indices where elements should be inserted to maintain order.",
                        "returns": "npt.NDArray[np.intp] | np.intp",
                        "parameters": {
                            "value": "NumpyValueArrayLike | ExtensionArray",
                            "side": "Literal['left', 'right']",
                            "sorter": "NumpySorter | None"
                        }
                    },
                    "shape": {
                        "type": "property",
                        "info": "Return a tuple of the shape of the underlying data.",
                        "returns": "Shape"
                    },
                    "shift": {
                        "type": "function",
                        "info": "Shift index by desired number of time frequency increments.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "periods": "int",
                            "freq": "."
                        }
                    },
                    "size": {
                        "type": "property",
                        "info": "Return the number of elements in the underlying data.",
                        "returns": "int"
                    },
                    "slice_indexer": {
                        "type": "function",
                        "info": "Compute the slice indexer for input labels and step.",
                        "returns": "slice",
                        "parameters": {
                            "start": "Hashable | None",
                            "end": "Hashable | None",
                            "step": "int | None"
                        }
                    },
                    "slice_locs": {
                        "type": "function",
                        "info": "Compute slice locations for input labels.",
                        "returns": "tuple[int, int]",
                        "parameters": {
                            "start": "tuple[int, int]",
                            "end": "tuple[int, int]",
                            "step": "tuple[int, int]"
                        }
                    },
                    "sort": {
                        "type": "function",
                        "info": "Use sort_values instead.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "sort_values": {
                        "type": "function",
                        "info": "Return a sorted copy of the index.",
                        "returns": "pd.TimedeltaIndex | tuple[pd.TimedeltaIndex, np.ndarray]",
                        "parameters": {
                            "return_indexer": "bool",
                            "ascending": "bool",
                            "na_position": "NaPosition",
                            "key": "Callable | None"
                        }
                    },
                    "sortlevel": {
                        "type": "function",
                        "info": "For internal compatibility with the Index API.",
                        "returns": "None",
                        "parameters": {
                            "level": "None",
                            "ascending": "bool | list[bool]",
                            "sort_remaining": "None",
                            "na_position": "NaPosition"
                        }
                    },
                    "std": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "sum": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "symmetric_difference": {
                        "type": "function",
                        "info": "Compute the symmetric difference of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "result_name": "None",
                            "sort": "None"
                        }
                    },
                    "take": {
                        "type": "function",
                        "info": "Return a new Index of the values selected by the indices.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "indices": ".",
                            "axis": "Axis",
                            "allow_fill": "bool",
                            "fill_value": ".",
                            "kwargs": "."
                        }
                    },
                    "to_flat_index": {
                        "type": "function",
                        "info": "Identity method.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {}
                    },
                    "to_frame": {
                        "type": "function",
                        "info": "Create a DataFrame with a column containing the Index.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "index": "bool",
                            "name": "Hashable"
                        }
                    },
                    "to_list": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "to_numpy": {
                        "type": "function",
                        "info": "A NumPy ndarray representing the values in this Series or Index.",
                        "returns": "np.ndarray",
                        "parameters": {
                            "dtype": "npt.DTypeLike | None",
                            "copy": "bool",
                            "na_value": "object",
                            "kwargs": "."
                        }
                    },
                    "to_pytimedelta": {
                        "type": "function",
                        "info": "Return an ndarray of datetime.timedelta objects.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "to_series": {
                        "type": "function",
                        "info": "Create a Series with both index and values equal to the index keys.",
                        "returns": "pd.Series",
                        "parameters": {
                            "index": ".",
                            "name": "Hashable | None"
                        }
                    },
                    "tolist": {
                        "type": "function",
                        "info": "Return a list of the values.",
                        "returns": "None",
                        "parameters": {}
                    },
                    "total_seconds": {
                        "type": "function",
                        "info": "Return total duration of each element expressed in seconds.",
                        "returns": "None",
                        "parameters": {
                            "args": "None",
                            "kwargs": "None"
                        }
                    },
                    "transpose": {
                        "type": "function",
                        "info": "Return the transpose, which is by definition self.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "args": "<class 'NoneType'>",
                            "kwargs": "<class 'NoneType'>"
                        }
                    },
                    "union": {
                        "type": "function",
                        "info": "Form the union of two Index objects.",
                        "returns": "None",
                        "parameters": {
                            "other": "None",
                            "sort": "None"
                        }
                    },
                    "unique": {
                        "type": "function",
                        "info": "Return unique values in the index.",
                        "returns": "pd.TimedeltaIndex",
                        "parameters": {
                            "level": "Hashable | None"
                        }
                    },
                    "unit": {
                        "type": "property",
                        "info": "",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "value_counts": {
                        "type": "function",
                        "info": "Return a Series containing counts of unique values.",
                        "returns": "pd.Series",
                        "parameters": {
                            "normalize": "bool",
                            "sort": "bool",
                            "ascending": "bool",
                            "bins": ".",
                            "dropna": "bool"
                        }
                    },
                    "values": {
                        "type": "property",
                        "info": "Return an array representing the data in the Index.",
                        "returns": "np.ndarray"
                    },
                    "view": {
                        "type": "function",
                        "info": "",
                        "returns": "None",
                        "parameters": {
                            "cls": "None"
                        }
                    },
                    "where": {
                        "type": "function",
                        "info": "Replace values where the condition is False.",
                        "returns": "pd.Index",
                        "parameters": {
                            "cond": "<class 'pandas.core.indexes.base.Index'>",
                            "other": "<class 'pandas.core.indexes.base.Index'>"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "Timestamp": {
                "type": "class",
                "info": "Pandas replacement for python datetime.datetime object.",
                "returns": "pd.Timestamp",
                "items": {
                    "as_unit": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "asm8": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "astimezone": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "ceil": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "combine": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "ctime": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "date": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "day": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "day_name": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "day_of_week": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "day_of_year": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "dayofweek": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "dayofyear": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "days_in_month": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "daysinmonth": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "dst": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "floor": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "fold": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "fromisocalendar": {
                        "type": "object",
                        "info": "",
                        "returns": "builtin_function_or_method"
                    },
                    "fromisoformat": {
                        "type": "object",
                        "info": "",
                        "returns": "builtin_function_or_method"
                    },
                    "fromordinal": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "fromtimestamp": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "hour": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "is_leap_year": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "is_month_end": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "is_month_start": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "is_quarter_end": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "is_quarter_start": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "is_year_end": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "is_year_start": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "isocalendar": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "isoformat": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "isoweekday": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "max": {
                        "type": "object",
                        "info": "Pandas replacement for python datetime.datetime object.",
                        "returns": "pd.Timestamp"
                    },
                    "microsecond": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "min": {
                        "type": "object",
                        "info": "Pandas replacement for python datetime.datetime object.",
                        "returns": "pd.Timestamp"
                    },
                    "minute": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "month": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "month_name": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "nanosecond": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "normalize": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "now": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "quarter": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "replace": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "resolution": {
                        "type": "object",
                        "info": "Represents a duration, the difference between two dates or times.",
                        "returns": "pd.Timedelta"
                    },
                    "round": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "second": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "strftime": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "strptime": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "time": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "timestamp": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "timetuple": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "timetz": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "to_datetime64": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "to_julian_date": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "to_numpy": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "to_period": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "to_pydatetime": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "today": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "toordinal": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "tz_convert": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "tz_localize": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "tzinfo": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "tzname": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "unit": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "utcfromtimestamp": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "utcnow": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "utcoffset": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "utctimetuple": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "value": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "week": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "weekday": {
                        "type": "object",
                        "info": "",
                        "returns": "_cython_3_1_1.cython_function_or_method"
                    },
                    "weekofyear": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "year": {
                        "type": "object",
                        "info": "",
                        "returns": "getset_descriptor"
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "UInt16Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for uint16 integer data.",
                "returns": "pd.UInt16Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Unsigned integer type, compatible with C ``unsigned short``.",
                        "returns": "numpy.uint16",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "bit_count": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "denominator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "numerator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "UInt32Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for uint32 integer data.",
                "returns": "pd.UInt32Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Unsigned integer type, compatible with C ``unsigned int``.",
                        "returns": "numpy.uint32",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "bit_count": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "denominator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "numerator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "UInt64Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for uint64 integer data.",
                "returns": "pd.UInt64Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Unsigned integer type, compatible with C ``unsigned long``.",
                        "returns": "numpy.uint64",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "bit_count": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "denominator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "numerator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "UInt8Dtype": {
                "type": "class",
                "info": "An ExtensionDtype for uint8 integer data.",
                "returns": "pd.UInt8Dtype",
                "items": {
                    "name": {
                        "type": "object",
                        "info": "str(object='') -> str",
                        "returns": "pd.CategoricalIndex.str"
                    },
                    "construct_array_type": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "construct_from_string": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "empty": {
                        "type": "function",
                        "info": "Construct an ExtensionArray of this dtype with the given shape.",
                        "returns": "ExtensionArray",
                        "parameters": {
                            "shape": "Shape"
                        }
                    },
                    "from_numpy_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "index_class": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_dtype": {
                        "type": "object",
                        "info": "Create a bound instance method object.",
                        "returns": "method"
                    },
                    "is_signed_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "is_unsigned_integer": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "itemsize": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "kind": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "na_value": {
                        "type": "property",
                        "info": "Default NA value to use for this type.",
                        "returns": "libmissing.NAType"
                    },
                    "names": {
                        "type": "property",
                        "info": "Ordered list of field names, or None if there are no fields.",
                        "returns": "list[str] | None"
                    },
                    "numpy_dtype": {
                        "type": "object",
                        "info": "",
                        "returns": "pandas._libs.properties.CachedProperty"
                    },
                    "type": {
                        "type": "class",
                        "info": "Unsigned integer type, compatible with C ``unsigned char``.",
                        "returns": "numpy.uint8",
                        "items": {
                            "T": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "__getitem__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            },
                            "all": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "any": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmax": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argmin": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "argsort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "astype": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "base": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "bit_count": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "byteswap": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "choose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "clip": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "compress": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conj": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "conjugate": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "copy": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumprod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "cumsum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "data": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "denominator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "diagonal": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dtype": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "dump": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "dumps": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "fill": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "flags": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flat": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "flatten": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "getfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "imag": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "is_integer": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "item": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemset": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "itemsize": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "max": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "mean": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "min": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nbytes": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "ndim": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "newbyteorder": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "nonzero": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "numerator": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "prod": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ptp": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "put": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "ravel": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "real": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "repeat": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "reshape": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "resize": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "round": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "searchsorted": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setfield": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "setflags": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "shape": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "size": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sort": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "squeeze": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "std": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "strides": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "sum": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "swapaxes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "take": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tobytes": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tofile": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tolist": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "tostring": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "trace": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "transpose": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "var": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "view": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "annotations": {
                "type": "object",
                "info": "",
                "returns": "__future__._Feature"
            },
            "array": {
                "type": "function",
                "info": "Create an array.",
                "returns": "ExtensionArray",
                "parameters": {
                    "data": "Sequence[object] | AnyArrayLike",
                    "dtype": "Dtype | None",
                    "copy": "bool"
                }
            },
            "bdate_range": {
                "type": "function",
                "info": "Return a fixed frequency DatetimeIndex with business day as the default.",
                "returns": "pd.DatetimeIndex",
                "parameters": {
                    "start": ".",
                    "end": ".",
                    "periods": "int | None",
                    "freq": "Frequency | dt.timedelta",
                    "tz": ".",
                    "normalize": "bool",
                    "name": "Hashable | None",
                    "weekmask": ".",
                    "holidays": ".",
                    "inclusive": "IntervalClosedType",
                    "kwargs": "."
                }
            },
            "concat": {
                "type": "function",
                "info": "Concatenate pandas objects along a particular axis.",
                "returns": "pd.DataFrame|pd.Series",
                "parameters": {
                    "objs": "Iterable[Series | DataFrame] | Mapping[HashableT, Series | DataFrame]",
                    "axis": "Axis",
                    "join": "str",
                    "ignore_index": "bool",
                    "keys": "Iterable[Hashable] | None",
                    "levels": ".",
                    "names": "list[HashableT] | None",
                    "verify_integrity": "bool",
                    "sort": "bool",
                    "copy": "bool | None"
                }
            },
            "crosstab": {
                "type": "function",
                "info": "Compute a simple cross tabulation of two (or more) factors.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "index": ".",
                    "columns": ".",
                    "values": ".",
                    "rownames": ".",
                    "colnames": ".",
                    "aggfunc": ".",
                    "margins": "bool",
                    "margins_name": "Hashable",
                    "dropna": "bool",
                    "normalize": "bool | Literal[0, 1, 'all', 'index', 'columns']"
                }
            },
            "cut": {
                "type": "function",
                "info": "Bin values into discrete intervals.",
                "returns": "None",
                "parameters": {
                    "x": "None",
                    "bins": "None",
                    "right": "bool",
                    "labels": "None",
                    "retbins": "bool",
                    "precision": "int",
                    "include_lowest": "bool",
                    "duplicates": "str",
                    "ordered": "bool"
                }
            },
            "date_range": {
                "type": "function",
                "info": "Return a fixed frequency DatetimeIndex.",
                "returns": "pd.DatetimeIndex",
                "parameters": {
                    "start": ".",
                    "end": ".",
                    "periods": ".",
                    "freq": ".",
                    "tz": ".",
                    "normalize": "bool",
                    "name": "Hashable | None",
                    "inclusive": "IntervalClosedType",
                    "unit": "str | None",
                    "kwargs": "."
                }
            },
            "describe_option": {
                "type": "object",
                "info": "",
                "returns": "pandas._config.config.CallableDynamicDoc"
            },
            "eval": {
                "type": "function",
                "info": "Evaluate a Python expression as a string using various backends.",
                "returns": ".",
                "parameters": {
                    "expr": "str | BinOp",
                    "parser": "str",
                    "engine": "str | None",
                    "local_dict": ".",
                    "global_dict": ".",
                    "resolvers": ".",
                    "level": "int",
                    "target": ".",
                    "inplace": "bool"
                }
            },
            "factorize": {
                "type": "function",
                "info": "Encode the object as an enumerated type or categorical variable.",
                "returns": "tuple[np.ndarray, np.ndarray | Index]",
                "parameters": {
                    "values": ".",
                    "sort": "bool",
                    "use_na_sentinel": "bool",
                    "size_hint": "int | None"
                }
            },
            "from_dummies": {
                "type": "function",
                "info": "Create a categorical ``DataFrame`` from a ``DataFrame`` of dummy variables.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "data": "DataFrame",
                    "sep": "None | str",
                    "default_category": "None | Hashable | dict[str, Hashable]"
                }
            },
            "get_dummies": {
                "type": "function",
                "info": "Convert categorical variable into dummy/indicator variables.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "data": ".",
                    "prefix": ".",
                    "prefix_sep": "str | Iterable[str] | dict[str, str]",
                    "dummy_na": "bool",
                    "columns": ".",
                    "sparse": "bool",
                    "drop_first": "bool",
                    "dtype": "NpDtype | None"
                }
            },
            "get_option": {
                "type": "object",
                "info": "",
                "returns": "pandas._config.config.CallableDynamicDoc"
            },
            "infer_freq": {
                "type": "function",
                "info": "Infer the most likely frequency given the input index.",
                "returns": "pd.CategoricalIndex.str| None",
                "parameters": {
                    "index": "DatetimeIndex | TimedeltaIndex | Series | DatetimeLikeArrayMixin"
                }
            },
            "interval_range": {
                "type": "function",
                "info": "Return a fixed frequency IntervalIndex.",
                "returns": "pd.IntervalIndex",
                "parameters": {
                    "start": ".",
                    "end": ".",
                    "periods": ".",
                    "freq": ".",
                    "name": "Hashable | None",
                    "closed": "IntervalClosedType"
                }
            },
            "isna": {
                "type": "function",
                "info": "Detect missing values for an array-like object.",
                "returns": "bool | npt.NDArray[np.bool_] | NDFrame",
                "parameters": {
                    "obj": "object"
                }
            },
            "isnull": {
                "type": "function",
                "info": "Detect missing values for an array-like object.",
                "returns": "bool | npt.NDArray[np.bool_] | NDFrame",
                "parameters": {
                    "obj": "object"
                }
            },
            "json_normalize": {
                "type": "function",
                "info": "Normalize semi-structured JSON data into a flat table.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "data": "dict | list[dict]",
                    "record_path": "str | list | None",
                    "meta": "str | list[str | list[str]] | None",
                    "meta_prefix": "str | None",
                    "record_prefix": "str | None",
                    "errors": "IgnoreRaise",
                    "sep": "str",
                    "max_level": "int | None"
                }
            },
            "lreshape": {
                "type": "function",
                "info": "Reshape wide-format data to long. Generalized inverse of DataFrame.pivot.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "data": "DataFrame",
                    "groups": "dict",
                    "dropna": "bool"
                }
            },
            "melt": {
                "type": "function",
                "info": "Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "frame": "DataFrame",
                    "id_vars": ".",
                    "value_vars": ".",
                    "var_name": ".",
                    "value_name": "Hashable",
                    "col_level": ".",
                    "ignore_index": "bool"
                }
            },
            "merge": {
                "type": "function",
                "info": "Merge DataFrame or named Series objects with a database-style join.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "left": "DataFrame | Series",
                    "right": "DataFrame | Series",
                    "how": "MergeHow",
                    "on": "IndexLabel | AnyArrayLike | None",
                    "left_on": "IndexLabel | AnyArrayLike | None",
                    "right_on": "IndexLabel | AnyArrayLike | None",
                    "left_index": "bool",
                    "right_index": "bool",
                    "sort": "bool",
                    "suffixes": "Suffixes",
                    "copy": "bool | None",
                    "indicator": "str | bool",
                    "validate": "str | None"
                }
            },
            "merge_asof": {
                "type": "function",
                "info": "Perform a merge by key distance.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "left": "DataFrame | Series",
                    "right": "DataFrame | Series",
                    "on": "IndexLabel | None",
                    "left_on": "IndexLabel | None",
                    "right_on": "IndexLabel | None",
                    "left_index": "bool",
                    "right_index": "bool",
                    "by": ".",
                    "left_by": ".",
                    "right_by": ".",
                    "suffixes": "Suffixes",
                    "tolerance": "int | Timedelta | None",
                    "allow_exact_matches": "bool",
                    "direction": "str"
                }
            },
            "merge_ordered": {
                "type": "function",
                "info": "Perform a merge for ordered data with optional filling/interpolation.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "left": "DataFrame | Series",
                    "right": "DataFrame | Series",
                    "on": "IndexLabel | None",
                    "left_on": "IndexLabel | None",
                    "right_on": "IndexLabel | None",
                    "left_by": ".",
                    "right_by": ".",
                    "fill_method": "str | None",
                    "suffixes": "Suffixes",
                    "how": "JoinHow"
                }
            },
            "notna": {
                "type": "function",
                "info": "Detect non-missing values for an array-like object.",
                "returns": "bool | npt.NDArray[np.bool_] | NDFrame",
                "parameters": {
                    "obj": "object"
                }
            },
            "notnull": {
                "type": "function",
                "info": "Detect non-missing values for an array-like object.",
                "returns": "bool | npt.NDArray[np.bool_] | NDFrame",
                "parameters": {
                    "obj": "object"
                }
            },
            "option_context": {
                "type": "class",
                "info": "Context manager to temporarily set options in the `with` statement context.",
                "returns": "pd.option_context",
                "items": {
                    "__call__": {
                        "type": "function",
                        "info": "Call self as a function.",
                        "returns": "None",
                        "parameters": {
                            "func": "None"
                        }
                    },
                    "__init__": {
                        "type": "function",
                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                        "returns": "None",
                        "parameters": {
                            "args": "<class 'NoneType'>"
                        }
                    }
                }
            },
            "options": {
                "type": "object",
                "info": "provide attribute-style access to a nested dict",
                "returns": "pandas._config.config.DictWrapper"
            },
            "period_range": {
                "type": "function",
                "info": "Return a fixed frequency PeriodIndex.",
                "returns": "pd.PeriodIndex",
                "parameters": {
                    "start": ".",
                    "end": ".",
                    "periods": "int | None",
                    "freq": ".",
                    "name": "Hashable | None"
                }
            },
            "pivot": {
                "type": "function",
                "info": "Return reshaped DataFrame organized by given index / column values.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "data": "DataFrame",
                    "columns": "IndexLabel",
                    "index": "IndexLabel | lib.NoDefault",
                    "values": "IndexLabel | lib.NoDefault"
                }
            },
            "pivot_table": {
                "type": "function",
                "info": "Create a spreadsheet-style pivot table as a DataFrame.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "data": "DataFrame",
                    "values": ".",
                    "index": ".",
                    "columns": ".",
                    "aggfunc": "AggFuncType",
                    "fill_value": ".",
                    "margins": "bool",
                    "dropna": "bool",
                    "margins_name": "Hashable",
                    "observed": "bool | lib.NoDefault",
                    "sort": "bool"
                }
            },
            "qcut": {
                "type": "function",
                "info": "Quantile-based discretization function.",
                "returns": "None",
                "parameters": {
                    "x": "None",
                    "q": "None",
                    "labels": "None",
                    "retbins": "bool",
                    "precision": "int",
                    "duplicates": "str"
                }
            },
            "read_clipboard": {
                "type": "function",
                "info": "Read text from clipboard and pass to :func:`~pandas.read_csv`.",
                "returns": ".",
                "parameters": {
                    "sep": "str",
                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                    "kwargs": "."
                }
            },
            "read_csv": {
                "type": "function",
                "info": "Read a comma-separated values (csv) file into DataFrame.",
                "returns": "pd.DataFrame| TextFileReader",
                "parameters": {
                    "filepath_or_buffer": "FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]",
                    "sep": "str | None | lib.NoDefault",
                    "delimiter": "str | None | lib.NoDefault",
                    "header": "int | Sequence[int] | None | Literal['infer']",
                    "names": "Sequence[Hashable] | None | lib.NoDefault",
                    "index_col": "IndexLabel | Literal[False] | None",
                    "usecols": "UsecolsArgType",
                    "dtype": "DtypeArg | None",
                    "engine": "CSVEngine | None",
                    "converters": "Mapping[Hashable, Callable] | None",
                    "true_values": "list | None",
                    "false_values": "list | None",
                    "skipinitialspace": "bool",
                    "skiprows": "list[int] | int | Callable[[Hashable], bool] | None",
                    "skipfooter": "int",
                    "nrows": "int | None",
                    "na_values": "Hashable | Iterable[Hashable] | Mapping[Hashable, Iterable[Hashable]] | None",
                    "keep_default_na": "bool",
                    "na_filter": "bool",
                    "verbose": "bool | lib.NoDefault",
                    "skip_blank_lines": "bool",
                    "parse_dates": "bool | Sequence[Hashable] | None",
                    "infer_datetime_format": "bool | lib.NoDefault",
                    "keep_date_col": "bool | lib.NoDefault",
                    "date_parser": "Callable | lib.NoDefault",
                    "date_format": "str | dict[Hashable, str] | None",
                    "dayfirst": "bool",
                    "cache_dates": "bool",
                    "iterator": "bool",
                    "chunksize": "int | None",
                    "compression": "CompressionOptions",
                    "thousands": "str | None",
                    "decimal": "str",
                    "lineterminator": "str | None",
                    "quotechar": "str",
                    "quoting": "int",
                    "doublequote": "bool",
                    "escapechar": "str | None",
                    "comment": "str | None",
                    "encoding": "str | None",
                    "encoding_errors": "str | None",
                    "dialect": "str | csv.Dialect | None",
                    "on_bad_lines": "str",
                    "delim_whitespace": "bool | lib.NoDefault",
                    "low_memory": "bool",
                    "memory_map": "bool",
                    "float_precision": "Literal['high', 'legacy'] | None",
                    "storage_options": "StorageOptions | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault"
                }
            },
            "read_excel": {
                "type": "function",
                "info": "Read an Excel file into a ``pandas`` ``DataFrame``.",
                "returns": "pd.DataFrame| dict[IntStrT, DataFrame]",
                "parameters": {
                    "io": ".",
                    "sheet_name": "str | int | list[IntStrT] | None",
                    "header": "int | Sequence[int] | None",
                    "names": "SequenceNotStr[Hashable] | range | None",
                    "index_col": "int | str | Sequence[int] | None",
                    "usecols": "int | str | Sequence[int] | Sequence[str] | Callable[[str], bool] | None",
                    "dtype": "DtypeArg | None",
                    "engine": "Literal['xlrd', 'openpyxl', 'odf', 'pyxlsb', 'calamine'] | None",
                    "converters": "dict[str, Callable] | dict[int, Callable] | None",
                    "true_values": "Iterable[Hashable] | None",
                    "false_values": "Iterable[Hashable] | None",
                    "skiprows": "Sequence[int] | int | Callable[[int], object] | None",
                    "nrows": "int | None",
                    "na_values": ".",
                    "keep_default_na": "bool",
                    "na_filter": "bool",
                    "verbose": "bool",
                    "parse_dates": "list | dict | bool",
                    "date_parser": "Callable | lib.NoDefault",
                    "date_format": "dict[Hashable, str] | str | None",
                    "thousands": "str | None",
                    "decimal": "str",
                    "comment": "str | None",
                    "skipfooter": "int",
                    "storage_options": "StorageOptions | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                    "engine_kwargs": "dict | None"
                }
            },
            "read_feather": {
                "type": "function",
                "info": "Load a feather-format object from the file path.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "path": "FilePath | ReadBuffer[bytes]",
                    "columns": "Sequence[Hashable] | None",
                    "use_threads": "bool",
                    "storage_options": "StorageOptions | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault"
                }
            },
            "read_fwf": {
                "type": "function",
                "info": "Read a table of fixed-width formatted lines into DataFrame.",
                "returns": "pd.DataFrame| TextFileReader",
                "parameters": {
                    "filepath_or_buffer": "FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]",
                    "colspecs": "Sequence[tuple[int, int]] | str | None",
                    "widths": "Sequence[int] | None",
                    "infer_nrows": "int",
                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                    "iterator": "bool",
                    "chunksize": "int | None",
                    "kwds": "."
                }
            },
            "read_gbq": {
                "type": "function",
                "info": "Load data from Google BigQuery.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "query": "str",
                    "project_id": "str | None",
                    "index_col": "str | None",
                    "col_order": "list[str] | None",
                    "reauth": "bool",
                    "auth_local_webserver": "bool",
                    "dialect": "str | None",
                    "location": "str | None",
                    "configuration": "dict[str, Any] | None",
                    "credentials": "Credentials | None",
                    "use_bqstorage_api": "bool | None",
                    "max_results": "int | None",
                    "progress_bar_type": "str | None"
                }
            },
            "read_hdf": {
                "type": "function",
                "info": "Read from the store, close it if we opened it.",
                "returns": ".",
                "parameters": {
                    "path_or_buf": "FilePath | HDFStore",
                    "key": ".",
                    "mode": "str",
                    "errors": "str",
                    "where": "str | list | None",
                    "start": "int | None",
                    "stop": "int | None",
                    "columns": "list[str] | None",
                    "iterator": "bool",
                    "chunksize": "int | None",
                    "kwargs": "."
                }
            },
            "read_html": {
                "type": "function",
                "info": "Read HTML tables into a ``list`` of ``DataFrame`` objects.",
                "returns": "list[DataFrame]",
                "parameters": {
                    "io": "FilePath | ReadBuffer[str]",
                    "match": "str | Pattern",
                    "flavor": "HTMLFlavors | Sequence[HTMLFlavors] | None",
                    "header": "int | Sequence[int] | None",
                    "index_col": "int | Sequence[int] | None",
                    "skiprows": "int | Sequence[int] | slice | None",
                    "attrs": "dict[str, str] | None",
                    "parse_dates": "bool",
                    "thousands": "str | None",
                    "encoding": "str | None",
                    "decimal": "str",
                    "converters": "dict | None",
                    "na_values": "Iterable[object] | None",
                    "keep_default_na": "bool",
                    "displayed_only": "bool",
                    "extract_links": "Literal[None, 'header', 'footer', 'body', 'all']",
                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                    "storage_options": "StorageOptions"
                }
            },
            "read_json": {
                "type": "function",
                "info": "Convert a JSON string to pandas object.",
                "returns": "pd.DataFrame|pd.Series| JsonReader",
                "parameters": {
                    "path_or_buf": "FilePath | ReadBuffer[str] | ReadBuffer[bytes]",
                    "orient": "str | None",
                    "typ": "Literal['frame', 'series']",
                    "dtype": "DtypeArg | None",
                    "convert_axes": "bool | None",
                    "convert_dates": "bool | list[str]",
                    "keep_default_dates": "bool",
                    "precise_float": "bool",
                    "date_unit": "str | None",
                    "encoding": "str | None",
                    "encoding_errors": "str | None",
                    "lines": "bool",
                    "chunksize": "int | None",
                    "compression": "CompressionOptions",
                    "nrows": "int | None",
                    "storage_options": "StorageOptions | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                    "engine": "JSONEngine"
                }
            },
            "read_orc": {
                "type": "function",
                "info": "Load an ORC object from the file path, returning a DataFrame.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "path": "FilePath | ReadBuffer[bytes]",
                    "columns": "list[str] | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                    "filesystem": "pyarrow.fs.FileSystem | fsspec.spec.AbstractFileSystem | None",
                    "kwargs": "Any"
                }
            },
            "read_parquet": {
                "type": "function",
                "info": "Load a parquet object from the file path, returning a DataFrame.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "path": "FilePath | ReadBuffer[bytes]",
                    "engine": "str",
                    "columns": "list[str] | None",
                    "storage_options": "StorageOptions | None",
                    "use_nullable_dtypes": "bool | lib.NoDefault",
                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                    "filesystem": "Any",
                    "filters": "list[tuple] | list[list[tuple]] | None",
                    "kwargs": "."
                }
            },
            "read_pickle": {
                "type": "function",
                "info": "Load pickled pandas object (or any object) from file.",
                "returns": "pd.DataFrame|pd.Series",
                "parameters": {
                    "filepath_or_buffer": "FilePath | ReadPickleBuffer",
                    "compression": "CompressionOptions",
                    "storage_options": "StorageOptions | None"
                }
            },
            "read_sas": {
                "type": "function",
                "info": "Read SAS files stored as either XPORT or SAS7BDAT format files.",
                "returns": "pd.DataFrame| ReaderBase",
                "parameters": {
                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                    "format": "str | None",
                    "index": "Hashable | None",
                    "encoding": "str | None",
                    "chunksize": "int | None",
                    "iterator": "bool",
                    "compression": "CompressionOptions"
                }
            },
            "read_spss": {
                "type": "function",
                "info": "Load an SPSS file from the file path, returning a DataFrame.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "path": "str | Path",
                    "usecols": "Sequence[str] | None",
                    "convert_categoricals": "bool",
                    "dtype_backend": "DtypeBackend | lib.NoDefault"
                }
            },
            "read_sql": {
                "type": "function",
                "info": "Read SQL query or database table into a DataFrame.",
                "returns": "pd.DataFrame| Iterator[DataFrame]",
                "parameters": {
                    "sql": ".",
                    "con": ".",
                    "index_col": "str | list[str] | None",
                    "coerce_float": "bool",
                    "params": ".",
                    "parse_dates": ".",
                    "columns": "list[str] | None",
                    "chunksize": "int | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault",
                    "dtype": "DtypeArg | None"
                }
            },
            "read_sql_query": {
                "type": "function",
                "info": "Read SQL query into a DataFrame.",
                "returns": "pd.DataFrame| Iterator[DataFrame]",
                "parameters": {
                    "sql": ".",
                    "con": ".",
                    "index_col": "str | list[str] | None",
                    "coerce_float": "bool",
                    "params": "list[Any] | Mapping[str, Any] | None",
                    "parse_dates": "list[str] | dict[str, str] | None",
                    "chunksize": "int | None",
                    "dtype": "DtypeArg | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault"
                }
            },
            "read_sql_table": {
                "type": "function",
                "info": "Read SQL database table into a DataFrame.",
                "returns": "pd.DataFrame| Iterator[DataFrame]",
                "parameters": {
                    "table_name": "str",
                    "con": ".",
                    "schema": "str | None",
                    "index_col": "str | list[str] | None",
                    "coerce_float": "bool",
                    "parse_dates": "list[str] | dict[str, str] | None",
                    "columns": "list[str] | None",
                    "chunksize": "int | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault"
                }
            },
            "read_stata": {
                "type": "function",
                "info": "Read Stata file into DataFrame.",
                "returns": "pd.DataFrame| StataReader",
                "parameters": {
                    "filepath_or_buffer": "FilePath | ReadBuffer[bytes]",
                    "convert_dates": "bool",
                    "convert_categoricals": "bool",
                    "index_col": "str | None",
                    "convert_missing": "bool",
                    "preserve_dtypes": "bool",
                    "columns": "Sequence[str] | None",
                    "order_categoricals": "bool",
                    "chunksize": "int | None",
                    "iterator": "bool",
                    "compression": "CompressionOptions",
                    "storage_options": "StorageOptions | None"
                }
            },
            "read_table": {
                "type": "function",
                "info": "Read general delimited file into DataFrame.",
                "returns": "pd.DataFrame| TextFileReader",
                "parameters": {
                    "filepath_or_buffer": "FilePath | ReadCsvBuffer[bytes] | ReadCsvBuffer[str]",
                    "sep": "str | None | lib.NoDefault",
                    "delimiter": "str | None | lib.NoDefault",
                    "header": "int | Sequence[int] | None | Literal['infer']",
                    "names": "Sequence[Hashable] | None | lib.NoDefault",
                    "index_col": "IndexLabel | Literal[False] | None",
                    "usecols": "UsecolsArgType",
                    "dtype": "DtypeArg | None",
                    "engine": "CSVEngine | None",
                    "converters": "Mapping[Hashable, Callable] | None",
                    "true_values": "list | None",
                    "false_values": "list | None",
                    "skipinitialspace": "bool",
                    "skiprows": "list[int] | int | Callable[[Hashable], bool] | None",
                    "skipfooter": "int",
                    "nrows": "int | None",
                    "na_values": "Sequence[str] | Mapping[str, Sequence[str]] | None",
                    "keep_default_na": "bool",
                    "na_filter": "bool",
                    "verbose": "bool | lib.NoDefault",
                    "skip_blank_lines": "bool",
                    "parse_dates": "bool | Sequence[Hashable]",
                    "infer_datetime_format": "bool | lib.NoDefault",
                    "keep_date_col": "bool | lib.NoDefault",
                    "date_parser": "Callable | lib.NoDefault",
                    "date_format": "str | dict[Hashable, str] | None",
                    "dayfirst": "bool",
                    "cache_dates": "bool",
                    "iterator": "bool",
                    "chunksize": "int | None",
                    "compression": "CompressionOptions",
                    "thousands": "str | None",
                    "decimal": "str",
                    "lineterminator": "str | None",
                    "quotechar": "str",
                    "quoting": "int",
                    "doublequote": "bool",
                    "escapechar": "str | None",
                    "comment": "str | None",
                    "encoding": "str | None",
                    "encoding_errors": "str | None",
                    "dialect": "str | csv.Dialect | None",
                    "on_bad_lines": "str",
                    "delim_whitespace": "bool | lib.NoDefault",
                    "low_memory": "bool",
                    "memory_map": "bool",
                    "float_precision": "str | None",
                    "storage_options": "StorageOptions | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault"
                }
            },
            "read_xml": {
                "type": "function",
                "info": "Read XML document into a :class:`~pandas.DataFrame` object.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "path_or_buffer": "FilePath | ReadBuffer[bytes] | ReadBuffer[str]",
                    "xpath": "str",
                    "namespaces": "dict[str, str] | None",
                    "elems_only": "bool",
                    "attrs_only": "bool",
                    "names": "Sequence[str] | None",
                    "dtype": "DtypeArg | None",
                    "converters": "ConvertersArg | None",
                    "parse_dates": "ParseDatesArg | None",
                    "encoding": "str | None",
                    "parser": "XMLParsers",
                    "stylesheet": "FilePath | ReadBuffer[bytes] | ReadBuffer[str] | None",
                    "iterparse": "dict[str, list[str]] | None",
                    "compression": "CompressionOptions",
                    "storage_options": "StorageOptions | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault"
                }
            },
            "reset_option": {
                "type": "object",
                "info": "",
                "returns": "pandas._config.config.CallableDynamicDoc"
            },
            "set_eng_float_format": {
                "type": "function",
                "info": "Format float representation in DataFrame with SI notation.",
                "returns": "None",
                "parameters": {
                    "accuracy": "int",
                    "use_eng_prefix": "bool"
                }
            },
            "set_option": {
                "type": "object",
                "info": "",
                "returns": "pandas._config.config.CallableDynamicDoc"
            },
            "show_versions": {
                "type": "function",
                "info": "Provide useful information, important for bug reports.",
                "returns": "None",
                "parameters": {
                    "as_json": "str | bool"
                }
            },
            "test": {
                "type": "function",
                "info": "Run the pandas test suite using pytest.",
                "returns": "None",
                "parameters": {
                    "extra_args": "list[str] | None",
                    "run_doctests": "bool"
                }
            },
            "timedelta_range": {
                "type": "function",
                "info": "Return a fixed frequency TimedeltaIndex with day as the default.",
                "returns": "pd.TimedeltaIndex",
                "parameters": {
                    "start": "<class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>",
                    "end": "<class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>",
                    "periods": "int | None",
                    "freq": "<class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>",
                    "name": "<class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>",
                    "closed": "<class 'pandas.core.indexes.timedeltas.TimedeltaIndex'>",
                    "unit": "str | None"
                }
            },
            "to_datetime": {
                "type": "function",
                "info": "Convert argument to datetime.",
                "returns": "pd.DatetimeIndex|pd.Series| DatetimeScalar | NaTType | None",
                "parameters": {
                    "arg": "DatetimeScalarOrArrayConvertible | DictConvertible",
                    "errors": "DateTimeErrorChoices",
                    "dayfirst": "bool",
                    "yearfirst": "bool",
                    "utc": "bool",
                    "format": "str | None",
                    "exact": "bool | lib.NoDefault",
                    "unit": "str | None",
                    "infer_datetime_format": "lib.NoDefault | bool",
                    "origin": "str",
                    "cache": "bool"
                }
            },
            "to_numeric": {
                "type": "function",
                "info": "Convert argument to a numeric type.",
                "returns": ".",
                "parameters": {
                    "arg": ".",
                    "errors": "DateTimeErrorChoices",
                    "downcast": "Literal['integer', 'signed', 'unsigned', 'float'] | None",
                    "dtype_backend": "DtypeBackend | lib.NoDefault"
                }
            },
            "to_pickle": {
                "type": "function",
                "info": "Pickle (serialize) object to file.",
                "returns": "None",
                "parameters": {
                    "obj": "Any",
                    "filepath_or_buffer": "FilePath | WriteBuffer[bytes]",
                    "compression": "CompressionOptions",
                    "protocol": "int",
                    "storage_options": "StorageOptions | None"
                }
            },
            "to_timedelta": {
                "type": "function",
                "info": "Convert argument to timedelta.",
                "returns": "pd.Timedelta|pd.TimedeltaIndex|pd.Series",
                "parameters": {
                    "arg": "str | int | float | timedelta | list | tuple | range | ArrayLike | Index | Series",
                    "unit": "UnitChoices | None",
                    "errors": "DateTimeErrorChoices"
                }
            },
            "unique": {
                "type": "function",
                "info": "Return unique values based on a hash table.",
                "returns": "None",
                "parameters": {
                    "values": "None"
                }
            },
            "value_counts": {
                "type": "function",
                "info": "Compute a histogram of the counts of non-null values.",
                "returns": "pd.Series",
                "parameters": {
                    "values": ".",
                    "sort": "bool",
                    "ascending": "bool",
                    "normalize": "bool",
                    "bins": ".",
                    "dropna": "bool"
                }
            },
            "wide_to_long": {
                "type": "function",
                "info": "Unpivot a DataFrame from wide to long format.",
                "returns": "pd.DataFrame",
                "parameters": {
                    "df": "DataFrame",
                    "stubnames": ".",
                    "i": ".",
                    "j": ".",
                    "sep": "str",
                    "suffix": "str"
                }
            },
            "__init__": {
                "type": "object",
                "info": "",
                "returns": "method-wrapper"
            }
        }
    },
    "noos": {
        "importName": "noos",
        "items": {
            "analytics": {
                "type": "module",
                "info": "Proprietary Gas & Power Quantitative Analytics.",
                "items": {
                    "ASSET_REGISTRY": {
                        "type": "object",
                        "info": "Generic registry collection.",
                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                    },
                    "AssetIndexError": {
                        "type": "class",
                        "info": "Exception raised while validating an asset parameter.",
                        "returns": "noos.analytics.AssetIndexError",
                        "items": {
                            "add_note": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "args": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "with_traceback": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "FixedContract": {
                        "type": "class",
                        "info": "Pricing class for fixed pricing.",
                        "returns": "noos.analytics.FixedContract",
                        "items": {
                            "price": {
                                "type": "function",
                                "info": "Generic price method to be implemented by subclasses.",
                                "returns": "noos.analytics.LoadPricingResult",
                                "parameters": {
                                    "market_data": "noos.analytics.MarketData"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "load": "noos.analytics.LoadCurveBase",
                                    "risk_premium": "float"
                                }
                            }
                        }
                    },
                    "FixingSet": {
                        "type": "class",
                        "info": "Mutable sequence for storing fixings.",
                        "returns": "noos.analytics.FixingSet",
                        "items": {
                            "COLUMNS": {
                                "type": "object",
                                "info": "set() -> new empty set object",
                                "returns": "set"
                            },
                            "FIXING_COLUMNS": {
                                "type": "object",
                                "info": "set() -> new empty set object",
                                "returns": "set"
                            },
                            "__getitem__": {
                                "type": "function",
                                "info": "",
                                "returns": "noos.analytics._core.collections.Any",
                                "parameters": {
                                    "index": "noos.analytics._core.collections.Any"
                                }
                            },
                            "add": {
                                "type": "function",
                                "info": "Add item to sequence if not a member ; otherwise do nothing.",
                                "returns": "None",
                                "parameters": {
                                    "item": "~T"
                                }
                            },
                            "clear": {
                                "type": "function",
                                "info": "This is slow (creates N new iterators!) but effective.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "count": {
                                "type": "function",
                                "info": "S.count(value) -> integer -- return number of occurrences of value",
                                "returns": "None",
                                "parameters": {
                                    "value": "None"
                                }
                            },
                            "deliveries": {
                                "type": "function",
                                "info": "Retrieve all delivery periods for all fixings in the set.",
                                "returns": "pd.DatetimeIndex",
                                "parameters": {}
                            },
                            "discard": {
                                "type": "function",
                                "info": "Remove item from sequence if a member ; otherwise do nothing.",
                                "returns": "None",
                                "parameters": {
                                    "item": "~T"
                                }
                            },
                            "first_delivery": {
                                "type": "property",
                                "info": "Return the start time of the first delivery period within the set.",
                                "returns": "datetime.datetime"
                            },
                            "frequency": {
                                "type": "property",
                                "info": "Return asset frequency for a sequence of fixings.",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "from_dict": {
                                "type": "object",
                                "info": "Create a bound instance method object.",
                                "returns": "method"
                            },
                            "from_pandas": {
                                "type": "object",
                                "info": "Create a bound instance method object.",
                                "returns": "method"
                            },
                            "index": {
                                "type": "function",
                                "info": "S.index(value, [start, [stop]]) -> integer -- return first index of value.",
                                "returns": "None",
                                "parameters": {
                                    "value": "None",
                                    "start": "None",
                                    "stop": "None"
                                }
                            },
                            "isdisjoint": {
                                "type": "function",
                                "info": "Return True if two sets have a null intersection.",
                                "returns": "None",
                                "parameters": {
                                    "other": "None"
                                }
                            },
                            "last_delivery": {
                                "type": "property",
                                "info": "Return the end time of the last delivery period within the set.",
                                "returns": "datetime.datetime"
                            },
                            "pop": {
                                "type": "function",
                                "info": "Return the popped value.  Raise KeyError if empty.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "reduce": {
                                "type": "function",
                                "info": "Return a set of reduced fixings (potentially overlapping completely if not aligned).",
                                "returns": "noos.analytics.FixingSet",
                                "parameters": {}
                            },
                            "remove": {
                                "type": "function",
                                "info": "Remove an element. If not a member, raise a KeyError.",
                                "returns": "None",
                                "parameters": {
                                    "value": "None"
                                }
                            },
                            "to_dict": {
                                "type": "function",
                                "info": "Export a FixingSet object as a list of dictionaries.",
                                "returns": "list[dict[str, typing.Any]]",
                                "parameters": {}
                            },
                            "to_pandas": {
                                "type": "function",
                                "info": "Export a IndexSet object as a pandas data frame.",
                                "returns": "pd.DataFrame",
                                "parameters": {}
                            },
                            "volumes": {
                                "type": "function",
                                "info": "Retrieve all delivery volumes for all fixings in the set.",
                                "returns": "typing.Union[scipy.sparse._csc.csc_matrix, pandas.core.frame.DataFrame]",
                                "parameters": {
                                    "normalized": "bool",
                                    "is_continuous": "bool",
                                    "is_df": "bool"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {}
                            }
                        }
                    },
                    "ForwardContract": {
                        "type": "class",
                        "info": "Class for Forward contracts based on Index.",
                        "returns": "noos.analytics.ForwardContract",
                        "items": {
                            "prefix": {
                                "type": "object",
                                "info": "str(object='') -> str",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "contract_multiplier": {
                                "type": "object",
                                "info": "int([x]) -> integer",
                                "returns": "int"
                            },
                            "forward_index": {
                                "type": "property",
                                "info": "",
                                "returns": "noos.analytics.ForwardIndex"
                            },
                            "from_dict": {
                                "type": "object",
                                "info": "Create a bound instance method object.",
                                "returns": "method"
                            },
                            "price": {
                                "type": "function",
                                "info": "Generic price method to be implemented by subclasses.",
                                "returns": "noos.analytics.LoadPricingResult",
                                "parameters": {
                                    "market_data": "noos.analytics.MarketData"
                                }
                            },
                            "symbol": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "to_dict": {
                                "type": "function",
                                "info": "Export a ForwardContract object as a record.",
                                "returns": "dict[str, typing.Any]",
                                "parameters": {}
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "forward_index": "noos.analytics.ForwardIndex"
                                }
                            }
                        }
                    },
                    "ForwardIndex": {
                        "type": "class",
                        "info": "Wholesale forward index.",
                        "returns": "noos.analytics.ForwardIndex",
                        "items": {
                            "deliveries": {
                                "type": "property",
                                "info": "Return deliveries as a DatetimeIndex for the index.",
                                "returns": "pd.DatetimeIndex"
                            },
                            "delivery_from": {
                                "type": "property",
                                "info": "Return the start time of the first delivery period for the index.",
                                "returns": "datetime.datetime"
                            },
                            "delivery_to": {
                                "type": "property",
                                "info": "Return the end time of the last delivery period for the index.",
                                "returns": "datetime.datetime"
                            },
                            "from_dict": {
                                "type": "object",
                                "info": "Create a bound instance method object.",
                                "returns": "method"
                            },
                            "get_symbol": {
                                "type": "function",
                                "info": "",
                                "returns": "pd.CategoricalIndex.str",
                                "parameters": {}
                            },
                            "load_ts": {
                                "type": "property",
                                "info": "Load the index validator.",
                                "returns": "pd.Series"
                            },
                            "symbol": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "to_dict": {
                                "type": "function",
                                "info": "Export an Index object as a record.",
                                "returns": "dict[str, typing.Any]",
                                "parameters": {}
                            },
                            "volumes": {
                                "type": "function",
                                "info": "Retrieve all delivery volumes and periods for the index.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "normalized": "bool"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "asset": "noos.analytics._domain.products.assets.Asset",
                                    "calendar_delivery": "noos.analytics._domain.products.deliveries.CalendarDelivery",
                                    "intraday_delivery": "noos.analytics._domain.products.deliveries.IntradayDelivery"
                                }
                            }
                        }
                    },
                    "GasPriceForwardCurve": {
                        "type": "class",
                        "info": "Natural gas price forward curve.",
                        "returns": "noos.analytics.GasPriceForwardCurve",
                        "items": {
                            "fit": {
                                "type": "function",
                                "info": "Fit the underlying curve model.",
                                "returns": "noos.analytics.PriceForwardCurve",
                                "parameters": {
                                    "features": "pd.DataFrame"
                                }
                            },
                            "options": {
                                "type": "object",
                                "info": "Class for declaring curve options at class level.",
                                "returns": "noos.analytics._domain.curves.base.CurveOption"
                            },
                            "partial_fit": {
                                "type": "function",
                                "info": "Refit the underlying curve model.",
                                "returns": "noos.analytics.PriceForwardCurve",
                                "parameters": {}
                            },
                            "predict": {
                                "type": "function",
                                "info": "Predict using the underlying curve model.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "start_at": "datetime.datetime",
                                    "end_at": "datetime.datetime"
                                }
                            },
                            "to_pandas": {
                                "type": "function",
                                "info": "Return a pandas time serie describing the curve.",
                                "returns": "pd.Series",
                                "parameters": {}
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "args": "<class 'NoneType'>",
                                    "kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "IS_PUBLIC": {
                        "type": "object",
                        "info": "bool(x) -> bool",
                        "returns": "bool"
                    },
                    "IdentityPriceForwardCurve": {
                        "type": "class",
                        "info": "Identity price forward curve.",
                        "returns": "noos.analytics.IdentityPriceForwardCurve",
                        "items": {
                            "fit": {
                                "type": "function",
                                "info": "Fit the underlying curve model.",
                                "returns": "noos.analytics.PriceForwardCurve",
                                "parameters": {
                                    "features": "pd.DataFrame"
                                }
                            },
                            "options": {
                                "type": "object",
                                "info": "Class for declaring curve options at class level.",
                                "returns": "noos.analytics._domain.curves.base.CurveOption"
                            },
                            "partial_fit": {
                                "type": "function",
                                "info": "Refit the underlying curve model.",
                                "returns": "noos.analytics.PriceForwardCurve",
                                "parameters": {}
                            },
                            "predict": {
                                "type": "function",
                                "info": "Predict using the underlying curve model.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "start_at": "datetime.datetime",
                                    "end_at": "datetime.datetime"
                                }
                            },
                            "to_pandas": {
                                "type": "function",
                                "info": "Return a pandas time serie describing the curve.",
                                "returns": "pd.Series",
                                "parameters": {}
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "args": "<class 'NoneType'>",
                                    "kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "IndexInfo": {
                        "type": "class",
                        "info": "Utility class to retrieve index information.",
                        "returns": "noos.analytics.IndexInfo",
                        "items": {
                            "index_ts": {
                                "type": "attribute",
                                "info": "Immutable ndarray-like of datetime64 data.",
                                "returns": "pd.DatetimeIndex"
                            },
                            "tzinfo": {
                                "type": "attribute",
                                "info": "Represent a PEP 604 union type",
                                "returns": "zoneinfo.ZoneInfo | datetime.timezone"
                            },
                            "info": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "max": {
                                "type": "property",
                                "info": "Return the maximum index of the load time series.",
                                "returns": "datetime.datetime"
                            },
                            "min": {
                                "type": "property",
                                "info": "Return the minimum index of the load time series.",
                                "returns": "datetime.datetime"
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "index_ts": "pd.DatetimeIndex",
                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                }
                            }
                        }
                    },
                    "IndexSet": {
                        "type": "class",
                        "info": "Mutable sequence for storing indices.",
                        "returns": "noos.analytics.IndexSet",
                        "items": {
                            "COLUMNS": {
                                "type": "object",
                                "info": "set() -> new empty set object",
                                "returns": "set"
                            },
                            "__getitem__": {
                                "type": "function",
                                "info": "",
                                "returns": "noos.analytics._core.collections.Any",
                                "parameters": {
                                    "index": "noos.analytics._core.collections.Any"
                                }
                            },
                            "add": {
                                "type": "function",
                                "info": "Add item to sequence if not a member ; otherwise do nothing.",
                                "returns": "None",
                                "parameters": {
                                    "item": "~T"
                                }
                            },
                            "clear": {
                                "type": "function",
                                "info": "This is slow (creates N new iterators!) but effective.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "count": {
                                "type": "function",
                                "info": "S.count(value) -> integer -- return number of occurrences of value",
                                "returns": "None",
                                "parameters": {
                                    "value": "None"
                                }
                            },
                            "deliveries": {
                                "type": "function",
                                "info": "Retrieve all delivery periods for all indices in the set.",
                                "returns": "pd.DatetimeIndex",
                                "parameters": {}
                            },
                            "discard": {
                                "type": "function",
                                "info": "Remove item from sequence if a member ; otherwise do nothing.",
                                "returns": "None",
                                "parameters": {
                                    "item": "~T"
                                }
                            },
                            "first_delivery": {
                                "type": "property",
                                "info": "Return the start time of the first delivery period within the set.",
                                "returns": "datetime.datetime"
                            },
                            "frequency": {
                                "type": "property",
                                "info": "Return asset frequency for a sequence of indices.",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "from_dict": {
                                "type": "object",
                                "info": "Create a bound instance method object.",
                                "returns": "method"
                            },
                            "from_pandas": {
                                "type": "object",
                                "info": "Create a bound instance method object.",
                                "returns": "method"
                            },
                            "index": {
                                "type": "function",
                                "info": "S.index(value, [start, [stop]]) -> integer -- return first index of value.",
                                "returns": "None",
                                "parameters": {
                                    "value": "None",
                                    "start": "None",
                                    "stop": "None"
                                }
                            },
                            "isdisjoint": {
                                "type": "function",
                                "info": "Return True if two sets have a null intersection.",
                                "returns": "None",
                                "parameters": {
                                    "other": "None"
                                }
                            },
                            "last_delivery": {
                                "type": "property",
                                "info": "Return the end time of the last delivery period within the set.",
                                "returns": "datetime.datetime"
                            },
                            "loads": {
                                "type": "property",
                                "info": "Retrieve all loads for all indices in the set.",
                                "returns": "pd.DataFrame"
                            },
                            "pop": {
                                "type": "function",
                                "info": "Return the popped value.  Raise KeyError if empty.",
                                "returns": "None",
                                "parameters": {}
                            },
                            "remove": {
                                "type": "function",
                                "info": "Remove an element. If not a member, raise a KeyError.",
                                "returns": "None",
                                "parameters": {
                                    "value": "None"
                                }
                            },
                            "to_dict": {
                                "type": "function",
                                "info": "Export a IndexSet object as a list of dictionaries.",
                                "returns": "list[dict[str, typing.Any]]",
                                "parameters": {}
                            },
                            "to_pandas": {
                                "type": "function",
                                "info": "Export a IndexSet object as a pandas data frame.",
                                "returns": "pd.DataFrame",
                                "parameters": {}
                            },
                            "volumes": {
                                "type": "function",
                                "info": "Retrieve all delivery volumes for all indices in the set.",
                                "returns": "pd.DataFrame",
                                "parameters": {
                                    "normalized": "bool"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {}
                            }
                        }
                    },
                    "LONDON": {
                        "type": "object",
                        "info": "Abstract base class for time zone info objects.",
                        "returns": "zoneinfo.ZoneInfo"
                    },
                    "LoadCurveBase": {
                        "type": "class",
                        "info": "A class representing an energy load time series with its associated metadata.",
                        "returns": "noos.analytics.LoadCurveBase",
                        "items": {
                            "asset": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "name": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "metadata": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "unit": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "__getitem__": {
                                "type": "function",
                                "info": "Slice the load between start and end dates.",
                                "returns": "~T",
                                "parameters": {
                                    "_slice": "slice"
                                }
                            },
                            "get_reindexed_load_ts_mw": {
                                "type": "function",
                                "info": "Return the load curve in MW on the given index.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "index": "pd.DatetimeIndex"
                                }
                            },
                            "get_reindexed_volume_ts_mwh": {
                                "type": "function",
                                "info": "Return the volume curve in MWh on the given index.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "index": "pd.DatetimeIndex"
                                }
                            },
                            "index": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.Index"
                            },
                            "index_max": {
                                "type": "property",
                                "info": "Return the maximum index of the load time series.",
                                "returns": "pd.Timestamp"
                            },
                            "index_min": {
                                "type": "property",
                                "info": "Return the minimum index of the load time series.",
                                "returns": "pd.Timestamp"
                            },
                            "index_range_info": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "info": {
                                "type": "function",
                                "info": "Print information about the Load instance using LoadInfo.",
                                "returns": "None",
                                "parameters": {
                                    "verbose": "bool"
                                }
                            },
                            "load_ts": {
                                "type": "object",
                                "info": "",
                                "returns": "noos.analytics._domain.curves.load.base.cached_property"
                            },
                            "negative": {
                                "type": "property",
                                "info": "Return the negative part of the load curve.",
                                "returns": "~T"
                            },
                            "options": {
                                "type": "object",
                                "info": "Class for declaring curve options at class level.",
                                "returns": "noos.analytics._domain.curves.base.CurveOption"
                            },
                            "plot": {
                                "type": "function",
                                "info": "Plot the time series data.",
                                "returns": "None",
                                "parameters": {
                                    "mode": "str",
                                    "line_shape": "str",
                                    "backend": "str"
                                }
                            },
                            "positive": {
                                "type": "property",
                                "info": "Return the positive part of the load curve.",
                                "returns": "~T"
                            },
                            "volume": {
                                "type": "property",
                                "info": "Return the total volume in MWh.",
                                "returns": "float"
                            },
                            "volume_ts": {
                                "type": "object",
                                "info": "",
                                "returns": "noos.analytics._domain.curves.load.base.cached_property"
                            },
                            "where": {
                                "type": "function",
                                "info": "Nullify values where the condition is False.",
                                "returns": "~T",
                                "parameters": {
                                    "cond": "typing.Union[pandas.core.series.Series, typing.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame], numpy.ndarray]]"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "load_ts": "pd.Series",
                                    "kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "LoadPricingResult": {
                        "type": "class",
                        "info": "Class to hold the result of the pricing load calculation.",
                        "returns": "noos.analytics.LoadPricingResult",
                        "items": {
                            "net_price": {
                                "type": "property",
                                "info": "Return the net price in EUR/MWh.",
                                "returns": "float"
                            },
                            "net_value": {
                                "type": "property",
                                "info": "Return the net value in EUR.",
                                "returns": "float"
                            },
                            "net_value_ts": {
                                "type": "property",
                                "info": "Return the net value time serie in EUR.",
                                "returns": "pd.Series"
                            },
                            "nil_volume": {
                                "type": "property",
                                "info": "Nullify volume to just add a transparent load dependent fixed risk premium.",
                                "returns": "noos.analytics.LoadPricingResult"
                            },
                            "price": {
                                "type": "property",
                                "info": "Return the price in EUR/MWh.",
                                "returns": "float"
                            },
                            "risk_premium": {
                                "type": "property",
                                "info": "Return the total risk risk premium in EUR.",
                                "returns": "float"
                            },
                            "value": {
                                "type": "property",
                                "info": "Return the total value in EUR.",
                                "returns": "float"
                            },
                            "volume": {
                                "type": "property",
                                "info": "Return the total volume in MWh.",
                                "returns": "float"
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "value_ts": "pd.Series",
                                    "risk_premium_ts": "pd.Series",
                                    "kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "MARKET_DATA_CONNECTOR_REGISTRY": {
                        "type": "object",
                        "info": "Generic registry collection.",
                        "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                    },
                    "MarketData": {
                        "type": "class",
                        "info": "Market data for pricing.",
                        "returns": "noos.analytics.MarketData",
                        "items": {
                            "__getitem__": {
                                "type": "function",
                                "info": "",
                                "returns": "noos.analytics._domain.contracts.market_data.AssetDataBase|noos.analytics._domain.contracts.market_data.DailyAssetData|noos.analytics._domain.contracts.market_data.PwrteData",
                                "parameters": {
                                    "key": "str"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "ref_date": "datetime.datetime | None",
                                    "kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "MarketDataIndexError": {
                        "type": "class",
                        "info": "Exception raised while validating a market data parameter.",
                        "returns": "noos.analytics.MarketDataIndexError",
                        "items": {
                            "add_note": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "args": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "with_traceback": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "MaskMap": {
                        "type": "object",
                        "info": "Represent a PEP 585 generic type",
                        "returns": "types.GenericAlias"
                    },
                    "NGPEG": {
                        "type": "object",
                        "info": "Generic financial / physical asset.",
                        "returns": "noos.analytics._domain.products.assets.Asset"
                    },
                    "NgpegLoadCurve": {
                        "type": "class",
                        "info": "Class for NGPEG load curves.",
                        "returns": "noos.analytics.NgpegLoadCurve",
                        "items": {
                            "__getitem__": {
                                "type": "function",
                                "info": "Slice the load between start and end dates.",
                                "returns": "~T",
                                "parameters": {
                                    "_slice": "slice"
                                }
                            },
                            "asset": {
                                "type": "object",
                                "info": "Generic financial / physical asset.",
                                "returns": "noos.analytics._domain.products.assets.Asset"
                            },
                            "get_reindexed_load_ts_mw": {
                                "type": "function",
                                "info": "Return the load curve in MW on the given index.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "index": "pd.DatetimeIndex"
                                }
                            },
                            "get_reindexed_volume_ts_mwh": {
                                "type": "function",
                                "info": "Return the volume curve in MWh on the given index.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "index": "pd.DatetimeIndex"
                                }
                            },
                            "index": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.Index"
                            },
                            "index_max": {
                                "type": "property",
                                "info": "Return the maximum index of the load time series.",
                                "returns": "pd.Timestamp"
                            },
                            "index_min": {
                                "type": "property",
                                "info": "Return the minimum index of the load time series.",
                                "returns": "pd.Timestamp"
                            },
                            "index_range_info": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "info": {
                                "type": "function",
                                "info": "Print information about the Load instance using LoadInfo.",
                                "returns": "None",
                                "parameters": {
                                    "verbose": "bool"
                                }
                            },
                            "load_ts": {
                                "type": "object",
                                "info": "",
                                "returns": "noos.analytics._domain.curves.load.base.cached_property"
                            },
                            "metadata": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "name": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "negative": {
                                "type": "property",
                                "info": "Return the negative part of the load curve.",
                                "returns": "~T"
                            },
                            "options": {
                                "type": "object",
                                "info": "Class for declaring curve options at class level.",
                                "returns": "noos.analytics._domain.curves.base.CurveOption"
                            },
                            "plot": {
                                "type": "function",
                                "info": "Plot the time series data.",
                                "returns": "None",
                                "parameters": {
                                    "mode": "str",
                                    "line_shape": "str",
                                    "backend": "str"
                                }
                            },
                            "positive": {
                                "type": "property",
                                "info": "Return the positive part of the load curve.",
                                "returns": "~T"
                            },
                            "unit": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "volume": {
                                "type": "property",
                                "info": "Return the total volume in MWh.",
                                "returns": "float"
                            },
                            "volume_ts": {
                                "type": "object",
                                "info": "",
                                "returns": "noos.analytics._domain.curves.load.base.cached_property"
                            },
                            "where": {
                                "type": "function",
                                "info": "Nullify values where the condition is False.",
                                "returns": "~T",
                                "parameters": {
                                    "cond": "typing.Union[pandas.core.series.Series, typing.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame], numpy.ndarray]]"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "load_ts": "pd.Series",
                                    "kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "NgpegSpotContract": {
                        "type": "class",
                        "info": "Contract for load on the NGPEG spot market.",
                        "returns": "noos.analytics.NgpegSpotContract",
                        "items": {
                            "price": {
                                "type": "function",
                                "info": "Generic price method to be implemented by subclasses.",
                                "returns": "noos.analytics.LoadPricingResult",
                                "parameters": {
                                    "market_data": "noos.analytics.MarketData"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "load": "noos.analytics.LoadCurveBase",
                                    "risk_premium": "float",
                                    "risk_premium_pct": "float"
                                }
                            }
                        }
                    },
                    "PARIS": {
                        "type": "object",
                        "info": "Abstract base class for time zone info objects.",
                        "returns": "zoneinfo.ZoneInfo"
                    },
                    "PWREE": {
                        "type": "object",
                        "info": "Generic financial / physical asset.",
                        "returns": "noos.analytics._domain.products.assets.Asset"
                    },
                    "PWREE_H": {
                        "type": "object",
                        "info": "Generic financial / physical asset.",
                        "returns": "noos.analytics._domain.products.assets.Asset"
                    },
                    "PWRTE": {
                        "type": "object",
                        "info": "Generic financial / physical asset.",
                        "returns": "noos.analytics._domain.products.assets.Asset"
                    },
                    "PWRTE_H": {
                        "type": "object",
                        "info": "Generic financial / physical asset.",
                        "returns": "noos.analytics._domain.products.assets.Asset"
                    },
                    "PWRTE_PEB": {
                        "type": "object",
                        "info": "Generic financial / physical asset.",
                        "returns": "noos.analytics._domain.products.assets.Asset"
                    },
                    "PowerPriceForwardCurve": {
                        "type": "class",
                        "info": "Electricity price forward curve.",
                        "returns": "noos.analytics.PowerPriceForwardCurve",
                        "items": {
                            "fit": {
                                "type": "function",
                                "info": "Fit the underlying curve model.",
                                "returns": "noos.analytics.PriceForwardCurve",
                                "parameters": {
                                    "features": "pd.DataFrame"
                                }
                            },
                            "options": {
                                "type": "object",
                                "info": "Class for declaring curve options at class level.",
                                "returns": "noos.analytics._domain.curves.base.CurveOption"
                            },
                            "partial_fit": {
                                "type": "function",
                                "info": "Refit the underlying curve model.",
                                "returns": "noos.analytics.PriceForwardCurve",
                                "parameters": {}
                            },
                            "predict": {
                                "type": "function",
                                "info": "Predict using the underlying curve model.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "start_at": "datetime.datetime",
                                    "end_at": "datetime.datetime"
                                }
                            },
                            "to_pandas": {
                                "type": "function",
                                "info": "Return a pandas time serie describing the curve.",
                                "returns": "pd.Series",
                                "parameters": {}
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "args": "<class 'NoneType'>",
                                    "kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "PriceForwardCurve": {
                        "type": "class",
                        "info": "Generic class for creating price curves.",
                        "returns": "noos.analytics.PriceForwardCurve",
                        "items": {
                            "fit": {
                                "type": "function",
                                "info": "Fit the underlying curve model.",
                                "returns": "noos.analytics.PriceForwardCurve",
                                "parameters": {
                                    "features": "pd.DataFrame"
                                }
                            },
                            "options": {
                                "type": "object",
                                "info": "Class for declaring curve options at class level.",
                                "returns": "noos.analytics._domain.curves.base.CurveOption"
                            },
                            "partial_fit": {
                                "type": "function",
                                "info": "Refit the underlying curve model.",
                                "returns": "noos.analytics.PriceForwardCurve",
                                "parameters": {}
                            },
                            "predict": {
                                "type": "function",
                                "info": "Predict using the underlying curve model.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "start_at": "datetime.datetime",
                                    "end_at": "datetime.datetime"
                                }
                            },
                            "to_pandas": {
                                "type": "function",
                                "info": "Return a pandas time serie describing the curve.",
                                "returns": "pd.Series",
                                "parameters": {}
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "args": "<class 'NoneType'>",
                                    "kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "ProductError": {
                        "type": "class",
                        "info": "Generic exception raised within the `domain.product` layer.",
                        "returns": "noos.analytics.ProductError",
                        "items": {
                            "add_note": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "args": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "with_traceback": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "PwrteImbalanceContract": {
                        "type": "class",
                        "info": "Price class for pricing imbalance with ISP spread.",
                        "returns": "noos.analytics.PwrteImbalanceContract",
                        "items": {
                            "price": {
                                "type": "function",
                                "info": "Generic price method to be implemented by subclasses.",
                                "returns": "noos.analytics.LoadPricingResult",
                                "parameters": {
                                    "market_data": "noos.analytics.MarketData"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "load": "noos.analytics.LoadCurveBase",
                                    "risk_premium": "float",
                                    "risk_premium_pct": "float"
                                }
                            }
                        }
                    },
                    "PwrteIspnContract": {
                        "type": "class",
                        "info": "Contract for load on the PWRTE ispn market.",
                        "returns": "noos.analytics.PwrteIspnContract",
                        "items": {
                            "price": {
                                "type": "function",
                                "info": "Generic price method to be implemented by subclasses.",
                                "returns": "noos.analytics.LoadPricingResult",
                                "parameters": {
                                    "market_data": "noos.analytics.MarketData"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "load": "noos.analytics.LoadCurveBase",
                                    "risk_premium": "float",
                                    "risk_premium_pct": "float"
                                }
                            }
                        }
                    },
                    "PwrteIsppContract": {
                        "type": "class",
                        "info": "Contract for load on the PWRTE ispp market.",
                        "returns": "noos.analytics.PwrteIsppContract",
                        "items": {
                            "price": {
                                "type": "function",
                                "info": "Generic price method to be implemented by subclasses.",
                                "returns": "noos.analytics.LoadPricingResult",
                                "parameters": {
                                    "market_data": "noos.analytics.MarketData"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "load": "noos.analytics.LoadCurveBase",
                                    "risk_premium": "float",
                                    "risk_premium_pct": "float"
                                }
                            }
                        }
                    },
                    "PwrteLoadCurve": {
                        "type": "class",
                        "info": "Class for PWRTE load curves.",
                        "returns": "noos.analytics.PwrteLoadCurve",
                        "items": {
                            "__getitem__": {
                                "type": "function",
                                "info": "Slice the load between start and end dates.",
                                "returns": "~T",
                                "parameters": {
                                    "_slice": "slice"
                                }
                            },
                            "asset": {
                                "type": "object",
                                "info": "Generic financial / physical asset.",
                                "returns": "noos.analytics._domain.products.assets.Asset"
                            },
                            "get_reindexed_load_ts_mw": {
                                "type": "function",
                                "info": "Return the load curve in MW on the given index.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "index": "pd.DatetimeIndex"
                                }
                            },
                            "get_reindexed_volume_ts_mwh": {
                                "type": "function",
                                "info": "Return the volume curve in MWh on the given index.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "index": "pd.DatetimeIndex"
                                }
                            },
                            "index": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.Index"
                            },
                            "index_max": {
                                "type": "property",
                                "info": "Return the maximum index of the load time series.",
                                "returns": "pd.Timestamp"
                            },
                            "index_min": {
                                "type": "property",
                                "info": "Return the minimum index of the load time series.",
                                "returns": "pd.Timestamp"
                            },
                            "index_range_info": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "info": {
                                "type": "function",
                                "info": "Print information about the Load instance using LoadInfo.",
                                "returns": "None",
                                "parameters": {
                                    "verbose": "bool"
                                }
                            },
                            "load_ts": {
                                "type": "object",
                                "info": "",
                                "returns": "noos.analytics._domain.curves.load.base.cached_property"
                            },
                            "metadata": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "name": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "negative": {
                                "type": "property",
                                "info": "Return the negative part of the load curve.",
                                "returns": "~T"
                            },
                            "options": {
                                "type": "object",
                                "info": "Class for declaring curve options at class level.",
                                "returns": "noos.analytics._domain.curves.base.CurveOption"
                            },
                            "plot": {
                                "type": "function",
                                "info": "Plot the time series data.",
                                "returns": "None",
                                "parameters": {
                                    "mode": "str",
                                    "line_shape": "str",
                                    "backend": "str"
                                }
                            },
                            "positive": {
                                "type": "property",
                                "info": "Return the positive part of the load curve.",
                                "returns": "~T"
                            },
                            "unit": {
                                "type": "object",
                                "info": "",
                                "returns": "member_descriptor"
                            },
                            "volume": {
                                "type": "property",
                                "info": "Return the total volume in MWh.",
                                "returns": "float"
                            },
                            "volume_ts": {
                                "type": "object",
                                "info": "",
                                "returns": "noos.analytics._domain.curves.load.base.cached_property"
                            },
                            "where": {
                                "type": "function",
                                "info": "Nullify values where the condition is False.",
                                "returns": "~T",
                                "parameters": {
                                    "cond": "typing.Union[pandas.core.series.Series, typing.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame], numpy.ndarray]]"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "load_ts": "pd.Series",
                                    "kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "PwrteSpotContract": {
                        "type": "class",
                        "info": "Contract for load on the PWRTE spot market.",
                        "returns": "noos.analytics.PwrteSpotContract",
                        "items": {
                            "price": {
                                "type": "function",
                                "info": "Generic price method to be implemented by subclasses.",
                                "returns": "noos.analytics.LoadPricingResult",
                                "parameters": {
                                    "market_data": "noos.analytics.MarketData"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "load": "noos.analytics.LoadCurveBase",
                                    "risk_premium": "float",
                                    "risk_premium_pct": "float"
                                }
                            }
                        }
                    },
                    "RollingIndex": {
                        "type": "class",
                        "info": "Wholesale rolling index.",
                        "returns": "noos.analytics.RollingIndex",
                        "items": {
                            "from_dict": {
                                "type": "object",
                                "info": "Create a bound instance method object.",
                                "returns": "method"
                            },
                            "get_symbol": {
                                "type": "function",
                                "info": "",
                                "returns": "pd.CategoricalIndex.str",
                                "parameters": {}
                            },
                            "symbol": {
                                "type": "property",
                                "info": "",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "to_dict": {
                                "type": "function",
                                "info": "Export an Index object as a record.",
                                "returns": "dict[str, typing.Any]",
                                "parameters": {}
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "asset": "noos.analytics._domain.products.assets.Asset",
                                    "calendar_delivery": "noos.analytics._domain.products.deliveries.CalendarDelivery",
                                    "intraday_delivery": "noos.analytics._domain.products.deliveries.IntradayDelivery"
                                }
                            }
                        }
                    },
                    "UKPX": {
                        "type": "object",
                        "info": "Generic financial / physical asset.",
                        "returns": "noos.analytics._domain.products.assets.Asset"
                    },
                    "ValidationError": {
                        "type": "class",
                        "info": "Basic exception raised while validating a product period.",
                        "returns": "noos.analytics.ValidationError",
                        "items": {
                            "add_note": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "args": {
                                "type": "object",
                                "info": "",
                                "returns": "getset_descriptor"
                            },
                            "with_traceback": {
                                "type": "object",
                                "info": "",
                                "returns": "method_descriptor"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "wrapper_descriptor"
                            }
                        }
                    },
                    "XGBoostExtrapolator": {
                        "type": "class",
                        "info": "",
                        "returns": "noos.analytics.XGBoostExtrapolator",
                        "items": {
                            "model": {
                                "type": "attribute",
                                "info": "Implementation of the scikit-learn API for XGBoost regression.",
                                "returns": "noos.analytics._domain.curves.extrapolate.XGBRegressor"
                            },
                            "features_transformer": {
                                "type": "attribute",
                                "info": "Base class for all estimators in scikit-learn.",
                                "returns": "noos.analytics._domain.curves.extrapolate.FeaturesTransformer"
                            },
                            "predict": {
                                "type": "function",
                                "info": "Make predictions for given index.",
                                "returns": "pd.Series",
                                "parameters": {
                                    "index": "pd.DatetimeIndex"
                                }
                            },
                            "train": {
                                "type": "function",
                                "info": "",
                                "returns": "None",
                                "parameters": {
                                    "ts": "pd.Series",
                                    "train_size": "float"
                                }
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "time_features": "noos.analytics._domain.curves.extrapolate.TimeFeatures| None",
                                    "additional_features": "pd.DataFrame| None",
                                    "xgbosst_kwargs": "<class 'NoneType'>"
                                }
                            }
                        }
                    },
                    "_api": {
                        "type": "module",
                        "info": "",
                        "items": {
                            "public": {
                                "type": "module",
                                "info": "Package to be phased out in the future and code classified in lower or different layers.",
                                "items": {
                                    "masks": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "days_holidays": {
                                                "type": "function",
                                                "info": "Public holidays for a single country.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame",
                                                    "country_code": "str"
                                                }
                                            },
                                            "days_we": {
                                                "type": "function",
                                                "info": "WE days.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "eex_peak": {
                                                "type": "function",
                                                "info": "EEX Peak Power definition: peak hours during weekdays including holidays.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "fr_arenh": {
                                                "type": "function",
                                                "info": "France ARENH scheme.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "fr_capacity_obligation": {
                                                "type": "function",
                                                "info": "France capacity obligation scheme.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "fr_hc": {
                                                "type": "function",
                                                "info": "France offpeak hours `Heures Creuses`.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "fr_hce": {
                                                "type": "function",
                                                "info": "France summer offpeak hours `Heures Creuses Ete`.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "fr_hch": {
                                                "type": "function",
                                                "info": "France winter offpeak hours `Heures Creuses Hiver`.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "fr_hp": {
                                                "type": "function",
                                                "info": "France peak hours `Heures Pleines`.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "fr_hpe": {
                                                "type": "function",
                                                "info": "France summer peak hours `Heures Pleines Ete`.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "fr_hph": {
                                                "type": "function",
                                                "info": "France winter peak hours `Heures Pleines Hiver`.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "hours_extended_peak": {
                                                "type": "function",
                                                "info": "Hours 7 to 23 in local time.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "hours_fr_peak_capacity_obligation": {
                                                "type": "function",
                                                "info": "Hours 7 to 15 and 18 to 20 in local time.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "hours_night_offpeak": {
                                                "type": "function",
                                                "info": "Hours 1 to 7 at night in local time.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "hours_peak": {
                                                "type": "function",
                                                "info": "Hours 8 to 20 in local time.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "hours_shoulder_peak": {
                                                "type": "function",
                                                "info": "Hours 8 to 10 and 18 to 20 in local time.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "identity": {
                                                "type": "function",
                                                "info": "Indentiy: no change.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "mask_fr_arenh": {
                                                "type": "function",
                                                "info": "France ARENH scheme.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "mask_fr_capacity_obligation": {
                                                "type": "function",
                                                "info": "France capacity obligation scheme.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "mask_fr_hc": {
                                                "type": "function",
                                                "info": "France offpeak hours `Heures Creuses`.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "mask_fr_hce": {
                                                "type": "function",
                                                "info": "France summer offpeak hours `Heures Creuses Ete`.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "mask_fr_hch": {
                                                "type": "function",
                                                "info": "France winter offpeak hours `Heures Creuses Hiver`.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "mask_fr_hp": {
                                                "type": "function",
                                                "info": "France peak hours `Heures Pleines`.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "mask_fr_hpe": {
                                                "type": "function",
                                                "info": "France summer peak hours `Heures Pleines Ete`.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "mask_fr_hph": {
                                                "type": "function",
                                                "info": "France winter peak hours `Heures Pleines Hiver`.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "season_q1": {
                                                "type": "function",
                                                "info": "January to March inclusive.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "season_q4": {
                                                "type": "function",
                                                "info": "October to December inclusive.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "season_shoulder_months": {
                                                "type": "function",
                                                "info": "April to June and September to October inclusive.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "season_summer_peak": {
                                                "type": "function",
                                                "info": "July and August.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "season_winter": {
                                                "type": "function",
                                                "info": "October to March inclusive.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "season_winter_peak": {
                                                "type": "function",
                                                "info": "November to March inclusive.",
                                                "returns": "numpy.ndarray",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "profiling": {
                                        "type": "module",
                                        "info": "Generic programming interface for consumption profiling operations.",
                                        "items": {
                                            "ASSET_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                            },
                                            "VALID_COLUMNS": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "datetimes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on date times.",
                                                "items": {
                                                    "ensure_tz_aware_datetime": {
                                                        "type": "function",
                                                        "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "obj": "str | datetime.datetime | datetime.date"
                                                        }
                                                    },
                                                    "ensure_utc_datetime": {
                                                        "type": "function",
                                                        "info": "Returns a datetime object with UTC timezone.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "obj": "str | datetime.datetime | datetime.date"
                                                        }
                                                    },
                                                    "is_extended_weekend_day": {
                                                        "type": "function",
                                                        "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                        "returns": "bool",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "next_extended_weekend_day": {
                                                        "type": "function",
                                                        "info": "Return the next extended weekend day after the given date.",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "next_non_extended_weekend_day": {
                                                        "type": "function",
                                                        "info": "Return the next non extended weekend day after the given date.",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "to_timedelta": {
                                                        "type": "function",
                                                        "info": "Transform a frequency string into a timedelta object.",
                                                        "returns": "datetime.timedelta",
                                                        "parameters": {
                                                            "freq": "str"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "extrapolate": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "create_from_historic_means": {
                                                        "type": "function",
                                                        "info": "Extrapolate historic curve from means in local time.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "historic": "pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "intervals": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Dimension": {
                                                        "type": "class",
                                                        "info": "Enum where members are also (and must be) ints",
                                                        "returns": "noos.analytics._api.public.profiling.intervals.Dimension",
                                                        "items": {
                                                            "ONE": {
                                                                "type": "object",
                                                                "info": "Enum where members are also (and must be) ints",
                                                                "returns": "noos.analytics._api.public.profiling.intervals.Dimension"
                                                            },
                                                            "TWO": {
                                                                "type": "object",
                                                                "info": "Enum where members are also (and must be) ints",
                                                                "returns": "noos.analytics._api.public.profiling.intervals.Dimension"
                                                            },
                                                            "__getitem__": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "as_integer_ratio": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "bit_count": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "bit_length": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "conjugate": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "denominator": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "getset_descriptor"
                                                            },
                                                            "from_bytes": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "builtin_function_or_method"
                                                            },
                                                            "imag": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "getset_descriptor"
                                                            },
                                                            "is_integer": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "numerator": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "getset_descriptor"
                                                            },
                                                            "real": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "getset_descriptor"
                                                            },
                                                            "to_bytes": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "args": "None",
                                                                    "kwds": "None"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "INTERVALS_COLUMNS": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "VALID_COLUMNS": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "create_aggregate_timeline_from_intervals": {
                                                        "type": "function",
                                                        "info": "Create a unique timeline aggregated curve across intervals.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "intervals": "pd.DataFrame",
                                                            "frequency": "str"
                                                        }
                                                    },
                                                    "create_matrix_from_intervals": {
                                                        "type": "function",
                                                        "info": "Create a matrix with start-end boolean intervals.",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "intervals": "pd.DataFrame",
                                                            "frequency": "str"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "localtime": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "UTC": {
                                                        "type": "object",
                                                        "info": "Abstract base class for time zone info objects.",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "date_astimezone": {
                                                        "type": "function",
                                                        "info": "Convert a date to a datetime in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "normalize": {
                                                        "type": "function",
                                                        "info": "Normalize a date to a midnight time in UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "now": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {}
                                                    },
                                                    "prev_weekday": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "prev_weekday_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "to_timezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to another time zone.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime",
                                                            "timezone_str": "str"
                                                        }
                                                    },
                                                    "to_utctimezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime"
                                                        }
                                                    },
                                                    "today": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {}
                                                    },
                                                    "today_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "normalize_index_on_intervals": {
                                                "type": "function",
                                                "info": "Normalize an index_value to the given frequency either linearly or with coefficients.",
                                                "returns": "pd.Series",
                                                "parameters": {
                                                    "interval_df": "pd.DataFrame",
                                                    "frequency": "str",
                                                    "value_column_name": "str",
                                                    "coef_df": "pd.DataFrame| None"
                                                }
                                            },
                                            "profile_from_intervals": {
                                                "type": "function",
                                                "info": "Generate profiles to the given frequency either linearly or with coefficients.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "grouped_df": "pd.DataFrame",
                                                    "frequency": "str",
                                                    "value_column_name": "str",
                                                    "coef_df": "pd.DataFrame| None"
                                                }
                                            },
                                            "scenario_from_coefficients": {
                                                "type": "function",
                                                "info": "Generate a normalized scenario serie given profile coefficients and scenario details.",
                                                "returns": "pd.Series",
                                                "parameters": {
                                                    "coef_ts": "pd.Series",
                                                    "scenario_rate": "float",
                                                    "scenario_frequency": "datetime.timedelta",
                                                    "start_at": "datetime.datetime",
                                                    "end_at": "datetime.datetime"
                                                }
                                            },
                                            "validators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "check_1d_array": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "obj": "numpy.ndarray"
                                                        }
                                                    },
                                                    "check_columns": {
                                                        "type": "function",
                                                        "info": "Validate format of a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "check_dataframe_not_empty": {
                                                        "type": "function",
                                                        "info": "Check a dataframe is not empty.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_datetimeindex_is_aware": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_datetimeindex": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_nil_end_value": {
                                                        "type": "function",
                                                        "info": "Check that a time series is closed by checking that the last value is 0.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_index_unique_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_dataframe": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_series": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas series.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_timeserie_numeric_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_tzinfo": {
                                                        "type": "function",
                                                        "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                        }
                                                    },
                                                    "check_no_nans_in_dataframe": {
                                                        "type": "function",
                                                        "info": "Validate non-NaN values in a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_no_nans_in_series": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_series_numeric": {
                                                        "type": "function",
                                                        "info": "Check if a pandas Series contains only numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validate_dataframe": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "dataframe_not_empty": "bool",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "volume_from_historic_means": {
                                                "type": "function",
                                                "info": "Create a curve from historic data based on means across month, day_of_week, hour.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "historic_df": "pd.DataFrame",
                                                    "asset_name": "str",
                                                    "start_at": "datetime.datetime",
                                                    "end_at": "datetime.datetime",
                                                    "value_column_name": "str"
                                                }
                                            },
                                            "volume_from_intervals": {
                                                "type": "function",
                                                "info": "Create a unique aggregated volume curve across intervals.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "population_df": "pd.DataFrame",
                                                    "frequency": "str",
                                                    "value_column_name": "str"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "symbols": {
                                        "type": "module",
                                        "info": "Mnemonic for naming instruments.",
                                        "items": {
                                            "ASSET": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "ASSET_LIST": {
                                                "type": "object",
                                                "info": "str(object='') -> str",
                                                "returns": "pd.CategoricalIndex.str"
                                            },
                                            "CALENDAR_PERIOD": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "CALENDAR_PERIOD_LIST": {
                                                "type": "object",
                                                "info": "str(object='') -> str",
                                                "returns": "pd.CategoricalIndex.str"
                                            },
                                            "CONTRACT": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "CONTRACT_LIST": {
                                                "type": "object",
                                                "info": "str(object='') -> str",
                                                "returns": "pd.CategoricalIndex.str"
                                            },
                                            "INTRADAY_PERIOD": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "INTRADAY_PERIOD_LIST": {
                                                "type": "object",
                                                "info": "str(object='') -> str",
                                                "returns": "pd.CategoricalIndex.str"
                                            },
                                            "contracts": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "pricing": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "battery": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "contract": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "optimiser": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "brp": {
                                                        "type": "module",
                                                        "info": "Module describing Balancing Responsible Party contracts (spot, imbalance, ispp, ispn).",
                                                        "items": {
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "load": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "price_load_with_series": {
                                                                "type": "function",
                                                                "info": "Compute the monetary value of the load time series given a price time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "load": "noos.analytics.LoadCurveBase",
                                                                    "price_ts": "pd.Series",
                                                                    "risk_premium": "float",
                                                                    "risk_premium_pct": "float"
                                                                }
                                                            },
                                                            "pricing": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validator_exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "forward": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "brp": {
                                                                "type": "module",
                                                                "info": "Module describing Balancing Responsible Party contracts (spot, imbalance, ispp, ispn).",
                                                                "items": {}
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "load": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "market_data": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbols": {
                                                                "type": "module",
                                                                "info": "Mnemonic for naming instruments.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "price_load_with_series": {
                                                        "type": "function",
                                                        "info": "Compute the monetary value of the load time series given a price time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "load": "noos.analytics.LoadCurveBase",
                                                            "price_ts": "pd.Series",
                                                            "risk_premium": "float",
                                                            "risk_premium_pct": "float"
                                                        }
                                                    },
                                                    "pricing": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "load": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "instruments": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "REGEX_USCORE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "deliveries": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "intraday": {
                                                                "type": "module",
                                                                "info": "Logic for validating intraday delivery periods.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "index": {
                                                        "type": "module",
                                                        "info": "Logic for validating index instruments.",
                                                        "items": {
                                                            "LEFT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "deliveries": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "strings": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on strings.",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "total_ordering": {
                                                        "type": "function",
                                                        "info": "Class decorator that fills in missing ordering methods",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "symbol_from_dict": {
                                                "type": "function",
                                                "info": "Construct a symbol from a dictionary.",
                                                "returns": "pd.CategoricalIndex.str",
                                                "parameters": {
                                                    "record": "dict[str, typing.Any]"
                                                }
                                            },
                                            "symbol_to_dict": {
                                                "type": "function",
                                                "info": "Construct a dictionary from a symbol.",
                                                "returns": "dict[str, typing.Any]",
                                                "parameters": {
                                                    "symbol": "str"
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyPandas": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "AnyTimezone": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "MetadataType": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Record": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Records": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "trading": {
                                        "type": "module",
                                        "info": "Generic programming interface for operations on volumes and products.",
                                        "items": {
                                            "ASSET_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                            },
                                            "DELIVERY_COLUMNS": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "HEDGE_COLUMNS": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "Mapping": {
                                                "type": "object",
                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                "returns": "typing._SpecialGenericAlias"
                                            },
                                            "PRODUCT_COLUMNS": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "TRADE_COLUMNS": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "assets": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "TypedDict": {
                                                        "type": "function",
                                                        "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "typename": "None",
                                                            "fields": "None",
                                                            "total": "None",
                                                            "kwargs": "None"
                                                        }
                                                    },
                                                    "conversions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "convert_load_to_volume": {
                                                                "type": "function",
                                                                "info": "Convert load to volume. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "convert_volume_to_load": {
                                                                "type": "function",
                                                                "info": "Convert volume to load. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "infer_nil_end": {
                                                                "type": "function",
                                                                "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "timestep": "datetime.timedelta"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "holidays": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "IMPLEMENTED_HOLIDAYS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "get_holidays": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "holidays.holiday_base.HolidayBase",
                                                                "parameters": {
                                                                    "holidays_zone": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "strings": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on strings.",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "asset": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "index": {
                                                                "type": "module",
                                                                "info": "Logic for validating index instruments.",
                                                                "items": {}
                                                            },
                                                            "intraday": {
                                                                "type": "module",
                                                                "info": "Logic for validating intraday delivery periods.",
                                                                "items": {}
                                                            },
                                                            "is_emission": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "is_gas": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "is_power": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "collections": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "fixings": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Union": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "arrays": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on numpy arrays.",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "indices": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "indices": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "arrays": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on numpy arrays.",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "conversions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "convert_load_to_volume": {
                                                        "type": "function",
                                                        "info": "Convert load to volume. Default 1 hour normalization.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series",
                                                            "normalization": "noos.analytics._core.conversions.Normalization"
                                                        }
                                                    },
                                                    "convert_volume_to_load": {
                                                        "type": "function",
                                                        "info": "Convert volume to load. Default 1 hour normalization.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series",
                                                            "normalization": "noos.analytics._core.conversions.Normalization"
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "infer_nil_end": {
                                                        "type": "function",
                                                        "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series",
                                                            "timestep": "datetime.timedelta"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "deliveries": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "calendar": {
                                                        "type": "module",
                                                        "info": "Logic for validating calendar delivery periods.",
                                                        "items": {
                                                            "CALENDAR_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "DATE_SUFFIX": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "MONTH_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "QUARTER_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "REGEX_BOM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOW": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOWEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DASH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_HOL": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_OFFSET": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_SEASON": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEK": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YYYY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "ROLLING_OFFSET_DAYS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "SEASON_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "bom_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bow_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bowext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "calendar_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "da_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "quarter_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "rolling_ldd": {
                                                                "type": "function",
                                                                "info": "Dummy function to use with rolling period to avoid None side effects.",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "season_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "we_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "week_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "weext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "intraday": {
                                                        "type": "module",
                                                        "info": "Logic for validating intraday delivery periods.",
                                                        "items": {
                                                            "REGEX_2H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_4H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BASE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BDAY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_HH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_NONE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_OFF": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_PEAK": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_QH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_HH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_QH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "strings": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on strings.",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "total_ordering": {
                                                        "type": "function",
                                                        "info": "Class decorator that fills in missing ordering methods",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "get_hedges_from_volumes": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe with hedges for given volumes across delivery periods.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "volumes": "pd.Series",
                                                    "products": "pd.DataFrame"
                                                }
                                            },
                                            "get_load_from_hedges": {
                                                "type": "function",
                                                "info": "Return a load instance from given hedges.",
                                                "returns": "noos.analytics.LoadCurveBase",
                                                "parameters": {
                                                    "hedges": "pd.DataFrame"
                                                }
                                            },
                                            "get_volumes_aggregates_from_hedges": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe with dynamic aggregated columns.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "hedges": "pd.DataFrame",
                                                    "agg_columns": "list[str]"
                                                }
                                            },
                                            "get_volumes_and_costs_from_trades": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe with volumes and costs across custom frequency periods.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "trades": "pd.DataFrame",
                                                    "freq": "str | None"
                                                }
                                            },
                                            "get_volumes_from_hedges": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe with hedged volumes across delivery periods.",
                                                "returns": "pd.Series",
                                                "parameters": {
                                                    "hedges": "pd.DataFrame"
                                                }
                                            },
                                            "instruments": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "REGEX_USCORE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "deliveries": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "intraday": {
                                                                "type": "module",
                                                                "info": "Logic for validating intraday delivery periods.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "index": {
                                                        "type": "module",
                                                        "info": "Logic for validating index instruments.",
                                                        "items": {
                                                            "LEFT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "deliveries": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "strings": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on strings.",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "total_ordering": {
                                                        "type": "function",
                                                        "info": "Class decorator that fills in missing ordering methods",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "load": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "method-wrapper"
                            }
                        }
                    },
                    "_core": {
                        "type": "module",
                        "info": "",
                        "items": {
                            "arrays": {
                                "type": "module",
                                "info": "Utility functions for operating on numpy arrays.",
                                "items": {
                                    "vstack_sparse_arrays": {
                                        "type": "function",
                                        "info": "",
                                        "returns": "scipy.sparse._csc.csc_matrix",
                                        "parameters": {
                                            "array": "numpy.ndarray",
                                            "matrix": "scipy.sparse._csc.csc_matrix | None"
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "collections": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "Any": {
                                        "type": "class",
                                        "info": "Special type indicating an unconstrained type.",
                                        "returns": "noos.analytics._core.collections.Any",
                                        "items": {
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "wrapper_descriptor"
                                            }
                                        }
                                    },
                                    "BaseSet": {
                                        "type": "class",
                                        "info": "Mutable, unique and sorted set for storing generic objects.",
                                        "returns": "noos.analytics._core.collections.BaseSet",
                                        "items": {
                                            "__getitem__": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "noos.analytics._core.collections.Any",
                                                "parameters": {
                                                    "index": "noos.analytics._core.collections.Any"
                                                }
                                            },
                                            "add": {
                                                "type": "function",
                                                "info": "Add item to sequence if not a member ; otherwise do nothing.",
                                                "returns": "None",
                                                "parameters": {
                                                    "item": "~T"
                                                }
                                            },
                                            "clear": {
                                                "type": "function",
                                                "info": "This is slow (creates N new iterators!) but effective.",
                                                "returns": "None",
                                                "parameters": {}
                                            },
                                            "count": {
                                                "type": "function",
                                                "info": "S.count(value) -> integer -- return number of occurrences of value",
                                                "returns": "None",
                                                "parameters": {
                                                    "value": "None"
                                                }
                                            },
                                            "discard": {
                                                "type": "function",
                                                "info": "Remove item from sequence if a member ; otherwise do nothing.",
                                                "returns": "None",
                                                "parameters": {
                                                    "item": "~T"
                                                }
                                            },
                                            "index": {
                                                "type": "function",
                                                "info": "S.index(value, [start, [stop]]) -> integer -- return first index of value.",
                                                "returns": "None",
                                                "parameters": {
                                                    "value": "None",
                                                    "start": "None",
                                                    "stop": "None"
                                                }
                                            },
                                            "isdisjoint": {
                                                "type": "function",
                                                "info": "Return True if two sets have a null intersection.",
                                                "returns": "None",
                                                "parameters": {
                                                    "other": "None"
                                                }
                                            },
                                            "pop": {
                                                "type": "function",
                                                "info": "Return the popped value.  Raise KeyError if empty.",
                                                "returns": "None",
                                                "parameters": {}
                                            },
                                            "remove": {
                                                "type": "function",
                                                "info": "Remove an element. If not a member, raise a KeyError.",
                                                "returns": "None",
                                                "parameters": {
                                                    "value": "None"
                                                }
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {}
                                            }
                                        }
                                    },
                                    "Generic": {
                                        "type": "class",
                                        "info": "Abstract base class for generic types.",
                                        "returns": "noos.analytics._core.collections.Generic",
                                        "items": {
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "wrapper_descriptor"
                                            }
                                        }
                                    },
                                    "Iterator": {
                                        "type": "object",
                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                        "returns": "typing._SpecialGenericAlias"
                                    },
                                    "T": {
                                        "type": "object",
                                        "info": "Type variable.",
                                        "returns": "noos.analytics._core.collections.TypeVar"
                                    },
                                    "TypeVar": {
                                        "type": "class",
                                        "info": "Type variable.",
                                        "returns": "noos.analytics._core.collections.TypeVar",
                                        "items": {
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "wrapper_descriptor"
                                            }
                                        }
                                    },
                                    "strings": {
                                        "type": "module",
                                        "info": "Utility functions for operating on strings.",
                                        "items": {
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "conversions": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "Normalization": {
                                        "type": "class",
                                        "info": "Create a collection of name/value pairs.",
                                        "returns": "noos.analytics._core.conversions.Normalization",
                                        "items": {
                                            "DAILY": {
                                                "type": "object",
                                                "info": "Create a collection of name/value pairs.",
                                                "returns": "noos.analytics._core.conversions.Normalization"
                                            },
                                            "HOURLY": {
                                                "type": "object",
                                                "info": "Create a collection of name/value pairs.",
                                                "returns": "noos.analytics._core.conversions.Normalization"
                                            },
                                            "__getitem__": {
                                                "type": "object",
                                                "info": "Create a bound instance method object.",
                                                "returns": "method"
                                            },
                                            "name": {
                                                "type": "object",
                                                "info": "This is a descriptor, used to define attributes that act differently",
                                                "returns": "enum.property"
                                            },
                                            "value": {
                                                "type": "object",
                                                "info": "This is a descriptor, used to define attributes that act differently",
                                                "returns": "enum.property"
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {
                                                    "args": "None",
                                                    "kwds": "None"
                                                }
                                            }
                                        }
                                    },
                                    "convert_load_to_volume": {
                                        "type": "function",
                                        "info": "Convert load to volume. Default 1 hour normalization.",
                                        "returns": "pd.Series",
                                        "parameters": {
                                            "ts": "pd.Series",
                                            "normalization": "noos.analytics._core.conversions.Normalization"
                                        }
                                    },
                                    "convert_volume_to_load": {
                                        "type": "function",
                                        "info": "Convert volume to load. Default 1 hour normalization.",
                                        "returns": "pd.Series",
                                        "parameters": {
                                            "ts": "pd.Series",
                                            "normalization": "noos.analytics._core.conversions.Normalization"
                                        }
                                    },
                                    "decorators": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "Iterable": {
                                                "type": "object",
                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                "returns": "typing._SpecialGenericAlias"
                                            },
                                            "cache_results": {
                                                "type": "function",
                                                "info": "Caches the result of the decorated function.",
                                                "returns": "noos.analytics._core.decorators.Callable",
                                                "parameters": {
                                                    "file_name": "str",
                                                    "cache_folder": "str"
                                                }
                                            },
                                            "exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "force_bool": {
                                                "type": "function",
                                                "info": "Enforce the output of a callable to be a boolean.",
                                                "returns": "noos.analytics._core.decorators.Callable",
                                                "parameters": {
                                                    "func": "noos.analytics._core.decorators.Callable"
                                                }
                                            },
                                            "validators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "check_1d_array": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "obj": "numpy.ndarray"
                                                        }
                                                    },
                                                    "check_columns": {
                                                        "type": "function",
                                                        "info": "Validate format of a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "check_dataframe_not_empty": {
                                                        "type": "function",
                                                        "info": "Check a dataframe is not empty.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_datetimeindex_is_aware": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_datetimeindex": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_nil_end_value": {
                                                        "type": "function",
                                                        "info": "Check that a time series is closed by checking that the last value is 0.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_index_unique_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_dataframe": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_series": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas series.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_timeserie_numeric_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_tzinfo": {
                                                        "type": "function",
                                                        "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                        }
                                                    },
                                                    "check_no_nans_in_dataframe": {
                                                        "type": "function",
                                                        "info": "Validate non-NaN values in a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_no_nans_in_series": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_series_numeric": {
                                                        "type": "function",
                                                        "info": "Check if a pandas Series contains only numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validate_dataframe": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "dataframe_not_empty": "bool",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "wraps": {
                                                "type": "function",
                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                "returns": "None",
                                                "parameters": {
                                                    "wrapped": "None",
                                                    "assigned": "None",
                                                    "updated": "None"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "infer_nil_end": {
                                        "type": "function",
                                        "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                        "returns": "pd.Series",
                                        "parameters": {
                                            "ts": "pd.Series",
                                            "timestep": "datetime.timedelta"
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "dataframes": {
                                "type": "module",
                                "info": "Utility functions for operating on Pandas data frames.",
                                "items": {
                                    "ClassVar": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "typing._SpecialForm"
                                    },
                                    "IntervalClosedType": {
                                        "type": "object",
                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                        "returns": "typing._UnionGenericAlias"
                                    },
                                    "PandasMixin": {
                                        "type": "class",
                                        "info": "Mixin for factories and queries out of a pandas data frame.",
                                        "returns": "noos.analytics._core.dataframes.PandasMixin",
                                        "items": {
                                            "COLUMNS": {
                                                "type": "attribute",
                                                "info": "",
                                                "returns": "typing.ClassVar[set]"
                                            },
                                            "from_dict": {
                                                "type": "object",
                                                "info": "Create a bound instance method object.",
                                                "returns": "method"
                                            },
                                            "from_pandas": {
                                                "type": "object",
                                                "info": "Create a bound instance method object.",
                                                "returns": "method"
                                            },
                                            "to_dict": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "list[dict[str, typing.Any]]",
                                                "parameters": {}
                                            },
                                            "to_pandas": {
                                                "type": "function",
                                                "info": "Export a IndexSet object as a pandas data frame.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {}
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "wrapper_descriptor"
                                            }
                                        }
                                    },
                                    "check_index_difference_empty": {
                                        "type": "function",
                                        "info": "",
                                        "returns": "None",
                                        "parameters": {
                                            "df": "pd.Series|pd.DataFrame",
                                            "larger_df": "pd.Series|pd.DataFrame",
                                            "df_name": "str",
                                            "larger_df_name": "str"
                                        }
                                    },
                                    "create_time_index": {
                                        "type": "function",
                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                        "returns": "pd.DatetimeIndex",
                                        "parameters": {
                                            "start_at": "datetime.datetime",
                                            "end_at": "datetime.datetime",
                                            "frequency": "str",
                                            "timezone_str": "str",
                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                        }
                                    },
                                    "dataframes": {
                                        "type": "module",
                                        "info": "Utility functions for operating on Pandas data frames.",
                                        "items": {
                                            "ClassVar": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "typing._SpecialForm"
                                            },
                                            "IntervalClosedType": {
                                                "type": "object",
                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                "returns": "typing._UnionGenericAlias"
                                            },
                                            "check_index_difference_empty": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "None",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame",
                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                    "df_name": "str",
                                                    "larger_df_name": "str"
                                                }
                                            },
                                            "create_time_index": {
                                                "type": "function",
                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                "returns": "pd.DatetimeIndex",
                                                "parameters": {
                                                    "start_at": "datetime.datetime",
                                                    "end_at": "datetime.datetime",
                                                    "frequency": "str",
                                                    "timezone_str": "str",
                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                }
                                            },
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "get_intersection": {
                                                "type": "function",
                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                "returns": "pd.Index",
                                                "parameters": {
                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                }
                                            },
                                            "localtime": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "UTC": {
                                                        "type": "object",
                                                        "info": "Abstract base class for time zone info objects.",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "date_astimezone": {
                                                        "type": "function",
                                                        "info": "Convert a date to a datetime in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "normalize": {
                                                        "type": "function",
                                                        "info": "Normalize a date to a midnight time in UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "now": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {}
                                                    },
                                                    "prev_weekday": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "prev_weekday_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "to_timezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to another time zone.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime",
                                                            "timezone_str": "str"
                                                        }
                                                    },
                                                    "to_utctimezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime"
                                                        }
                                                    },
                                                    "today": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {}
                                                    },
                                                    "today_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "month_slice": {
                                                "type": "function",
                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                    "start_at": "datetime.datetime",
                                                    "is_closed_right": "bool"
                                                }
                                            },
                                            "time_slice": {
                                                "type": "function",
                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                "returns": "pd.Series|pd.DataFrame",
                                                "parameters": {
                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                    "start_at": "datetime.datetime | None",
                                                    "end_at": "datetime.datetime | None",
                                                    "is_closed_right": "bool"
                                                }
                                            },
                                            "to_continuous_time_index": {
                                                "type": "function",
                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                "returns": "pd.Index",
                                                "parameters": {
                                                    "time_index": "pd.DatetimeIndex",
                                                    "base_time": "datetime.datetime | None",
                                                    "reference_period": "datetime.timedelta"
                                                }
                                            },
                                            "to_continuous_time_series": {
                                                "type": "function",
                                                "info": "Convert a pandas time series to a continuous time series.",
                                                "returns": "pd.Series",
                                                "parameters": {
                                                    "time_series": "pd.Series",
                                                    "base_time": "datetime.datetime | None"
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyPandas": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "AnyTimezone": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "MetadataType": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Record": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Records": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "decorators": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "Iterable": {
                                                "type": "object",
                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                "returns": "typing._SpecialGenericAlias"
                                            },
                                            "cache_results": {
                                                "type": "function",
                                                "info": "Caches the result of the decorated function.",
                                                "returns": "noos.analytics._core.decorators.Callable",
                                                "parameters": {
                                                    "file_name": "str",
                                                    "cache_folder": "str"
                                                }
                                            },
                                            "exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "force_bool": {
                                                "type": "function",
                                                "info": "Enforce the output of a callable to be a boolean.",
                                                "returns": "noos.analytics._core.decorators.Callable",
                                                "parameters": {
                                                    "func": "noos.analytics._core.decorators.Callable"
                                                }
                                            },
                                            "validators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "check_1d_array": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "obj": "numpy.ndarray"
                                                        }
                                                    },
                                                    "check_columns": {
                                                        "type": "function",
                                                        "info": "Validate format of a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "check_dataframe_not_empty": {
                                                        "type": "function",
                                                        "info": "Check a dataframe is not empty.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_datetimeindex_is_aware": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_datetimeindex": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_nil_end_value": {
                                                        "type": "function",
                                                        "info": "Check that a time series is closed by checking that the last value is 0.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_index_unique_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_dataframe": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_series": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas series.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_timeserie_numeric_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_tzinfo": {
                                                        "type": "function",
                                                        "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                        }
                                                    },
                                                    "check_no_nans_in_dataframe": {
                                                        "type": "function",
                                                        "info": "Validate non-NaN values in a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_no_nans_in_series": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_series_numeric": {
                                                        "type": "function",
                                                        "info": "Check if a pandas Series contains only numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validate_dataframe": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "dataframe_not_empty": "bool",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "wraps": {
                                                "type": "function",
                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                "returns": "None",
                                                "parameters": {
                                                    "wrapped": "None",
                                                    "assigned": "None",
                                                    "updated": "None"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "get_intersection": {
                                        "type": "function",
                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                        "returns": "pd.Index",
                                        "parameters": {
                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                        }
                                    },
                                    "localtime": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "UTC": {
                                                "type": "object",
                                                "info": "Abstract base class for time zone info objects.",
                                                "returns": "zoneinfo.ZoneInfo"
                                            },
                                            "date_astimezone": {
                                                "type": "function",
                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                "returns": "datetime.datetime",
                                                "parameters": {
                                                    "date": "datetime.date",
                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                }
                                            },
                                            "normalize": {
                                                "type": "function",
                                                "info": "Normalize a date to a midnight time in UTC.",
                                                "returns": "datetime.datetime",
                                                "parameters": {
                                                    "date": "datetime.date"
                                                }
                                            },
                                            "now": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "datetime.datetime",
                                                "parameters": {}
                                            },
                                            "prev_weekday": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "datetime.date",
                                                "parameters": {
                                                    "date": "datetime.date"
                                                }
                                            },
                                            "prev_weekday_astimezone": {
                                                "type": "function",
                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                "returns": "datetime.datetime",
                                                "parameters": {
                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                }
                                            },
                                            "to_timezone": {
                                                "type": "function",
                                                "info": "Converts an aware datetime to another time zone.",
                                                "returns": "datetime.datetime",
                                                "parameters": {
                                                    "local_time": "datetime.datetime",
                                                    "timezone_str": "str"
                                                }
                                            },
                                            "to_utctimezone": {
                                                "type": "function",
                                                "info": "Converts an aware datetime to UTC.",
                                                "returns": "datetime.datetime",
                                                "parameters": {
                                                    "local_time": "datetime.datetime"
                                                }
                                            },
                                            "today": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "datetime.date",
                                                "parameters": {}
                                            },
                                            "today_astimezone": {
                                                "type": "function",
                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                "returns": "datetime.datetime",
                                                "parameters": {
                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "month_slice": {
                                        "type": "function",
                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                        "returns": "pd.Series|pd.DataFrame",
                                        "parameters": {
                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                            "start_at": "datetime.datetime",
                                            "is_closed_right": "bool"
                                        }
                                    },
                                    "relativedelta": {
                                        "type": "class",
                                        "info": "The relativedelta type is designed to be applied to an existing datetime and",
                                        "returns": "noos.analytics._core.dataframes.relativedelta",
                                        "items": {
                                            "normalized": {
                                                "type": "function",
                                                "info": "Return a version of this object represented entirely using integer",
                                                "returns": "None",
                                                "parameters": {}
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {
                                                    "dt1": "None",
                                                    "dt2": "None",
                                                    "years": "None",
                                                    "months": "None",
                                                    "days": "None",
                                                    "leapdays": "None",
                                                    "weeks": "None",
                                                    "hours": "None",
                                                    "minutes": "None",
                                                    "seconds": "None",
                                                    "microseconds": "None",
                                                    "year": "None",
                                                    "month": "None",
                                                    "day": "None",
                                                    "weekday": "None",
                                                    "yearday": "None",
                                                    "nlyearday": "None",
                                                    "hour": "None",
                                                    "minute": "None",
                                                    "second": "None",
                                                    "microsecond": "None"
                                                }
                                            }
                                        }
                                    },
                                    "time_slice": {
                                        "type": "function",
                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                        "returns": "pd.Series|pd.DataFrame",
                                        "parameters": {
                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                            "start_at": "datetime.datetime | None",
                                            "end_at": "datetime.datetime | None",
                                            "is_closed_right": "bool"
                                        }
                                    },
                                    "to_continuous_time_index": {
                                        "type": "function",
                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                        "returns": "pd.Index",
                                        "parameters": {
                                            "time_index": "pd.DatetimeIndex",
                                            "base_time": "datetime.datetime | None",
                                            "reference_period": "datetime.timedelta"
                                        }
                                    },
                                    "to_continuous_time_series": {
                                        "type": "function",
                                        "info": "Convert a pandas time series to a continuous time series.",
                                        "returns": "pd.Series",
                                        "parameters": {
                                            "time_series": "pd.Series",
                                            "base_time": "datetime.datetime | None"
                                        }
                                    },
                                    "types": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "AnyPandas": {
                                                "type": "object",
                                                "info": "Represent a PEP 604 union type",
                                                "returns": "types.UnionType"
                                            },
                                            "AnyTimezone": {
                                                "type": "object",
                                                "info": "Represent a PEP 604 union type",
                                                "returns": "types.UnionType"
                                            },
                                            "MetadataType": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "Record": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "Records": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "datetimes": {
                                "type": "module",
                                "info": "Utility functions for operating on date times.",
                                "items": {
                                    "ensure_tz_aware_datetime": {
                                        "type": "function",
                                        "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                        "returns": "datetime.datetime",
                                        "parameters": {
                                            "obj": "str | datetime.datetime | datetime.date"
                                        }
                                    },
                                    "ensure_utc_datetime": {
                                        "type": "function",
                                        "info": "Returns a datetime object with UTC timezone.",
                                        "returns": "datetime.datetime",
                                        "parameters": {
                                            "obj": "str | datetime.datetime | datetime.date"
                                        }
                                    },
                                    "is_extended_weekend_day": {
                                        "type": "function",
                                        "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                        "returns": "bool",
                                        "parameters": {
                                            "date": "datetime.date",
                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                        }
                                    },
                                    "next_extended_weekend_day": {
                                        "type": "function",
                                        "info": "Return the next extended weekend day after the given date.",
                                        "returns": "datetime.date",
                                        "parameters": {
                                            "date": "datetime.date",
                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                        }
                                    },
                                    "next_non_extended_weekend_day": {
                                        "type": "function",
                                        "info": "Return the next non extended weekend day after the given date.",
                                        "returns": "datetime.date",
                                        "parameters": {
                                            "date": "datetime.date",
                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                        }
                                    },
                                    "to_timedelta": {
                                        "type": "function",
                                        "info": "Transform a frequency string into a timedelta object.",
                                        "returns": "datetime.timedelta",
                                        "parameters": {
                                            "freq": "str"
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "decorators": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "Callable": {
                                        "type": "class",
                                        "info": "",
                                        "returns": "noos.analytics._core.decorators.Callable",
                                        "items": {
                                            "__call__": {
                                                "type": "function",
                                                "info": "Call self as a function.",
                                                "returns": "None",
                                                "parameters": {
                                                    "args": "None",
                                                    "kwds": "None"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "wrapper_descriptor"
                                            }
                                        }
                                    },
                                    "CheckClassType": {
                                        "type": "class",
                                        "info": "",
                                        "returns": "noos.analytics._core.decorators.CheckClassType",
                                        "items": {
                                            "__call__": {
                                                "type": "function",
                                                "info": "Call self as a function.",
                                                "returns": "noos.analytics._core.decorators.Callable",
                                                "parameters": {
                                                    "func": "noos.analytics._core.decorators.Callable"
                                                }
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {}
                                            }
                                        }
                                    },
                                    "CheckDimension": {
                                        "type": "class",
                                        "info": "",
                                        "returns": "noos.analytics._core.decorators.CheckDimension",
                                        "items": {
                                            "__call__": {
                                                "type": "function",
                                                "info": "Call self as a function.",
                                                "returns": "noos.analytics._core.decorators.Callable",
                                                "parameters": {
                                                    "func": "noos.analytics._core.decorators.Callable"
                                                }
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {
                                                    "n_args": "int",
                                                    "enforce": "bool"
                                                }
                                            }
                                        }
                                    },
                                    "CheckHasDatetimeIndex": {
                                        "type": "class",
                                        "info": "Check `pd.DataFrame` or `pd.Series` has a DatetimeIndex.",
                                        "returns": "noos.analytics._core.decorators.CheckHasDatetimeIndex",
                                        "items": {
                                            "__call__": {
                                                "type": "function",
                                                "info": "Call self as a function.",
                                                "returns": "noos.analytics._core.decorators.Callable",
                                                "parameters": {
                                                    "func": "noos.analytics._core.decorators.Callable"
                                                }
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {
                                                    "kwarg_key": "str | None",
                                                    "is_unique_monotonic_increasing": "bool"
                                                }
                                            }
                                        }
                                    },
                                    "Iterable": {
                                        "type": "object",
                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                        "returns": "typing._SpecialGenericAlias"
                                    },
                                    "ValidateDataframe": {
                                        "type": "class",
                                        "info": "Check `pd.DataFrame` columns and more on a function given named argument.",
                                        "returns": "noos.analytics._core.decorators.ValidateDataframe",
                                        "items": {
                                            "__call__": {
                                                "type": "function",
                                                "info": "Call self as a function.",
                                                "returns": "noos.analytics._core.decorators.Callable",
                                                "parameters": {
                                                    "func": "noos.analytics._core.decorators.Callable"
                                                }
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {
                                                    "kwarg_key": "str",
                                                    "dataframe_not_empty": "bool",
                                                    "columns": "typing.Optional[typing.Iterable]"
                                                }
                                            }
                                        }
                                    },
                                    "ValidateDictionary": {
                                        "type": "class",
                                        "info": "",
                                        "returns": "noos.analytics._core.decorators.ValidateDictionary",
                                        "items": {
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "wrapper_descriptor"
                                            }
                                        }
                                    },
                                    "cache_results": {
                                        "type": "function",
                                        "info": "Caches the result of the decorated function.",
                                        "returns": "noos.analytics._core.decorators.Callable",
                                        "parameters": {
                                            "file_name": "str",
                                            "cache_folder": "str"
                                        }
                                    },
                                    "exceptions": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "force_bool": {
                                        "type": "function",
                                        "info": "Enforce the output of a callable to be a boolean.",
                                        "returns": "noos.analytics._core.decorators.Callable",
                                        "parameters": {
                                            "func": "noos.analytics._core.decorators.Callable"
                                        }
                                    },
                                    "validators": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "check_1d_array": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "None",
                                                "parameters": {
                                                    "obj": "numpy.ndarray"
                                                }
                                            },
                                            "check_columns": {
                                                "type": "function",
                                                "info": "Validate format of a pandas dataframe.",
                                                "returns": "None",
                                                "parameters": {
                                                    "df": "pd.DataFrame",
                                                    "expected_columns": "set"
                                                }
                                            },
                                            "check_dataframe_not_empty": {
                                                "type": "function",
                                                "info": "Check a dataframe is not empty.",
                                                "returns": "None",
                                                "parameters": {
                                                    "df": "pd.DataFrame"
                                                }
                                            },
                                            "check_datetimeindex_is_aware": {
                                                "type": "function",
                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                "returns": "None",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "check_has_datetimeindex": {
                                                "type": "function",
                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                "returns": "None",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "check_has_nil_end_value": {
                                                "type": "function",
                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                "returns": "None",
                                                "parameters": {
                                                    "ts": "pd.Series"
                                                }
                                            },
                                            "check_index_unique_monotonic_increasing": {
                                                "type": "function",
                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                "returns": "None",
                                                "parameters": {
                                                    "df": "pd.Series|pd.DataFrame"
                                                }
                                            },
                                            "check_is_pandas_dataframe": {
                                                "type": "function",
                                                "info": "Check if object is a pandas dataframe.",
                                                "returns": "None",
                                                "parameters": {
                                                    "df": "pd.DataFrame"
                                                }
                                            },
                                            "check_is_pandas_series": {
                                                "type": "function",
                                                "info": "Check if object is a pandas series.",
                                                "returns": "None",
                                                "parameters": {
                                                    "ts": "pd.Series"
                                                }
                                            },
                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                "type": "function",
                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                "returns": "None",
                                                "parameters": {
                                                    "ts": "pd.Series"
                                                }
                                            },
                                            "check_is_tzinfo": {
                                                "type": "function",
                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                "returns": "None",
                                                "parameters": {
                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                }
                                            },
                                            "check_no_nans_in_dataframe": {
                                                "type": "function",
                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                "returns": "None",
                                                "parameters": {
                                                    "df": "pd.DataFrame"
                                                }
                                            },
                                            "check_no_nans_in_series": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "None",
                                                "parameters": {
                                                    "ts": "pd.Series"
                                                }
                                            },
                                            "check_series_numeric": {
                                                "type": "function",
                                                "info": "Check if a pandas Series contains only numeric values.",
                                                "returns": "None",
                                                "parameters": {
                                                    "ts": "pd.Series"
                                                }
                                            },
                                            "exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyPandas": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "AnyTimezone": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "MetadataType": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Record": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Records": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "validate_dataframe": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "df": "pd.DataFrame",
                                                    "dataframe_not_empty": "bool",
                                                    "expected_columns": "set"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "wraps": {
                                        "type": "function",
                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                        "returns": "None",
                                        "parameters": {
                                            "wrapped": "None",
                                            "assigned": "None",
                                            "updated": "None"
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "enums": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "BaseEnum": {
                                        "type": "class",
                                        "info": "Create a collection of name/value pairs.",
                                        "returns": "noos.analytics._core.enums.BaseEnum",
                                        "items": {
                                            "__getitem__": {
                                                "type": "object",
                                                "info": "Create a bound instance method object.",
                                                "returns": "method"
                                            },
                                            "name": {
                                                "type": "object",
                                                "info": "This is a descriptor, used to define attributes that act differently",
                                                "returns": "enum.property"
                                            },
                                            "value": {
                                                "type": "object",
                                                "info": "This is a descriptor, used to define attributes that act differently",
                                                "returns": "enum.property"
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {
                                                    "args": "None",
                                                    "kwds": "None"
                                                }
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "exceptions": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "EmptyDataframeError": {
                                        "type": "class",
                                        "info": "Basic exception raised for an empty DataFrame.",
                                        "returns": "noos.analytics._core.exceptions.EmptyDataframeError",
                                        "items": {
                                            "add_note": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method_descriptor"
                                            },
                                            "args": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "getset_descriptor"
                                            },
                                            "with_traceback": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method_descriptor"
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "wrapper_descriptor"
                                            }
                                        }
                                    },
                                    "ValidationError": {
                                        "type": "class",
                                        "info": "Basic exception raised for validation error.",
                                        "returns": "noos.analytics._core.exceptions.ValidationError",
                                        "items": {
                                            "add_note": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method_descriptor"
                                            },
                                            "args": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "getset_descriptor"
                                            },
                                            "with_traceback": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method_descriptor"
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "wrapper_descriptor"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "holidays": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "IMPLEMENTED_HOLIDAYS": {
                                        "type": "object",
                                        "info": "dict() -> new empty dictionary",
                                        "returns": "dict"
                                    },
                                    "get_holidays": {
                                        "type": "function",
                                        "info": "",
                                        "returns": "holidays.holiday_base.HolidayBase",
                                        "parameters": {
                                            "holidays_zone": "str"
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "localtime": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "UTC": {
                                        "type": "object",
                                        "info": "Abstract base class for time zone info objects.",
                                        "returns": "zoneinfo.ZoneInfo"
                                    },
                                    "date_astimezone": {
                                        "type": "function",
                                        "info": "Convert a date to a datetime in timezone (default UTC).",
                                        "returns": "datetime.datetime",
                                        "parameters": {
                                            "date": "datetime.date",
                                            "tzinfo": "zoneinfo.ZoneInfo"
                                        }
                                    },
                                    "normalize": {
                                        "type": "function",
                                        "info": "Normalize a date to a midnight time in UTC.",
                                        "returns": "datetime.datetime",
                                        "parameters": {
                                            "date": "datetime.date"
                                        }
                                    },
                                    "now": {
                                        "type": "function",
                                        "info": "",
                                        "returns": "datetime.datetime",
                                        "parameters": {}
                                    },
                                    "prev_weekday": {
                                        "type": "function",
                                        "info": "",
                                        "returns": "datetime.date",
                                        "parameters": {
                                            "date": "datetime.date"
                                        }
                                    },
                                    "prev_weekday_astimezone": {
                                        "type": "function",
                                        "info": "Return local today's midnight in timezone (default UTC).",
                                        "returns": "datetime.datetime",
                                        "parameters": {
                                            "tzinfo": "zoneinfo.ZoneInfo"
                                        }
                                    },
                                    "to_timezone": {
                                        "type": "function",
                                        "info": "Converts an aware datetime to another time zone.",
                                        "returns": "datetime.datetime",
                                        "parameters": {
                                            "local_time": "datetime.datetime",
                                            "timezone_str": "str"
                                        }
                                    },
                                    "to_utctimezone": {
                                        "type": "function",
                                        "info": "Converts an aware datetime to UTC.",
                                        "returns": "datetime.datetime",
                                        "parameters": {
                                            "local_time": "datetime.datetime"
                                        }
                                    },
                                    "today": {
                                        "type": "function",
                                        "info": "",
                                        "returns": "datetime.date",
                                        "parameters": {}
                                    },
                                    "today_astimezone": {
                                        "type": "function",
                                        "info": "Return local today's midnight in timezone (default UTC).",
                                        "returns": "datetime.datetime",
                                        "parameters": {
                                            "tzinfo": "zoneinfo.ZoneInfo"
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "strings": {
                                "type": "module",
                                "info": "Utility functions for operating on strings.",
                                "items": {
                                    "ReprMixin": {
                                        "type": "class",
                                        "info": "",
                                        "returns": "noos.analytics._core.strings.ReprMixin",
                                        "items": {
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "wrapper_descriptor"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "types": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "AnyPandas": {
                                        "type": "object",
                                        "info": "Represent a PEP 604 union type",
                                        "returns": "types.UnionType"
                                    },
                                    "AnyTimezone": {
                                        "type": "object",
                                        "info": "Represent a PEP 604 union type",
                                        "returns": "types.UnionType"
                                    },
                                    "MetadataType": {
                                        "type": "object",
                                        "info": "Represent a PEP 585 generic type",
                                        "returns": "types.GenericAlias"
                                    },
                                    "Record": {
                                        "type": "object",
                                        "info": "Represent a PEP 585 generic type",
                                        "returns": "types.GenericAlias"
                                    },
                                    "Records": {
                                        "type": "object",
                                        "info": "Represent a PEP 585 generic type",
                                        "returns": "types.GenericAlias"
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "validators": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "check_1d_array": {
                                        "type": "function",
                                        "info": "",
                                        "returns": "None",
                                        "parameters": {
                                            "obj": "numpy.ndarray"
                                        }
                                    },
                                    "check_columns": {
                                        "type": "function",
                                        "info": "Validate format of a pandas dataframe.",
                                        "returns": "None",
                                        "parameters": {
                                            "df": "pd.DataFrame",
                                            "expected_columns": "set"
                                        }
                                    },
                                    "check_dataframe_not_empty": {
                                        "type": "function",
                                        "info": "Check a dataframe is not empty.",
                                        "returns": "None",
                                        "parameters": {
                                            "df": "pd.DataFrame"
                                        }
                                    },
                                    "check_datetimeindex_is_aware": {
                                        "type": "function",
                                        "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                        "returns": "None",
                                        "parameters": {
                                            "df": "pd.Series|pd.DataFrame"
                                        }
                                    },
                                    "check_has_datetimeindex": {
                                        "type": "function",
                                        "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                        "returns": "None",
                                        "parameters": {
                                            "df": "pd.Series|pd.DataFrame"
                                        }
                                    },
                                    "check_has_nil_end_value": {
                                        "type": "function",
                                        "info": "Check that a time series is closed by checking that the last value is 0.",
                                        "returns": "None",
                                        "parameters": {
                                            "ts": "pd.Series"
                                        }
                                    },
                                    "check_index_unique_monotonic_increasing": {
                                        "type": "function",
                                        "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                        "returns": "None",
                                        "parameters": {
                                            "df": "pd.Series|pd.DataFrame"
                                        }
                                    },
                                    "check_is_pandas_dataframe": {
                                        "type": "function",
                                        "info": "Check if object is a pandas dataframe.",
                                        "returns": "None",
                                        "parameters": {
                                            "df": "pd.DataFrame"
                                        }
                                    },
                                    "check_is_pandas_series": {
                                        "type": "function",
                                        "info": "Check if object is a pandas series.",
                                        "returns": "None",
                                        "parameters": {
                                            "ts": "pd.Series"
                                        }
                                    },
                                    "check_is_timeserie_numeric_monotonic_increasing": {
                                        "type": "function",
                                        "info": "Validate that a time series has valid index and non-nan numeric values.",
                                        "returns": "None",
                                        "parameters": {
                                            "ts": "pd.Series"
                                        }
                                    },
                                    "check_is_tzinfo": {
                                        "type": "function",
                                        "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                        "returns": "None",
                                        "parameters": {
                                            "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                        }
                                    },
                                    "check_no_nans_in_dataframe": {
                                        "type": "function",
                                        "info": "Validate non-NaN values in a pandas dataframe.",
                                        "returns": "None",
                                        "parameters": {
                                            "df": "pd.DataFrame"
                                        }
                                    },
                                    "check_no_nans_in_series": {
                                        "type": "function",
                                        "info": "",
                                        "returns": "None",
                                        "parameters": {
                                            "ts": "pd.Series"
                                        }
                                    },
                                    "check_series_numeric": {
                                        "type": "function",
                                        "info": "Check if a pandas Series contains only numeric values.",
                                        "returns": "None",
                                        "parameters": {
                                            "ts": "pd.Series"
                                        }
                                    },
                                    "exceptions": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "types": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "AnyPandas": {
                                                "type": "object",
                                                "info": "Represent a PEP 604 union type",
                                                "returns": "types.UnionType"
                                            },
                                            "AnyTimezone": {
                                                "type": "object",
                                                "info": "Represent a PEP 604 union type",
                                                "returns": "types.UnionType"
                                            },
                                            "MetadataType": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "Record": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "Records": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "validate_dataframe": {
                                        "type": "function",
                                        "info": "",
                                        "returns": "pd.DataFrame",
                                        "parameters": {
                                            "df": "pd.DataFrame",
                                            "dataframe_not_empty": "bool",
                                            "expected_columns": "set"
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "method-wrapper"
                            }
                        }
                    },
                    "_domain": {
                        "type": "module",
                        "info": "",
                        "items": {
                            "contracts": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "BaseContract": {
                                        "type": "class",
                                        "info": "Base class for contracts.",
                                        "returns": "noos.analytics._domain.contracts.BaseContract",
                                        "items": {
                                            "price": {
                                                "type": "function",
                                                "info": "Generic price method to be implemented by subclasses.",
                                                "returns": "noos.analytics._domain.contracts.BasePricingResult",
                                                "parameters": {
                                                    "market_data": "noos.analytics.MarketData"
                                                }
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {}
                                            }
                                        }
                                    },
                                    "BasePricingResult": {
                                        "type": "class",
                                        "info": "Base class for pricing results.",
                                        "returns": "noos.analytics._domain.contracts.BasePricingResult",
                                        "items": {
                                            "volume": {
                                                "type": "property",
                                                "info": "Return the total volume in MWh.",
                                                "returns": "float"
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {
                                                    "volume_ts": "pd.Series"
                                                }
                                            }
                                        }
                                    },
                                    "base": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "info": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "class_repr": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "class_instance": "noos.analytics._core.collections.Any",
                                                            "repr_attributes": "tuple[str, ...]",
                                                            "omit_class_name": "bool"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "market_data": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbols": {
                                                        "type": "module",
                                                        "info": "Mnemonic for naming instruments.",
                                                        "items": {
                                                            "ASSET": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "ASSET_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CALENDAR_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CALENDAR_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CONTRACT": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CONTRACT_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "INTRADAY_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "INTRADAY_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "contracts": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbol_from_dict": {
                                                                "type": "function",
                                                                "info": "Construct a symbol from a dictionary.",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "record": "dict[str, typing.Any]"
                                                                }
                                                            },
                                                            "symbol_to_dict": {
                                                                "type": "function",
                                                                "info": "Construct a dictionary from a symbol.",
                                                                "returns": "dict[str, typing.Any]",
                                                                "parameters": {
                                                                    "symbol": "str"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "pricing": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "load": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "market_data": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbols": {
                                                                "type": "module",
                                                                "info": "Mnemonic for naming instruments.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "battery": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "contract": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "pricing": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "load": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "market_data": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbols": {
                                                                "type": "module",
                                                                "info": "Mnemonic for naming instruments.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "optimiser": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "load": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "logger": {
                                                                "type": "object",
                                                                "info": "Instances of the Logger class represent a single logging channel. A",
                                                                "returns": "logging.Logger"
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "pricing": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "load": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "optimiser": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "dataclass": {
                                                        "type": "function",
                                                        "info": "Add dunder methods based on the fields defined in the class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None",
                                                            "init": "None",
                                                            "repr": "None",
                                                            "eq": "None",
                                                            "order": "None",
                                                            "unsafe_hash": "None",
                                                            "frozen": "None",
                                                            "match_args": "None",
                                                            "kw_only": "None",
                                                            "slots": "None",
                                                            "weakref_slot": "None"
                                                        }
                                                    },
                                                    "load": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "logger": {
                                                        "type": "object",
                                                        "info": "Instances of the Logger class represent a single logging channel. A",
                                                        "returns": "logging.Logger"
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "dataclass": {
                                                        "type": "function",
                                                        "info": "Add dunder methods based on the fields defined in the class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None",
                                                            "init": "None",
                                                            "repr": "None",
                                                            "eq": "None",
                                                            "order": "None",
                                                            "unsafe_hash": "None",
                                                            "frozen": "None",
                                                            "match_args": "None",
                                                            "kw_only": "None",
                                                            "slots": "None",
                                                            "weakref_slot": "None"
                                                        }
                                                    },
                                                    "market_data": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbols": {
                                                                "type": "module",
                                                                "info": "Mnemonic for naming instruments.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "brp": {
                                        "type": "module",
                                        "info": "Module describing Balancing Responsible Party contracts (spot, imbalance, ispp, ispn).",
                                        "items": {
                                            "LoadSinglePriceSerieContract": {
                                                "type": "class",
                                                "info": "Price class for pricing with a single price time series.",
                                                "returns": "noos.analytics._domain.contracts.brp.LoadSinglePriceSerieContract",
                                                "items": {
                                                    "price": {
                                                        "type": "function",
                                                        "info": "Generic price method to be implemented by subclasses.",
                                                        "returns": "noos.analytics.LoadPricingResult",
                                                        "parameters": {
                                                            "market_data": "noos.analytics.MarketData"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "load": "noos.analytics.LoadCurveBase",
                                                            "risk_premium": "float",
                                                            "risk_premium_pct": "float"
                                                        }
                                                    }
                                                }
                                            },
                                            "PwrteSpotImbalanceContract": {
                                                "type": "class",
                                                "info": "",
                                                "returns": "noos.analytics._domain.contracts.brp.PwrteSpotImbalanceContract",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "PwrteSpotTrade": {
                                                "type": "class",
                                                "info": "Trade for load on the PWRTE spot market.",
                                                "returns": "noos.analytics._domain.contracts.brp.PwrteSpotTrade",
                                                "items": {
                                                    "price": {
                                                        "type": "function",
                                                        "info": "Generic price method to be implemented by subclasses.",
                                                        "returns": "noos.analytics.LoadPricingResult",
                                                        "parameters": {
                                                            "market_data": "noos.analytics.MarketData"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "load": "noos.analytics.LoadCurveBase",
                                                            "risk_premium": "float",
                                                            "risk_premium_pct": "float"
                                                        }
                                                    }
                                                }
                                            },
                                            "exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "info": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "class_repr": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "class_instance": "noos.analytics._core.collections.Any",
                                                            "repr_attributes": "tuple[str, ...]",
                                                            "omit_class_name": "bool"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "load": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "market_data": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbols": {
                                                        "type": "module",
                                                        "info": "Mnemonic for naming instruments.",
                                                        "items": {
                                                            "ASSET": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "ASSET_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CALENDAR_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CALENDAR_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CONTRACT": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CONTRACT_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "INTRADAY_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "INTRADAY_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "contracts": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbol_from_dict": {
                                                                "type": "function",
                                                                "info": "Construct a symbol from a dictionary.",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "record": "dict[str, typing.Any]"
                                                                }
                                                            },
                                                            "symbol_to_dict": {
                                                                "type": "function",
                                                                "info": "Construct a dictionary from a symbol.",
                                                                "returns": "dict[str, typing.Any]",
                                                                "parameters": {
                                                                    "symbol": "str"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "price_load_with_series": {
                                                "type": "function",
                                                "info": "Compute the monetary value of the load time series given a price time series.",
                                                "returns": "pd.Series",
                                                "parameters": {
                                                    "load": "noos.analytics.LoadCurveBase",
                                                    "price_ts": "pd.Series",
                                                    "risk_premium": "float",
                                                    "risk_premium_pct": "float"
                                                }
                                            },
                                            "pricing": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "load": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "market_data": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbols": {
                                                                "type": "module",
                                                                "info": "Mnemonic for naming instruments.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "validator_exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "validators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "check_1d_array": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "obj": "numpy.ndarray"
                                                        }
                                                    },
                                                    "check_columns": {
                                                        "type": "function",
                                                        "info": "Validate format of a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "check_dataframe_not_empty": {
                                                        "type": "function",
                                                        "info": "Check a dataframe is not empty.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_datetimeindex_is_aware": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_datetimeindex": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_nil_end_value": {
                                                        "type": "function",
                                                        "info": "Check that a time series is closed by checking that the last value is 0.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_index_unique_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_dataframe": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_series": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas series.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_timeserie_numeric_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_tzinfo": {
                                                        "type": "function",
                                                        "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                        }
                                                    },
                                                    "check_no_nans_in_dataframe": {
                                                        "type": "function",
                                                        "info": "Validate non-NaN values in a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_no_nans_in_series": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_series_numeric": {
                                                        "type": "function",
                                                        "info": "Check if a pandas Series contains only numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validate_dataframe": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "dataframe_not_empty": "bool",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "exceptions": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "ContractError": {
                                                "type": "class",
                                                "info": "Generic exception raised within the `domain.pricing` layer.",
                                                "returns": "noos.analytics._domain.contracts.exceptions.ContractError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "ValidationError": {
                                                "type": "class",
                                                "info": "Basic exception raised while validating a parameter.",
                                                "returns": "noos.analytics._domain.contracts.exceptions.ValidationError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "forward": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "ClassVar": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "typing._SpecialForm"
                                            },
                                            "REGEX_USCORE": {
                                                "type": "object",
                                                "info": "str(object='') -> str",
                                                "returns": "pd.CategoricalIndex.str"
                                            },
                                            "brp": {
                                                "type": "module",
                                                "info": "Module describing Balancing Responsible Party contracts (spot, imbalance, ispp, ispn).",
                                                "items": {
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "load": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "market_data": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbols": {
                                                                "type": "module",
                                                                "info": "Mnemonic for naming instruments.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "price_load_with_series": {
                                                        "type": "function",
                                                        "info": "Compute the monetary value of the load time series given a price time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "load": "noos.analytics.LoadCurveBase",
                                                            "price_ts": "pd.Series",
                                                            "risk_premium": "float",
                                                            "risk_premium_pct": "float"
                                                        }
                                                    },
                                                    "pricing": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "load": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validator_exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "conversions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "convert_load_to_volume": {
                                                        "type": "function",
                                                        "info": "Convert load to volume. Default 1 hour normalization.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series",
                                                            "normalization": "noos.analytics._core.conversions.Normalization"
                                                        }
                                                    },
                                                    "convert_volume_to_load": {
                                                        "type": "function",
                                                        "info": "Convert volume to load. Default 1 hour normalization.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series",
                                                            "normalization": "noos.analytics._core.conversions.Normalization"
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "infer_nil_end": {
                                                        "type": "function",
                                                        "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series",
                                                            "timestep": "datetime.timedelta"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "instruments": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "REGEX_USCORE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "deliveries": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "intraday": {
                                                                "type": "module",
                                                                "info": "Logic for validating intraday delivery periods.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "index": {
                                                        "type": "module",
                                                        "info": "Logic for validating index instruments.",
                                                        "items": {
                                                            "LEFT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "deliveries": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "strings": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on strings.",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "total_ordering": {
                                                        "type": "function",
                                                        "info": "Class decorator that fills in missing ordering methods",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "load": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "total_ordering": {
                                                "type": "function",
                                                "info": "Class decorator that fills in missing ordering methods",
                                                "returns": "None",
                                                "parameters": {
                                                    "cls": "None"
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyPandas": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "AnyTimezone": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "MetadataType": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Record": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Records": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "info": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "class_repr": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "pd.CategoricalIndex.str",
                                                "parameters": {
                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                    "repr_attributes": "tuple[str, ...]",
                                                    "omit_class_name": "bool"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "market_data": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "ASSET_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                            },
                                            "AssetDataBase": {
                                                "type": "class",
                                                "info": "Asset data class.",
                                                "returns": "noos.analytics._domain.contracts.market_data.AssetDataBase",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "key": "str"
                                                        }
                                                    },
                                                    "da": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "da_pfc": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "fixings": {
                                                        "type": "function",
                                                        "info": "Get fixings for the given asset.",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "min_delivery_period": "datetime.timedelta | None",
                                                            "published_at": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "historicals": {
                                                        "type": "function",
                                                        "info": "Get historicals for the given FWD contract.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "calendar_delivery": "str",
                                                            "intraday_delivery": "str"
                                                        }
                                                    },
                                                    "pfc": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "asset_name": "str",
                                                            "ref_date": "datetime.datetime",
                                                            "pfc_key": "str",
                                                            "da_key": "str",
                                                            "shift_pct": "float",
                                                            "shift_value": "float"
                                                        }
                                                    }
                                                }
                                            },
                                            "DailyAssetData": {
                                                "type": "class",
                                                "info": "Asset data class.",
                                                "returns": "noos.analytics._domain.contracts.market_data.DailyAssetData",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "key": "str"
                                                        }
                                                    },
                                                    "da": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "da_pfc": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "fixings": {
                                                        "type": "function",
                                                        "info": "Get fixings for the given asset.",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "min_delivery_period": "datetime.timedelta | None",
                                                            "published_at": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "historicals": {
                                                        "type": "function",
                                                        "info": "Get historicals for the given FWD contract.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "calendar_delivery": "str",
                                                            "intraday_delivery": "str"
                                                        }
                                                    },
                                                    "pfc": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "asset_name": "str",
                                                            "ref_date": "datetime.datetime",
                                                            "pfc_key": "str",
                                                            "da_key": "str",
                                                            "shift_pct": "float",
                                                            "shift_value": "float"
                                                        }
                                                    }
                                                }
                                            },
                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                            },
                                            "PfcData": {
                                                "type": "class",
                                                "info": "PFC Data class.",
                                                "returns": "noos.analytics._domain.contracts.market_data.PfcData",
                                                "items": {
                                                    "ts": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "key": "str",
                                                            "ref_date": "datetime.datetime",
                                                            "shift_pct": "float",
                                                            "shift_value": "float"
                                                        }
                                                    }
                                                }
                                            },
                                            "PwrteData": {
                                                "type": "class",
                                                "info": "Asset data class.",
                                                "returns": "noos.analytics._domain.contracts.market_data.PwrteData",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "key": "str"
                                                        }
                                                    },
                                                    "da": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "da_pfc": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "fixings": {
                                                        "type": "function",
                                                        "info": "Get fixings for the given asset.",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "min_delivery_period": "datetime.timedelta | None",
                                                            "published_at": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "historicals": {
                                                        "type": "function",
                                                        "info": "Get historicals for the given FWD contract.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "calendar_delivery": "str",
                                                            "intraday_delivery": "str"
                                                        }
                                                    },
                                                    "ispn": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "ispp": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "pfc": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Series"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "asset_name": "str",
                                                            "ref_date": "datetime.datetime",
                                                            "pfc_key": "str",
                                                            "da_key": "str",
                                                            "shift_pct": "float",
                                                            "shift_value": "float"
                                                        }
                                                    }
                                                }
                                            },
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "info": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "class_repr": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "class_instance": "noos.analytics._core.collections.Any",
                                                            "repr_attributes": "tuple[str, ...]",
                                                            "omit_class_name": "bool"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "localtime": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "UTC": {
                                                        "type": "object",
                                                        "info": "Abstract base class for time zone info objects.",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "date_astimezone": {
                                                        "type": "function",
                                                        "info": "Convert a date to a datetime in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "normalize": {
                                                        "type": "function",
                                                        "info": "Normalize a date to a midnight time in UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "now": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {}
                                                    },
                                                    "prev_weekday": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "prev_weekday_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "to_timezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to another time zone.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime",
                                                            "timezone_str": "str"
                                                        }
                                                    },
                                                    "to_utctimezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime"
                                                        }
                                                    },
                                                    "today": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {}
                                                    },
                                                    "today_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "symbols": {
                                                "type": "module",
                                                "info": "Mnemonic for naming instruments.",
                                                "items": {
                                                    "ASSET": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "ASSET_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "CALENDAR_PERIOD": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "CALENDAR_PERIOD_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "CONTRACT": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "CONTRACT_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "INTRADAY_PERIOD": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "INTRADAY_PERIOD_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "contracts": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "battery": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "brp": {
                                                                "type": "module",
                                                                "info": "Module describing Balancing Responsible Party contracts (spot, imbalance, ispp, ispn).",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "forward": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "price_load_with_series": {
                                                                "type": "function",
                                                                "info": "Compute the monetary value of the load time series given a price time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "load": "noos.analytics.LoadCurveBase",
                                                                    "price_ts": "pd.Series",
                                                                    "risk_premium": "float",
                                                                    "risk_premium_pct": "float"
                                                                }
                                                            },
                                                            "pricing": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "instruments": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "deliveries": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "index": {
                                                                "type": "module",
                                                                "info": "Logic for validating index instruments.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbol_from_dict": {
                                                        "type": "function",
                                                        "info": "Construct a symbol from a dictionary.",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "record": "dict[str, typing.Any]"
                                                        }
                                                    },
                                                    "symbol_to_dict": {
                                                        "type": "function",
                                                        "info": "Construct a dictionary from a symbol.",
                                                        "returns": "dict[str, typing.Any]",
                                                        "parameters": {
                                                            "symbol": "str"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "price_load_with_series": {
                                        "type": "function",
                                        "info": "Compute the monetary value of the load time series given a price time series.",
                                        "returns": "pd.Series",
                                        "parameters": {
                                            "load": "noos.analytics.LoadCurveBase",
                                            "price_ts": "pd.Series",
                                            "risk_premium": "float",
                                            "risk_premium_pct": "float"
                                        }
                                    },
                                    "pricing": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "info": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "class_repr": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "class_instance": "noos.analytics._core.collections.Any",
                                                            "repr_attributes": "tuple[str, ...]",
                                                            "omit_class_name": "bool"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "load": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "market_data": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbols": {
                                                        "type": "module",
                                                        "info": "Mnemonic for naming instruments.",
                                                        "items": {
                                                            "ASSET": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "ASSET_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CALENDAR_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CALENDAR_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CONTRACT": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CONTRACT_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "INTRADAY_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "INTRADAY_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "contracts": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbol_from_dict": {
                                                                "type": "function",
                                                                "info": "Construct a symbol from a dictionary.",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "record": "dict[str, typing.Any]"
                                                                }
                                                            },
                                                            "symbol_to_dict": {
                                                                "type": "function",
                                                                "info": "Construct a dictionary from a symbol.",
                                                                "returns": "dict[str, typing.Any]",
                                                                "parameters": {
                                                                    "symbol": "str"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "curves": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "base": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "BaseCurve": {
                                                "type": "class",
                                                "info": "Base class for all curve types (price, volume, etc.).",
                                                "returns": "noos.analytics._domain.curves.base.BaseCurve",
                                                "items": {
                                                    "options": {
                                                        "type": "object",
                                                        "info": "Class for declaring curve options at class level.",
                                                        "returns": "noos.analytics._domain.curves.base.CurveOption"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "args": "<class 'NoneType'>",
                                                            "kwargs": "<class 'NoneType'>"
                                                        }
                                                    }
                                                }
                                            },
                                            "Curve": {
                                                "type": "class",
                                                "info": "Meta class for generating new curve classes (price, volume, etc.).",
                                                "returns": "noos.analytics._domain.curves.base.Curve",
                                                "items": {
                                                    "__call__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    },
                                                    "mro": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "CurveOption": {
                                                "type": "class",
                                                "info": "Class for declaring curve options at class level.",
                                                "returns": "noos.analytics._domain.curves.base.CurveOption",
                                                "items": {
                                                    "params": {
                                                        "type": "attribute",
                                                        "info": "Dictionary that remembers insertion order",
                                                        "returns": "collections.OrderedDict"
                                                    },
                                                    "curve_model": {
                                                        "type": "attribute",
                                                        "info": "Object implementing a `fit` method.",
                                                        "returns": "noos.analytics._domain.curves.types.Estimator"
                                                    },
                                                    "update": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._core.collections.Any",
                                                        "parameters": {
                                                            "args": "noos.analytics._core.collections.Any",
                                                            "kwargs": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "options": "object"
                                                        }
                                                    }
                                                }
                                            },
                                            "DEFAULT_OPTIONS": {
                                                "type": "object",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "dict"
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "params": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "T": {
                                                        "type": "object",
                                                        "info": "Type variable.",
                                                        "returns": "noos.analytics._core.collections.TypeVar"
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "collections": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "fixings": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "indices": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "constants": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LONDON": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "PARIS": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validator_exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "strings": {
                                                "type": "module",
                                                "info": "Utility functions for operating on strings.",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "exceptions": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "CurveAttributeError": {
                                                "type": "class",
                                                "info": "Exception raised if an invalid operation is performed on a curve attribute.",
                                                "returns": "noos.analytics._domain.curves.exceptions.CurveAttributeError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "CurveError": {
                                                "type": "class",
                                                "info": "Generic exception raised within the `domain.curves` layer.",
                                                "returns": "noos.analytics._domain.curves.exceptions.CurveError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "CurveInvalidParam": {
                                                "type": "class",
                                                "info": "Exception raised if an invalid parameter is passed to a curve.",
                                                "returns": "noos.analytics._domain.curves.exceptions.CurveInvalidParam",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "CurveOperationError": {
                                                "type": "class",
                                                "info": "Exception raised if an invalid operation is performed on a curve.",
                                                "returns": "noos.analytics._domain.curves.exceptions.CurveOperationError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "extrapolate": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "BaseEstimator": {
                                                "type": "class",
                                                "info": "Base class for all estimators in scikit-learn.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.BaseEstimator",
                                                "items": {
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "BaseScaler": {
                                                "type": "class",
                                                "info": "Base class for all estimators in scikit-learn.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.BaseScaler",
                                                "items": {
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.BaseScaler",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit to data, then transform it.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "fit_params": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "inverse_transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "set_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.BaseScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_inverse_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``inverse_transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.BaseScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set output container.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "set_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.BaseScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "DEFAULT_XGBOOST_PARAMS": {
                                                "type": "object",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "dict"
                                            },
                                            "FeaturesTransformer": {
                                                "type": "class",
                                                "info": "Base class for all estimators in scikit-learn.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.FeaturesTransformer",
                                                "items": {
                                                    "time_features": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.TimeFeatures| None"
                                                    },
                                                    "additional_features": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.DataFrame| None"
                                                    },
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.FeaturesTransformer",
                                                        "parameters": {
                                                            "index": "pd.DatetimeIndex"
                                                        }
                                                    },
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit to data, then transform it.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "fit_params": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "set_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.FeaturesTransformer",
                                                        "parameters": {
                                                            "index": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set output container.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "set_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.FeaturesTransformer",
                                                        "parameters": {
                                                            "index": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "index": "pd.DatetimeIndex"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "time_features": "noos.analytics._domain.curves.extrapolate.TimeFeatures| None",
                                                            "additional_features": "pd.DataFrame| None"
                                                        }
                                                    }
                                                }
                                            },
                                            "IdentityScaler": {
                                                "type": "class",
                                                "info": "Base class for all estimators in scikit-learn.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.IdentityScaler",
                                                "items": {
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.IdentityScaler",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit to data, then transform it.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "fit_params": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "inverse_transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "set_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.IdentityScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_inverse_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``inverse_transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.IdentityScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set output container.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "set_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.IdentityScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "LinearRegression": {
                                                "type": "class",
                                                "info": "Ordinary least squares Linear Regression.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.LinearRegression",
                                                "items": {
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "Fit linear model.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "sample_weight": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "predict": {
                                                        "type": "function",
                                                        "info": "Predict using the linear model.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None"
                                                        }
                                                    },
                                                    "score": {
                                                        "type": "function",
                                                        "info": "Return :ref:`coefficient of determination <r2_score>` on test data.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "sample_weight": "None"
                                                        }
                                                    },
                                                    "set_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.LinearRegression",
                                                        "parameters": {
                                                            "sample_weight": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "set_score_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``score`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.LinearRegression",
                                                        "parameters": {
                                                            "sample_weight": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "fit_intercept": "None",
                                                            "copy_X": "None",
                                                            "tol": "None",
                                                            "n_jobs": "None",
                                                            "positive": "None"
                                                        }
                                                    }
                                                }
                                            },
                                            "ManualScaler": {
                                                "type": "class",
                                                "info": "Base class for all estimators in scikit-learn.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.ManualScaler",
                                                "items": {
                                                    "scale_factors_": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series| None"
                                                    },
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.IdentityScaler",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit to data, then transform it.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "fit_params": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "inverse_transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "set_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.ManualScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_inverse_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``inverse_transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.ManualScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set output container.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "set_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.ManualScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "NDArray": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "StandardScaler": {
                                                "type": "class",
                                                "info": "Standardize features by removing the mean and scaling to unit variance.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.StandardScaler",
                                                "items": {
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "Compute the mean and std to be used for later scaling.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "sample_weight": "None"
                                                        }
                                                    },
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit to data, then transform it.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "fit_params": "None"
                                                        }
                                                    },
                                                    "get_feature_names_out": {
                                                        "type": "function",
                                                        "info": "Get output feature names for transformation.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "input_features": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "inverse_transform": {
                                                        "type": "function",
                                                        "info": "Scale back the data to the original representation.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "copy": "None"
                                                        }
                                                    },
                                                    "partial_fit": {
                                                        "type": "function",
                                                        "info": "Online computation of mean and std on X for later scaling.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "sample_weight": "None"
                                                        }
                                                    },
                                                    "set_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.StandardScaler",
                                                        "parameters": {
                                                            "sample_weight": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_inverse_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``inverse_transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.StandardScaler",
                                                        "parameters": {
                                                            "copy": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set output container.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "set_partial_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``partial_fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.StandardScaler",
                                                        "parameters": {
                                                            "sample_weight": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.StandardScaler",
                                                        "parameters": {
                                                            "copy": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "Perform standardization by centering and scaling.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "copy": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "copy": "None",
                                                            "with_mean": "None",
                                                            "with_std": "None"
                                                        }
                                                    }
                                                }
                                            },
                                            "TimeExponentialScaler": {
                                                "type": "class",
                                                "info": "Base class for all estimators in scikit-learn.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.TimeExponentialScaler",
                                                "items": {
                                                    "ref_date_": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "datetime.datetime | None"
                                                    },
                                                    "a_": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "float | None"
                                                    },
                                                    "b_": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "float | None"
                                                    },
                                                    "inversion_coefficient_": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "float | None"
                                                    },
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.TimeExponentialScaler",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit to data, then transform it.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "fit_params": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "inverse_transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "set_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.TimeExponentialScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_inverse_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``inverse_transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.TimeExponentialScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set output container.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "set_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.TimeExponentialScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "TimeFeatures": {
                                                "type": "class",
                                                "info": "TimeFeatures(dayofweek: bool = False, week: bool = False, holiday: bool = False, christmas_period...",
                                                "returns": "noos.analytics._domain.curves.extrapolate.TimeFeatures",
                                                "items": {
                                                    "dayofweek": {
                                                        "type": "object",
                                                        "info": "bool(x) -> bool",
                                                        "returns": "bool"
                                                    },
                                                    "week": {
                                                        "type": "object",
                                                        "info": "bool(x) -> bool",
                                                        "returns": "bool"
                                                    },
                                                    "holiday": {
                                                        "type": "object",
                                                        "info": "bool(x) -> bool",
                                                        "returns": "bool"
                                                    },
                                                    "christmas_period": {
                                                        "type": "object",
                                                        "info": "bool(x) -> bool",
                                                        "returns": "bool"
                                                    },
                                                    "freq": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "datetime.timedelta | None"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "dayofweek": "bool",
                                                            "week": "bool",
                                                            "holiday": "bool",
                                                            "christmas_period": "bool",
                                                            "freq": "datetime.timedelta | None"
                                                        }
                                                    }
                                                }
                                            },
                                            "TransformerMixin": {
                                                "type": "class",
                                                "info": "Mixin class for all transformers in scikit-learn.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.TransformerMixin",
                                                "items": {
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit to data, then transform it.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "fit_params": "None"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set output container.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "XGBRegressor": {
                                                "type": "class",
                                                "info": "Implementation of the scikit-learn API for XGBoost regression.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.XGBRegressor",
                                                "items": {
                                                    "apply": {
                                                        "type": "function",
                                                        "info": "Return the predicted leaf every tree for each sample. If the model is trained",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "X": "noos.analytics._core.collections.Any",
                                                            "iteration_range": "typing.Optional[typing.Tuple[typing.Union[int, numpy.integer], typing.Union[int, numpy.integer]]]"
                                                        }
                                                    },
                                                    "best_iteration": {
                                                        "type": "property",
                                                        "info": "The best iteration obtained by early stopping.  This attribute is 0-based,",
                                                        "returns": "int"
                                                    },
                                                    "best_score": {
                                                        "type": "property",
                                                        "info": "The best score obtained by early stopping.",
                                                        "returns": "float"
                                                    },
                                                    "coef_": {
                                                        "type": "property",
                                                        "info": "Coefficients property",
                                                        "returns": "numpy.ndarray"
                                                    },
                                                    "evals_result": {
                                                        "type": "function",
                                                        "info": "Return the evaluation results.",
                                                        "returns": "typing.Dict[str, typing.Dict[str, typing.List[float]]]",
                                                        "parameters": {}
                                                    },
                                                    "feature_importances_": {
                                                        "type": "property",
                                                        "info": "Feature importances property, return depends on `importance_type`",
                                                        "returns": "numpy.ndarray"
                                                    },
                                                    "feature_names_in_": {
                                                        "type": "property",
                                                        "info": "Names of features seen during :py:meth:`fit`.  Defined only when `X` has",
                                                        "returns": "numpy.ndarray"
                                                    },
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "Fit gradient boosting model.",
                                                        "returns": "XGBModel",
                                                        "parameters": {
                                                            "X": "noos.analytics._core.collections.Any",
                                                            "y": "noos.analytics._core.collections.Any",
                                                            "sample_weight": "typing.Optional[typing.Any]",
                                                            "base_margin": "typing.Optional[typing.Any]",
                                                            "eval_set": "typing.Optional[typing.Sequence[typing.Tuple[typing.Any, typing.Any]]]",
                                                            "verbose": "typing.Union[bool, int, NoneType]",
                                                            "xgb_model": "typing.Union[xgboost.core.Booster, ForwardRef('XGBModel'), str, NoneType]",
                                                            "sample_weight_eval_set": "typing.Optional[typing.Sequence[typing.Any]]",
                                                            "base_margin_eval_set": "typing.Optional[typing.Sequence[typing.Any]]",
                                                            "feature_weights": "typing.Optional[typing.Any]"
                                                        }
                                                    },
                                                    "get_booster": {
                                                        "type": "function",
                                                        "info": "Get the underlying xgboost Booster of this model.",
                                                        "returns": "xgboost.core.Booster",
                                                        "parameters": {}
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_num_boosting_rounds": {
                                                        "type": "function",
                                                        "info": "Gets the number of xgboost boosting rounds.",
                                                        "returns": "int",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters.",
                                                        "returns": "typing.Dict[str, typing.Any]",
                                                        "parameters": {
                                                            "deep": "bool"
                                                        }
                                                    },
                                                    "get_xgb_params": {
                                                        "type": "function",
                                                        "info": "Get xgboost specific parameters.",
                                                        "returns": "typing.Dict[str, typing.Any]",
                                                        "parameters": {}
                                                    },
                                                    "intercept_": {
                                                        "type": "property",
                                                        "info": "Intercept (bias) property",
                                                        "returns": "numpy.ndarray"
                                                    },
                                                    "load_model": {
                                                        "type": "function",
                                                        "info": "Load the model from a file or a bytearray.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "fname": "typing.Union[os.PathLike[~AnyStr], bytearray, str]"
                                                        }
                                                    },
                                                    "n_features_in_": {
                                                        "type": "property",
                                                        "info": "Number of features seen during :py:meth:`fit`.",
                                                        "returns": "int"
                                                    },
                                                    "predict": {
                                                        "type": "function",
                                                        "info": "Predict with `X`.  If the model is trained with early stopping, then",
                                                        "returns": "noos.analytics._core.collections.Any",
                                                        "parameters": {
                                                            "X": "noos.analytics._core.collections.Any",
                                                            "output_margin": "bool",
                                                            "validate_features": "bool",
                                                            "base_margin": "typing.Optional[typing.Any]",
                                                            "iteration_range": "typing.Optional[typing.Tuple[typing.Union[int, numpy.integer], typing.Union[int, numpy.integer]]]"
                                                        }
                                                    },
                                                    "save_model": {
                                                        "type": "function",
                                                        "info": "Save the model to a file.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "fname": "typing.Union[str, os.PathLike]"
                                                        }
                                                    },
                                                    "score": {
                                                        "type": "function",
                                                        "info": "Return :ref:`coefficient of determination <r2_score>` on test data.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "sample_weight": "None"
                                                        }
                                                    },
                                                    "set_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.XGBRegressor",
                                                        "parameters": {
                                                            "base_margin": "typing.Union[bool, NoneType, str]",
                                                            "base_margin_eval_set": "typing.Union[bool, NoneType, str]",
                                                            "eval_set": "typing.Union[bool, NoneType, str]",
                                                            "feature_weights": "typing.Union[bool, NoneType, str]",
                                                            "sample_weight": "typing.Union[bool, NoneType, str]",
                                                            "sample_weight_eval_set": "typing.Union[bool, NoneType, str]",
                                                            "verbose": "typing.Union[bool, NoneType, str]",
                                                            "xgb_model": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.  Modification of the sklearn method to",
                                                        "returns": "XGBModel",
                                                        "parameters": {
                                                            "params": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "set_predict_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``predict`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.XGBRegressor",
                                                        "parameters": {
                                                            "base_margin": "typing.Union[bool, NoneType, str]",
                                                            "iteration_range": "typing.Union[bool, NoneType, str]",
                                                            "output_margin": "typing.Union[bool, NoneType, str]",
                                                            "validate_features": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_score_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``score`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.XGBRegressor",
                                                        "parameters": {
                                                            "sample_weight": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "objective": "typing.Union[str, xgboost.sklearn._SklObjWProto, typing.Callable[[typing.Any, typing.Any], typing.Tuple[numpy.ndarray, numpy.ndarray]], NoneType]",
                                                            "kwargs": "noos.analytics._core.collections.Any"
                                                        }
                                                    }
                                                }
                                            },
                                            "XGBoostScaler": {
                                                "type": "class",
                                                "info": "Base class for all estimators in scikit-learn.",
                                                "returns": "noos.analytics._domain.curves.extrapolate.XGBoostScaler",
                                                "items": {
                                                    "exponential_scaler_": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.TimeExponentialScaler| None"
                                                    },
                                                    "extrapolator_": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "noos.analytics.XGBoostExtrapolator| None"
                                                    },
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.XGBoostScaler",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit to data, then transform it.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "fit_params": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "inverse_transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "set_fit_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``fit`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.XGBoostScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_inverse_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``inverse_transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.XGBoostScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set output container.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "set_transform_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``transform`` method.",
                                                        "returns": "noos.analytics._domain.curves.extrapolate.XGBoostScaler",
                                                        "parameters": {
                                                            "ts": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "dataclass": {
                                                "type": "function",
                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                "returns": "None",
                                                "parameters": {
                                                    "cls": "None",
                                                    "init": "None",
                                                    "repr": "None",
                                                    "eq": "None",
                                                    "order": "None",
                                                    "unsafe_hash": "None",
                                                    "frozen": "None",
                                                    "match_args": "None",
                                                    "kw_only": "None",
                                                    "slots": "None",
                                                    "weakref_slot": "None"
                                                }
                                            },
                                            "extrapolate_curve": {
                                                "type": "function",
                                                "info": "Extrapolate a time series to a given range.",
                                                "returns": "pd.Series",
                                                "parameters": {
                                                    "ts": "pd.Series",
                                                    "start_at": "datetime.datetime",
                                                    "end_at": "datetime.datetime",
                                                    "frequency": "str",
                                                    "inclusive": "str",
                                                    "train_size": "float",
                                                    "additional_features": "pd.DataFrame| None",
                                                    "scaler": "str",
                                                    "scaling_factors": "pd.Series| None",
                                                    "time_features": "noos.analytics._domain.curves.extrapolate.TimeFeatures| None",
                                                    "extrapolator_kwargs": "<class 'pandas.core.series.Series'>"
                                                }
                                            },
                                            "train_test_split": {
                                                "type": "function",
                                                "info": "Split arrays or matrices into random train and test subsets.",
                                                "returns": "None",
                                                "parameters": {
                                                    "arrays": "None",
                                                    "test_size": "None",
                                                    "train_size": "None",
                                                    "random_state": "None",
                                                    "shuffle": "None",
                                                    "stratify": "None"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "load": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "LOAD_CURVE_CLASSES": {
                                                "type": "object",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "dict"
                                            },
                                            "NbpLoadCurve": {
                                                "type": "class",
                                                "info": "Class for NBP load curves.",
                                                "returns": "noos.analytics._domain.curves.load.NbpLoadCurve",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "Slice the load between start and end dates.",
                                                        "returns": "~T",
                                                        "parameters": {
                                                            "_slice": "slice"
                                                        }
                                                    },
                                                    "asset": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "get_reindexed_load_ts_mw": {
                                                        "type": "function",
                                                        "info": "Return the load curve in MW on the given index.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "index": "pd.DatetimeIndex"
                                                        }
                                                    },
                                                    "get_reindexed_volume_ts_mwh": {
                                                        "type": "function",
                                                        "info": "Return the volume curve in MWh on the given index.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "index": "pd.DatetimeIndex"
                                                        }
                                                    },
                                                    "index": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Index"
                                                    },
                                                    "index_max": {
                                                        "type": "property",
                                                        "info": "Return the maximum index of the load time series.",
                                                        "returns": "pd.Timestamp"
                                                    },
                                                    "index_min": {
                                                        "type": "property",
                                                        "info": "Return the minimum index of the load time series.",
                                                        "returns": "pd.Timestamp"
                                                    },
                                                    "index_range_info": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "info": {
                                                        "type": "function",
                                                        "info": "Print information about the Load instance using LoadInfo.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "verbose": "bool"
                                                        }
                                                    },
                                                    "load_ts": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.load.base.cached_property"
                                                    },
                                                    "metadata": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "member_descriptor"
                                                    },
                                                    "name": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "member_descriptor"
                                                    },
                                                    "negative": {
                                                        "type": "property",
                                                        "info": "Return the negative part of the load curve.",
                                                        "returns": "~T"
                                                    },
                                                    "options": {
                                                        "type": "object",
                                                        "info": "Class for declaring curve options at class level.",
                                                        "returns": "noos.analytics._domain.curves.base.CurveOption"
                                                    },
                                                    "plot": {
                                                        "type": "function",
                                                        "info": "Plot the time series data.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "mode": "str",
                                                            "line_shape": "str",
                                                            "backend": "str"
                                                        }
                                                    },
                                                    "positive": {
                                                        "type": "property",
                                                        "info": "Return the positive part of the load curve.",
                                                        "returns": "~T"
                                                    },
                                                    "unit": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "member_descriptor"
                                                    },
                                                    "volume": {
                                                        "type": "property",
                                                        "info": "Return the total volume in MWh.",
                                                        "returns": "float"
                                                    },
                                                    "volume_ts": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.load.base.cached_property"
                                                    },
                                                    "where": {
                                                        "type": "function",
                                                        "info": "Nullify values where the condition is False.",
                                                        "returns": "~T",
                                                        "parameters": {
                                                            "cond": "typing.Union[pandas.core.series.Series, typing.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame], numpy.ndarray]]"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "load_ts": "pd.Series",
                                                            "kwargs": "<class 'NoneType'>"
                                                        }
                                                    }
                                                }
                                            },
                                            "PwreeLoadCurve": {
                                                "type": "class",
                                                "info": "Class for PWREE load curves.",
                                                "returns": "noos.analytics._domain.curves.load.PwreeLoadCurve",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "Slice the load between start and end dates.",
                                                        "returns": "~T",
                                                        "parameters": {
                                                            "_slice": "slice"
                                                        }
                                                    },
                                                    "asset": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "get_reindexed_load_ts_mw": {
                                                        "type": "function",
                                                        "info": "Return the load curve in MW on the given index.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "index": "pd.DatetimeIndex"
                                                        }
                                                    },
                                                    "get_reindexed_volume_ts_mwh": {
                                                        "type": "function",
                                                        "info": "Return the volume curve in MWh on the given index.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "index": "pd.DatetimeIndex"
                                                        }
                                                    },
                                                    "index": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Index"
                                                    },
                                                    "index_max": {
                                                        "type": "property",
                                                        "info": "Return the maximum index of the load time series.",
                                                        "returns": "pd.Timestamp"
                                                    },
                                                    "index_min": {
                                                        "type": "property",
                                                        "info": "Return the minimum index of the load time series.",
                                                        "returns": "pd.Timestamp"
                                                    },
                                                    "index_range_info": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "info": {
                                                        "type": "function",
                                                        "info": "Print information about the Load instance using LoadInfo.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "verbose": "bool"
                                                        }
                                                    },
                                                    "load_ts": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.load.base.cached_property"
                                                    },
                                                    "metadata": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "member_descriptor"
                                                    },
                                                    "name": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "member_descriptor"
                                                    },
                                                    "negative": {
                                                        "type": "property",
                                                        "info": "Return the negative part of the load curve.",
                                                        "returns": "~T"
                                                    },
                                                    "options": {
                                                        "type": "object",
                                                        "info": "Class for declaring curve options at class level.",
                                                        "returns": "noos.analytics._domain.curves.base.CurveOption"
                                                    },
                                                    "plot": {
                                                        "type": "function",
                                                        "info": "Plot the time series data.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "mode": "str",
                                                            "line_shape": "str",
                                                            "backend": "str"
                                                        }
                                                    },
                                                    "positive": {
                                                        "type": "property",
                                                        "info": "Return the positive part of the load curve.",
                                                        "returns": "~T"
                                                    },
                                                    "unit": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "member_descriptor"
                                                    },
                                                    "volume": {
                                                        "type": "property",
                                                        "info": "Return the total volume in MWh.",
                                                        "returns": "float"
                                                    },
                                                    "volume_ts": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.load.base.cached_property"
                                                    },
                                                    "where": {
                                                        "type": "function",
                                                        "info": "Nullify values where the condition is False.",
                                                        "returns": "~T",
                                                        "parameters": {
                                                            "cond": "typing.Union[pandas.core.series.Series, typing.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame], numpy.ndarray]]"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "load_ts": "pd.Series",
                                                            "kwargs": "<class 'NoneType'>"
                                                        }
                                                    }
                                                }
                                            },
                                            "UkpxLoadCurve": {
                                                "type": "class",
                                                "info": "Class for UKPX load curves.",
                                                "returns": "noos.analytics._domain.curves.load.UkpxLoadCurve",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "Slice the load between start and end dates.",
                                                        "returns": "~T",
                                                        "parameters": {
                                                            "_slice": "slice"
                                                        }
                                                    },
                                                    "asset": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "get_reindexed_load_ts_mw": {
                                                        "type": "function",
                                                        "info": "Return the load curve in MW on the given index.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "index": "pd.DatetimeIndex"
                                                        }
                                                    },
                                                    "get_reindexed_volume_ts_mwh": {
                                                        "type": "function",
                                                        "info": "Return the volume curve in MWh on the given index.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "index": "pd.DatetimeIndex"
                                                        }
                                                    },
                                                    "index": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.Index"
                                                    },
                                                    "index_max": {
                                                        "type": "property",
                                                        "info": "Return the maximum index of the load time series.",
                                                        "returns": "pd.Timestamp"
                                                    },
                                                    "index_min": {
                                                        "type": "property",
                                                        "info": "Return the minimum index of the load time series.",
                                                        "returns": "pd.Timestamp"
                                                    },
                                                    "index_range_info": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "info": {
                                                        "type": "function",
                                                        "info": "Print information about the Load instance using LoadInfo.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "verbose": "bool"
                                                        }
                                                    },
                                                    "load_ts": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.load.base.cached_property"
                                                    },
                                                    "metadata": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "member_descriptor"
                                                    },
                                                    "name": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "member_descriptor"
                                                    },
                                                    "negative": {
                                                        "type": "property",
                                                        "info": "Return the negative part of the load curve.",
                                                        "returns": "~T"
                                                    },
                                                    "options": {
                                                        "type": "object",
                                                        "info": "Class for declaring curve options at class level.",
                                                        "returns": "noos.analytics._domain.curves.base.CurveOption"
                                                    },
                                                    "plot": {
                                                        "type": "function",
                                                        "info": "Plot the time series data.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "mode": "str",
                                                            "line_shape": "str",
                                                            "backend": "str"
                                                        }
                                                    },
                                                    "positive": {
                                                        "type": "property",
                                                        "info": "Return the positive part of the load curve.",
                                                        "returns": "~T"
                                                    },
                                                    "unit": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "member_descriptor"
                                                    },
                                                    "volume": {
                                                        "type": "property",
                                                        "info": "Return the total volume in MWh.",
                                                        "returns": "float"
                                                    },
                                                    "volume_ts": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.load.base.cached_property"
                                                    },
                                                    "where": {
                                                        "type": "function",
                                                        "info": "Nullify values where the condition is False.",
                                                        "returns": "~T",
                                                        "parameters": {
                                                            "cond": "typing.Union[pandas.core.series.Series, typing.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame], numpy.ndarray]]"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "load_ts": "pd.Series",
                                                            "kwargs": "<class 'NoneType'>"
                                                        }
                                                    }
                                                }
                                            },
                                            "base": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "T": {
                                                        "type": "object",
                                                        "info": "Type variable.",
                                                        "returns": "noos.analytics._core.collections.TypeVar"
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "DEFAULT_OPTIONS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "cached_property": {
                                                        "type": "class",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.load.base.cached_property",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "func": "None"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "constants": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LONDON": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "PARIS": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "conversions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "convert_load_to_volume": {
                                                                "type": "function",
                                                                "info": "Convert load to volume. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "convert_volume_to_load": {
                                                                "type": "function",
                                                                "info": "Convert volume to load. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "infer_nil_end": {
                                                                "type": "function",
                                                                "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "timestep": "datetime.timedelta"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "params": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validator_exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "mixins": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "LoadInfo": {
                                                        "type": "class",
                                                        "info": "Class to hold and display Load information.",
                                                        "returns": "noos.analytics._domain.curves.load.mixins.LoadInfo",
                                                        "items": {
                                                            "EQUAL_SEPARATOR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "name": {
                                                                "type": "attribute",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "index_range_info": {
                                                                "type": "attribute",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "volume": {
                                                                "type": "attribute",
                                                                "info": "Convert a string or number to a floating-point number, if possible.",
                                                                "returns": "float"
                                                            },
                                                            "frequency": {
                                                                "type": "attribute",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "pd.CategoricalIndex.str| None"
                                                            },
                                                            "unit": {
                                                                "type": "attribute",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "timezone": {
                                                                "type": "attribute",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "metadata": {
                                                                "type": "attribute",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict[str, dict[str, '_Meta'] | list['_Meta'] | bool |pd.CategoricalIndex.str| datetime.date | datetime.datetime]"
                                                            },
                                                            "volume_ts": {
                                                                "type": "attribute",
                                                                "info": "One-dimensional ndarray with axis labels (including time series).",
                                                                "returns": "pd.Series"
                                                            },
                                                            "from_load": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "info": {
                                                                "type": "function",
                                                                "info": "Print load information with optional verbose details.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "verbose": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "name": "str",
                                                                    "index_range_info": "str",
                                                                    "volume": "float",
                                                                    "frequency": "str | None",
                                                                    "unit": "str",
                                                                    "timezone": "str",
                                                                    "metadata": "dict[str, dict[str, '_Meta'] | list['_Meta'] | bool | str | datetime.date | datetime.datetime]",
                                                                    "volume_ts": "pd.Series"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "LoadType": {
                                                        "type": "class",
                                                        "info": "Base class for protocol classes.",
                                                        "returns": "noos.analytics._domain.curves.load.mixins.LoadType",
                                                        "items": {
                                                            "asset": {
                                                                "type": "attribute",
                                                                "info": "Generic financial / physical asset.",
                                                                "returns": "noos.analytics._domain.products.assets.Asset"
                                                            },
                                                            "name": {
                                                                "type": "attribute",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "metadata": {
                                                                "type": "attribute",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict[str, dict[str, '_Meta'] | list['_Meta'] | bool |pd.CategoricalIndex.str| datetime.date | datetime.datetime]"
                                                            },
                                                            "index_range_info": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "load_ts": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "pd.Series"
                                                            },
                                                            "volume_ts": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "pd.Series"
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "args": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "MetaInfo": {
                                                        "type": "class",
                                                        "info": "Class to store metadata information.",
                                                        "returns": "noos.analytics._domain.curves.load.mixins.MetaInfo",
                                                        "items": {
                                                            "metadata": {
                                                                "type": "attribute",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "df": {
                                                                "type": "property",
                                                                "info": "Return a DataFrame representation of the metadata.",
                                                                "returns": "pd.DataFrame"
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "metadata": "dict"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "PlotMixin": {
                                                        "type": "class",
                                                        "info": "Mixin class to add plotting capabilities to different data instances.",
                                                        "returns": "noos.analytics._domain.curves.load.mixins.PlotMixin",
                                                        "items": {
                                                            "plot": {
                                                                "type": "function",
                                                                "info": "Plot the time series data.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "mode": "str",
                                                                    "line_shape": "str",
                                                                    "backend": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "wrapper_descriptor"
                                                            }
                                                        }
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "dataclass": {
                                                        "type": "function",
                                                        "info": "Add dunder methods based on the fields defined in the class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None",
                                                            "init": "None",
                                                            "repr": "None",
                                                            "eq": "None",
                                                            "order": "None",
                                                            "unsafe_hash": "None",
                                                            "frozen": "None",
                                                            "match_args": "None",
                                                            "kw_only": "None",
                                                            "slots": "None",
                                                            "weakref_slot": "None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "params": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "AssetParam": {
                                                "type": "class",
                                                "info": "class declaring an `Asset` parameter.",
                                                "returns": "noos.analytics._domain.curves.params.AssetParam",
                                                "items": {
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    }
                                                }
                                            },
                                            "BoolParam": {
                                                "type": "class",
                                                "info": "class declaring a `bool` parameter.",
                                                "returns": "noos.analytics._domain.curves.params.BoolParam",
                                                "items": {
                                                    "default": {
                                                        "type": "object",
                                                        "info": "bool(x) -> bool",
                                                        "returns": "bool"
                                                    },
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "bool",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "default": "bool | None"
                                                        }
                                                    }
                                                }
                                            },
                                            "CurveParam": {
                                                "type": "class",
                                                "info": "Interface class for all curve parameters.",
                                                "returns": "noos.analytics._domain.curves.params.CurveParam",
                                                "items": {
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "~T",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "DataframeParam": {
                                                "type": "class",
                                                "info": "class declaring a `pandas.Dataframe` parameter.",
                                                "returns": "noos.analytics._domain.curves.params.DataframeParam",
                                                "items": {
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "columns": "typing.Optional[typing.Iterable]"
                                                        }
                                                    }
                                                }
                                            },
                                            "DatetimeParam": {
                                                "type": "class",
                                                "info": "class declaring a `datetime.datetime` parameter.",
                                                "returns": "noos.analytics._domain.curves.params.DatetimeParam",
                                                "items": {
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "FixingSetParam": {
                                                "type": "class",
                                                "info": "class declaring a `products.collections.FixingSet` parameter.",
                                                "returns": "noos.analytics._domain.curves.params.FixingSetParam",
                                                "items": {
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "noos.analytics.FixingSet",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "Iterable": {
                                                "type": "object",
                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                "returns": "typing._SpecialGenericAlias"
                                            },
                                            "MetadataParam": {
                                                "type": "class",
                                                "info": "class declaring a `dict` parameter for metadata.",
                                                "returns": "noos.analytics._domain.curves.params.MetadataParam",
                                                "items": {
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "dict",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "NumericTimeSeriesParam": {
                                                "type": "class",
                                                "info": "class declaring a `pandas.Series` parameter.",
                                                "returns": "noos.analytics._domain.curves.params.NumericTimeSeriesParam",
                                                "items": {
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "StringParam": {
                                                "type": "class",
                                                "info": "class declaring a `str` parameter.",
                                                "returns": "noos.analytics._domain.curves.params.StringParam",
                                                "items": {
                                                    "default": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "default": "str | None"
                                                        }
                                                    }
                                                }
                                            },
                                            "T": {
                                                "type": "object",
                                                "info": "Type variable.",
                                                "returns": "noos.analytics._core.collections.TypeVar"
                                            },
                                            "TzinfoParam": {
                                                "type": "class",
                                                "info": "class declaring a `zoneinfo.ZoneInfo` parameter.",
                                                "returns": "noos.analytics._domain.curves.params.TzinfoParam",
                                                "items": {
                                                    "default": {
                                                        "type": "object",
                                                        "info": "Fixed offset from UTC implementation of tzinfo.",
                                                        "returns": "datetime.timezone"
                                                    },
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "zoneinfo.ZoneInfo | datetime.timezone",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "default": "zoneinfo.ZoneInfo | datetime.timezone | None"
                                                        }
                                                    }
                                                }
                                            },
                                            "UnitParam": {
                                                "type": "class",
                                                "info": "class declaring a `str` parameter for unit.",
                                                "returns": "noos.analytics._domain.curves.params.UnitParam",
                                                "items": {
                                                    "default": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "enforce_type": {
                                                        "type": "function",
                                                        "info": "Enforce the type and default value of a parameter.",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "value": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "default": "str | None"
                                                        }
                                                    }
                                                }
                                            },
                                            "assets": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "TypedDict": {
                                                        "type": "function",
                                                        "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "typename": "None",
                                                            "fields": "None",
                                                            "total": "None",
                                                            "kwargs": "None"
                                                        }
                                                    },
                                                    "conversions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "convert_load_to_volume": {
                                                                "type": "function",
                                                                "info": "Convert load to volume. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "convert_volume_to_load": {
                                                                "type": "function",
                                                                "info": "Convert volume to load. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "infer_nil_end": {
                                                                "type": "function",
                                                                "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "timestep": "datetime.timedelta"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "holidays": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "IMPLEMENTED_HOLIDAYS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "get_holidays": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "holidays.holiday_base.HolidayBase",
                                                                "parameters": {
                                                                    "holidays_zone": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "strings": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on strings.",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "asset": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "index": {
                                                                "type": "module",
                                                                "info": "Logic for validating index instruments.",
                                                                "items": {}
                                                            },
                                                            "intraday": {
                                                                "type": "module",
                                                                "info": "Logic for validating intraday delivery periods.",
                                                                "items": {}
                                                            },
                                                            "is_emission": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "is_gas": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "is_power": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "collections": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "fixings": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Union": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "arrays": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on numpy arrays.",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "indices": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "indices": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "arrays": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on numpy arrays.",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "constants": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "LONDON": {
                                                        "type": "object",
                                                        "info": "Abstract base class for time zone info objects.",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "PARIS": {
                                                        "type": "object",
                                                        "info": "Abstract base class for time zone info objects.",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "localtime": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "UTC": {
                                                        "type": "object",
                                                        "info": "Abstract base class for time zone info objects.",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "date_astimezone": {
                                                        "type": "function",
                                                        "info": "Convert a date to a datetime in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "normalize": {
                                                        "type": "function",
                                                        "info": "Normalize a date to a midnight time in UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "now": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {}
                                                    },
                                                    "prev_weekday": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "prev_weekday_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "to_timezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to another time zone.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime",
                                                            "timezone_str": "str"
                                                        }
                                                    },
                                                    "to_utctimezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime"
                                                        }
                                                    },
                                                    "today": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {}
                                                    },
                                                    "today_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyPandas": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "AnyTimezone": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "MetadataType": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Record": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Records": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "validator_exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "validators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "check_1d_array": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "obj": "numpy.ndarray"
                                                        }
                                                    },
                                                    "check_columns": {
                                                        "type": "function",
                                                        "info": "Validate format of a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "check_dataframe_not_empty": {
                                                        "type": "function",
                                                        "info": "Check a dataframe is not empty.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_datetimeindex_is_aware": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_datetimeindex": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_has_nil_end_value": {
                                                        "type": "function",
                                                        "info": "Check that a time series is closed by checking that the last value is 0.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_index_unique_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_dataframe": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_is_pandas_series": {
                                                        "type": "function",
                                                        "info": "Check if object is a pandas series.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_timeserie_numeric_monotonic_increasing": {
                                                        "type": "function",
                                                        "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_is_tzinfo": {
                                                        "type": "function",
                                                        "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                        }
                                                    },
                                                    "check_no_nans_in_dataframe": {
                                                        "type": "function",
                                                        "info": "Validate non-NaN values in a pandas dataframe.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.DataFrame"
                                                        }
                                                    },
                                                    "check_no_nans_in_series": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "check_series_numeric": {
                                                        "type": "function",
                                                        "info": "Check if a pandas Series contains only numeric values.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ts": "pd.Series"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validate_dataframe": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.DataFrame",
                                                            "dataframe_not_empty": "bool",
                                                            "expected_columns": "set"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "price_forward": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "base": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "DEFAULT_OPTIONS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "models": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "d_fleten_price_curve_model": {
                                                                "type": "object",
                                                                "info": "Generic class for price forward curve models.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel"
                                                            },
                                                            "forecasting": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "hh_fleten_price_curve_model": {
                                                                "type": "object",
                                                                "info": "Generic class for price forward curve models.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel"
                                                            },
                                                            "identity_fleten_price_curve_model": {
                                                                "type": "object",
                                                                "info": "Generic class for price forward curve models.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel"
                                                            },
                                                            "optimization": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "params": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validator_exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "fitting": {
                                                "type": "module",
                                                "info": "Generic programming interface for operations on curves.",
                                                "items": {
                                                    "FIXING_COLUMNS": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "curve_from_fixings_fleten": {
                                                        "type": "function",
                                                        "info": "Calibrate a price forward curve object from a set of market fixings and historical features.",
                                                        "returns": "noos.analytics.PriceForwardCurve",
                                                        "parameters": {
                                                            "fixings": "pd.DataFrame",
                                                            "features": "pd.DataFrame",
                                                            "created_at": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "curve_from_fixings_identity": {
                                                        "type": "function",
                                                        "info": "Calibrate a price forward curve object from a set of market fixings and features.",
                                                        "returns": "noos.analytics.PriceForwardCurve",
                                                        "parameters": {
                                                            "fixings": "pd.DataFrame",
                                                            "features": "pd.DataFrame",
                                                            "created_at": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "price_forward": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "fitting": {
                                                                "type": "module",
                                                                "info": "Generic programming interface for operations on curves.",
                                                                "items": {}
                                                            },
                                                            "forecasting": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "models": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "optimization": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "product_collections": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "fixings": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "indices": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "forecasting": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "DFForecastingModel": {
                                                        "type": "class",
                                                        "info": "Interface class for all price forecasting models.",
                                                        "returns": "noos.analytics._domain.curves.price_forward.forecasting.DFForecastingModel",
                                                        "items": {
                                                            "estimator": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "noos.analytics._domain.curves.types.Estimator"
                                                            },
                                                            "fit": {
                                                                "type": "function",
                                                                "info": "Fit the underlying forecasting model.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.forecasting.DFForecastingModel",
                                                                "parameters": {
                                                                    "features": "pd.DataFrame",
                                                                    "frequency": "str | None"
                                                                }
                                                            },
                                                            "predict": {
                                                                "type": "function",
                                                                "info": "Predict using the underlying forecasting model.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "kwargs": "<class 'NoneType'>"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "ForecastingModel": {
                                                        "type": "class",
                                                        "info": "Interface class for all price forecasting models.",
                                                        "returns": "noos.analytics._domain.curves.price_forward.forecasting.ForecastingModel",
                                                        "items": {
                                                            "estimator": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "noos.analytics._domain.curves.types.Estimator"
                                                            },
                                                            "fit": {
                                                                "type": "function",
                                                                "info": "Fit the underlying forecasting model.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.forecasting.ForecastingModel",
                                                                "parameters": {
                                                                    "features": "pd.DataFrame",
                                                                    "frequency": "str | None"
                                                                }
                                                            },
                                                            "predict": {
                                                                "type": "function",
                                                                "info": "Predict using the underlying forecasting model.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "wrapper_descriptor"
                                                            }
                                                        }
                                                    },
                                                    "IdentityForecastingModel": {
                                                        "type": "class",
                                                        "info": "Straight pass-through to custom estimator methods.",
                                                        "returns": "noos.analytics._domain.curves.price_forward.forecasting.IdentityForecastingModel",
                                                        "items": {
                                                            "estimator": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "noos.analytics._domain.curves.types.Estimator"
                                                            },
                                                            "fit": {
                                                                "type": "function",
                                                                "info": "Fit the underlying forecasting model.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.forecasting.IdentityForecastingModel",
                                                                "parameters": {
                                                                    "features": "pd.DataFrame",
                                                                    "frequency": "str | None"
                                                                }
                                                            },
                                                            "predict": {
                                                                "type": "function",
                                                                "info": "Predict using the underlying forecasting model.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "kwargs": "<class 'NoneType'>"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "dft": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "utils": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "identity_estimator": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "models": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "PriceForwardCurveModel": {
                                                        "type": "class",
                                                        "info": "Generic class for price forward curve models.",
                                                        "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel",
                                                        "items": {
                                                            "fit": {
                                                                "type": "function",
                                                                "info": "Fit the underlying forecasting and optimization models.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel",
                                                                "parameters": {
                                                                    "features": "pd.DataFrame",
                                                                    "fixings": "noos.analytics.FixingSet",
                                                                    "created_at": "datetime.datetime"
                                                                }
                                                            },
                                                            "forecasting": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "noos.analytics._domain.curves.price_forward.forecasting.ForecastingModel"
                                                            },
                                                            "optimization": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "noos.analytics._domain.curves.price_forward.optimization.OptimizationModel"
                                                            },
                                                            "partial_fit": {
                                                                "type": "function",
                                                                "info": "Refit the underlying optimization model with the calibrated forecasting model.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel",
                                                                "parameters": {
                                                                    "fixings": "noos.analytics.FixingSet",
                                                                    "created_at": "datetime.datetime"
                                                                }
                                                            },
                                                            "predict": {
                                                                "type": "function",
                                                                "info": "Predict using the underlying forecasting and optimization models.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "forecasting_model": "noos.analytics._domain.curves.price_forward.forecasting.ForecastingModel",
                                                                    "optimization_model": "noos.analytics._domain.curves.price_forward.optimization.OptimizationModel"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "collections": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "fixings": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "indices": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "d_fleten_price_curve_model": {
                                                        "type": "object",
                                                        "info": "Generic class for price forward curve models.",
                                                        "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel"
                                                    },
                                                    "forecasting": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "dft": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "identity_estimator": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "hh_fleten_price_curve_model": {
                                                        "type": "object",
                                                        "info": "Generic class for price forward curve models.",
                                                        "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel"
                                                    },
                                                    "identity_fleten_price_curve_model": {
                                                        "type": "object",
                                                        "info": "Generic class for price forward curve models.",
                                                        "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel"
                                                    },
                                                    "optimization": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "fleten": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "forecasting": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "strings": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on strings.",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "optimization": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "FletenOptimizationModel": {
                                                        "type": "class",
                                                        "info": "Interface class for all price optimization models.",
                                                        "returns": "noos.analytics._domain.curves.price_forward.optimization.FletenOptimizationModel",
                                                        "items": {
                                                            "estimator": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "noos.analytics._domain.curves.types.Estimator"
                                                            },
                                                            "fit": {
                                                                "type": "function",
                                                                "info": "Fit the underlying optimization model.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.optimization.FletenOptimizationModel",
                                                                "parameters": {
                                                                    "fixings": "noos.analytics.FixingSet",
                                                                    "created_at": "datetime.datetime",
                                                                    "forecast": "noos.analytics._domain.curves.price_forward.forecasting.ForecastingModel"
                                                                }
                                                            },
                                                            "predict": {
                                                                "type": "function",
                                                                "info": "Predict using the underlying optimization model.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "kwargs": "<class 'NoneType'>"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "OptimizationModel": {
                                                        "type": "class",
                                                        "info": "Interface class for all price optimization models.",
                                                        "returns": "noos.analytics._domain.curves.price_forward.optimization.OptimizationModel",
                                                        "items": {
                                                            "estimator": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "noos.analytics._domain.curves.types.Estimator"
                                                            },
                                                            "fit": {
                                                                "type": "function",
                                                                "info": "Fit the underlying optimization model.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.optimization.OptimizationModel",
                                                                "parameters": {
                                                                    "fixings": "noos.analytics.FixingSet",
                                                                    "created_at": "datetime.datetime",
                                                                    "forecast": "noos.analytics._domain.curves.price_forward.forecasting.ForecastingModel"
                                                                }
                                                            },
                                                            "predict": {
                                                                "type": "function",
                                                                "info": "Predict using the underlying optimization model.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "wrapper_descriptor"
                                                            }
                                                        }
                                                    },
                                                    "collections": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "fixings": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "indices": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "fleten": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "utils": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "forecasting": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "dft": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "identity_estimator": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "types": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "Estimator": {
                                                "type": "class",
                                                "info": "Object implementing a `fit` method.",
                                                "returns": "noos.analytics._domain.curves.types.Estimator",
                                                "items": {
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.types.Fittable",
                                                        "parameters": {
                                                            "args": "<class 'noos_analytics._domain.curves.types.Fittable'>"
                                                        }
                                                    },
                                                    "partial_fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.types.Fittable",
                                                        "parameters": {
                                                            "args": "<class 'noos_analytics._domain.curves.types.Fittable'>"
                                                        }
                                                    },
                                                    "predict": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._core.collections.Any",
                                                        "parameters": {
                                                            "args": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "args": "None",
                                                            "kwargs": "None"
                                                        }
                                                    }
                                                }
                                            },
                                            "Fittable": {
                                                "type": "class",
                                                "info": "Object implementing a `fit` method.",
                                                "returns": "noos.analytics._domain.curves.types.Fittable",
                                                "items": {
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.types.Fittable",
                                                        "parameters": {
                                                            "args": "<class 'noos_analytics._domain.curves.types.Fittable'>"
                                                        }
                                                    },
                                                    "partial_fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.curves.types.Fittable",
                                                        "parameters": {
                                                            "args": "<class 'noos_analytics._domain.curves.types.Fittable'>"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "args": "None",
                                                            "kwargs": "None"
                                                        }
                                                    }
                                                }
                                            },
                                            "Predictable": {
                                                "type": "class",
                                                "info": "Object implementing a `predict` method.",
                                                "returns": "noos.analytics._domain.curves.types.Predictable",
                                                "items": {
                                                    "predict": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._core.collections.Any",
                                                        "parameters": {
                                                            "args": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "args": "None",
                                                            "kwargs": "None"
                                                        }
                                                    }
                                                }
                                            },
                                            "Protocol": {
                                                "type": "class",
                                                "info": "Base class for protocol classes.",
                                                "returns": "noos.analytics._domain.curves.types.Protocol",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "volume": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "extrapolate": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "create_from_historic_means": {
                                                        "type": "function",
                                                        "info": "Extrapolate historic curve from means in local time.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "historic": "pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "intervals": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "INTERVALS_COLUMNS": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "VALID_COLUMNS": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "create_aggregate_timeline_from_intervals": {
                                                        "type": "function",
                                                        "info": "Create a unique timeline aggregated curve across intervals.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "intervals": "pd.DataFrame",
                                                            "frequency": "str"
                                                        }
                                                    },
                                                    "create_matrix_from_intervals": {
                                                        "type": "function",
                                                        "info": "Create a matrix with start-end boolean intervals.",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "intervals": "pd.DataFrame",
                                                            "frequency": "str"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "models": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "dft": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "DFRegressor": {
                                                "type": "class",
                                                "info": "Robust truncated discrete Fourier regressor.",
                                                "returns": "noos.analytics._domain.models.dft.DFRegressor",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "Returns a sub-pipeline or a single estimator in the pipeline",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "ind": "None"
                                                        }
                                                    },
                                                    "decision_function": {
                                                        "type": "function",
                                                        "info": "Transform the data, and apply `decision_function` with the final estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "Fit the model.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "fit_predict": {
                                                        "type": "function",
                                                        "info": "Transform the data, and apply `fit_predict` with the final estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit the model and transform with the final estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "get_feature_names_out": {
                                                        "type": "function",
                                                        "info": "Get output feature names for transformation.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "input_features": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "inverse_transform": {
                                                        "type": "function",
                                                        "info": "Apply `inverse_transform` for each step in a reverse order.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "predict": {
                                                        "type": "function",
                                                        "info": "Transform the data, and apply `predict` with the final estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "predict_log_proba": {
                                                        "type": "function",
                                                        "info": "Transform the data, and apply `predict_log_proba` with the final estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "predict_proba": {
                                                        "type": "function",
                                                        "info": "Transform the data, and apply `predict_proba` with the final estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "score": {
                                                        "type": "function",
                                                        "info": "Transform the data, and apply `score` with the final estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "sample_weight": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "score_samples": {
                                                        "type": "function",
                                                        "info": "Transform the data, and apply `score_samples` with the final estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set the output container when `\"transform\"` and `\"fit_transform\"` are called.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "kwargs": "None"
                                                        }
                                                    },
                                                    "set_score_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``score`` method.",
                                                        "returns": "noos.analytics._domain.models.dft.DFRegressor",
                                                        "parameters": {
                                                            "sample_weight": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "Transform the data, and apply `transform` with the final estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "kwargs": "<class 'NoneType'>"
                                                        }
                                                    }
                                                }
                                            },
                                            "DFSearch": {
                                                "type": "class",
                                                "info": "Exhaustive search over specified parameter values for a `DFRegressor`.",
                                                "returns": "noos.analytics._domain.models.dft.DFSearch",
                                                "items": {
                                                    "decision_function": {
                                                        "type": "function",
                                                        "info": "Call decision_function on the estimator with the best found parameters.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None"
                                                        }
                                                    },
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "Run fit with all sets of parameters.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "inverse_transform": {
                                                        "type": "function",
                                                        "info": "Call inverse_transform on the estimator with the best found params.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None"
                                                        }
                                                    },
                                                    "predict": {
                                                        "type": "function",
                                                        "info": "Call predict on the estimator with the best found parameters.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None"
                                                        }
                                                    },
                                                    "predict_log_proba": {
                                                        "type": "function",
                                                        "info": "Call predict_log_proba on the estimator with the best found parameters.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None"
                                                        }
                                                    },
                                                    "predict_proba": {
                                                        "type": "function",
                                                        "info": "Call predict_proba on the estimator with the best found parameters.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None"
                                                        }
                                                    },
                                                    "score": {
                                                        "type": "function",
                                                        "info": "Return the score on the given data, if the estimator has been refit.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "params": "None"
                                                        }
                                                    },
                                                    "score_samples": {
                                                        "type": "function",
                                                        "info": "Call score_samples on the estimator with the best found parameters.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "Call transform on the estimator with the best found parameters.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "param_grid": "dict",
                                                            "kwargs": "<class 'NoneType'>"
                                                        }
                                                    }
                                                }
                                            },
                                            "DFTransformer": {
                                                "type": "class",
                                                "info": "Truncated discrete Fourier transformer.",
                                                "returns": "noos.analytics._domain.models.dft.DFTransformer",
                                                "items": {
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._core.collections.Any",
                                                        "parameters": {
                                                            "args": "noos.analytics._core.collections.Any",
                                                            "kwargs": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "fit_transform": {
                                                        "type": "function",
                                                        "info": "Fit to data, then transform it.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "fit_params": "None"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "set_output": {
                                                        "type": "function",
                                                        "info": "Set output container.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "transform": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "transform": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._core.collections.Any",
                                                        "parameters": {
                                                            "args": "noos.analytics._core.collections.Any",
                                                            "kwargs": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "frequencies": "numpy.ndarray | None",
                                                            "spacing": "float",
                                                            "threshold": "float"
                                                        }
                                                    }
                                                }
                                            },
                                            "base": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "SAMPLE_GRID": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "SAMPLE_SPACING": {
                                                        "type": "object",
                                                        "info": "Convert a string or number to a floating-point number, if possible.",
                                                        "returns": "float"
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "utils": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "create_dft_features": {
                                                                "type": "function",
                                                                "info": "Generate cosinus- / sinusoidal features from a signal spectrogram.",
                                                                "returns": "numpy.ndarray",
                                                                "parameters": {
                                                                    "signal_input": "numpy.ndarray",
                                                                    "signal_frequencies": "numpy.ndarray"
                                                                }
                                                            },
                                                            "filter_dft_freq": {
                                                                "type": "function",
                                                                "info": "Truncate frequencies from a Discrete Fourier Transform.",
                                                                "returns": "numpy.ndarray",
                                                                "parameters": {
                                                                    "data_sample": "numpy.ndarray",
                                                                    "signal_length": "int",
                                                                    "signal_spacing": "float",
                                                                    "norm_threshold": "float",
                                                                    "freq_threshold": "float"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "utils": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "create_dft_features": {
                                                        "type": "function",
                                                        "info": "Generate cosinus- / sinusoidal features from a signal spectrogram.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "signal_input": "numpy.ndarray",
                                                            "signal_frequencies": "numpy.ndarray"
                                                        }
                                                    },
                                                    "filter_dft_freq": {
                                                        "type": "function",
                                                        "info": "Truncate frequencies from a Discrete Fourier Transform.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "data_sample": "numpy.ndarray",
                                                            "signal_length": "int",
                                                            "signal_spacing": "float",
                                                            "norm_threshold": "float",
                                                            "freq_threshold": "float"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "fleten": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "FletenRegressor": {
                                                "type": "class",
                                                "info": "Fleten & lemming quadratic minimization problem.",
                                                "returns": "noos.analytics._domain.models.fleten.FletenRegressor",
                                                "items": {
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._core.collections.Any",
                                                        "parameters": {
                                                            "args": "noos.analytics._core.collections.Any",
                                                            "kwargs": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "get_metadata_routing": {
                                                        "type": "function",
                                                        "info": "Get metadata routing of this object.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "get_params": {
                                                        "type": "function",
                                                        "info": "Get parameters for this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "deep": "None"
                                                        }
                                                    },
                                                    "predict": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._core.collections.Any",
                                                        "parameters": {
                                                            "args": "noos.analytics._core.collections.Any",
                                                            "kwargs": "noos.analytics._core.collections.Any"
                                                        }
                                                    },
                                                    "score": {
                                                        "type": "function",
                                                        "info": "Return :ref:`coefficient of determination <r2_score>` on test data.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "X": "None",
                                                            "y": "None",
                                                            "sample_weight": "None"
                                                        }
                                                    },
                                                    "set_params": {
                                                        "type": "function",
                                                        "info": "Set the parameters of this estimator.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "params": "None"
                                                        }
                                                    },
                                                    "set_score_request": {
                                                        "type": "function",
                                                        "info": "Request metadata passed to the ``score`` method.",
                                                        "returns": "noos.analytics._domain.models.fleten.FletenRegressor",
                                                        "parameters": {
                                                            "sample_weight": "typing.Union[bool, NoneType, str]"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "alpha": "float"
                                                        }
                                                    }
                                                }
                                            },
                                            "base": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyMatrix": {
                                                        "type": "object",
                                                        "info": "Type variable.",
                                                        "returns": "noos.analytics._core.collections.TypeVar"
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "utils": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyMatrix": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "fetch_lagrangian_derivative": {
                                                                "type": "function",
                                                                "info": "Build the Lagrangian first derivative for the Fleten minimization problem.",
                                                                "returns": "scipy.sparse._csc.csc_matrix",
                                                                "parameters": {
                                                                    "n_periods": "int",
                                                                    "alpha": "float"
                                                                }
                                                            },
                                                            "solve_linear_system": {
                                                                "type": "function",
                                                                "info": "Solve Fleten minimization problem in its linear format.",
                                                                "returns": "numpy.ndarray",
                                                                "parameters": {
                                                                    "y": "numpy.ndarray",
                                                                    "R": "~AnyMatrix",
                                                                    "p": "numpy.ndarray",
                                                                    "alpha": "float"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "utils": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyMatrix": {
                                                        "type": "object",
                                                        "info": "Type variable.",
                                                        "returns": "noos.analytics._core.collections.TypeVar"
                                                    },
                                                    "fetch_lagrangian_derivative": {
                                                        "type": "function",
                                                        "info": "Build the Lagrangian first derivative for the Fleten minimization problem.",
                                                        "returns": "scipy.sparse._csc.csc_matrix",
                                                        "parameters": {
                                                            "n_periods": "int",
                                                            "alpha": "float"
                                                        }
                                                    },
                                                    "solve_linear_system": {
                                                        "type": "function",
                                                        "info": "Solve Fleten minimization problem in its linear format.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "y": "numpy.ndarray",
                                                            "R": "~AnyMatrix",
                                                            "p": "numpy.ndarray",
                                                            "alpha": "float"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "identity_estimator": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "IdentityEstimator": {
                                                "type": "class",
                                                "info": "Identity estimator just rendering a DataFrame for the given window/frequency.",
                                                "returns": "noos.analytics._domain.models.identity_estimator.IdentityEstimator",
                                                "items": {
                                                    "fit": {
                                                        "type": "function",
                                                        "info": "Just copy given parameters to class parameters.",
                                                        "returns": "noos.analytics._domain.models.identity_estimator.IdentityEstimator",
                                                        "parameters": {
                                                            "features": "pd.DataFrame",
                                                            "frequency": "str"
                                                        }
                                                    },
                                                    "partial_fit": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "noos.analytics._domain.models.identity_estimator.IdentityEstimator",
                                                        "parameters": {
                                                            "args": "<class 'noos_analytics._domain.models.identity_estimator.IdentityEstimator'>"
                                                        }
                                                    },
                                                    "predict": {
                                                        "type": "function",
                                                        "info": "Return predictions for the given time range.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "selected_column": "str"
                                                        }
                                                    }
                                                }
                                            },
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "pricings": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "consumer_pwfr": {
                                        "type": "module",
                                        "info": "PWRTE pricing module.",
                                        "items": {
                                            "Annotated": {
                                                "type": "class",
                                                "info": "Add context-specific metadata to a type.",
                                                "returns": "noos.analytics._domain.pricings.consumer_pwfr.Annotated",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "GROUPBY_FREQ": {
                                                "type": "object",
                                                "info": "str(object='') -> str",
                                                "returns": "pd.CategoricalIndex.str"
                                            },
                                            "MaskMap": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "PWRTE": {
                                                "type": "object",
                                                "info": "Generic financial / physical asset.",
                                                "returns": "noos.analytics._domain.products.assets.Asset"
                                            },
                                            "PricingArenh": {
                                                "type": "class",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "noos.analytics._domain.pricings.consumer_pwfr.PricingArenh",
                                                "items": {
                                                    "arenh_rights_mtm_pnl": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "arenh_rights_sum_mwh": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "arenh_load_mean_mw": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "__getitem__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "clear": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "copy": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "fromkeys": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "builtin_function_or_method"
                                                    },
                                                    "get": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "items": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "keys": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "pop": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "popitem": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "setdefault": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "update": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "values": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "PricingBase": {
                                                "type": "class",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "noos.analytics._domain.pricings.consumer_pwfr.PricingBase",
                                                "items": {
                                                    "arenh_rights_mtm_pnl": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "arenh_rights_sum_mwh": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "arenh_load_mean_mw": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "capacity_obligation_mw": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "volumes_sum_mwh": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "volumes_mtm_sum": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "__getitem__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "clear": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "copy": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "fromkeys": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "builtin_function_or_method"
                                                    },
                                                    "get": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "items": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "keys": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "pop": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "popitem": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "setdefault": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "update": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "values": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "PricingCapacity": {
                                                "type": "class",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "noos.analytics._domain.pricings.consumer_pwfr.PricingCapacity",
                                                "items": {
                                                    "capacity_obligation_mw": {
                                                        "type": "attribute",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "pd.Series|pd.DataFrame"
                                                    },
                                                    "__getitem__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "clear": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "copy": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "fromkeys": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "builtin_function_or_method"
                                                    },
                                                    "get": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "items": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "keys": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "pop": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "popitem": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "setdefault": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "update": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "values": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "TZ_DELIVERY": {
                                                "type": "object",
                                                "info": "Abstract base class for time zone info objects.",
                                                "returns": "zoneinfo.ZoneInfo"
                                            },
                                            "TypedDict": {
                                                "type": "function",
                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                "returns": "None",
                                                "parameters": {
                                                    "typename": "None",
                                                    "fields": "None",
                                                    "total": "None",
                                                    "kwargs": "None"
                                                }
                                            },
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "get_registers": {
                                                "type": "function",
                                                "info": "Build registers given a load curve and register masks.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "load_ts": "pd.Series",
                                                    "mask_map": "dict[str, collections.abc.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame],pd.Series| pandas.core.frame.DataFrame]]"
                                                }
                                            },
                                            "masks": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "days_holidays": {
                                                        "type": "function",
                                                        "info": "Public holidays for a single country.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "country_code": "str"
                                                        }
                                                    },
                                                    "days_we": {
                                                        "type": "function",
                                                        "info": "WE days.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "eex_peak": {
                                                        "type": "function",
                                                        "info": "EEX Peak Power definition: peak hours during weekdays including holidays.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "fr_arenh": {
                                                        "type": "function",
                                                        "info": "France ARENH scheme.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "fr_capacity_obligation": {
                                                        "type": "function",
                                                        "info": "France capacity obligation scheme.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "fr_hc": {
                                                        "type": "function",
                                                        "info": "France offpeak hours `Heures Creuses`.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "fr_hce": {
                                                        "type": "function",
                                                        "info": "France summer offpeak hours `Heures Creuses Ete`.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "fr_hch": {
                                                        "type": "function",
                                                        "info": "France winter offpeak hours `Heures Creuses Hiver`.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "fr_hp": {
                                                        "type": "function",
                                                        "info": "France peak hours `Heures Pleines`.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "fr_hpe": {
                                                        "type": "function",
                                                        "info": "France summer peak hours `Heures Pleines Ete`.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "fr_hph": {
                                                        "type": "function",
                                                        "info": "France winter peak hours `Heures Pleines Hiver`.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "hours_extended_peak": {
                                                        "type": "function",
                                                        "info": "Hours 7 to 23 in local time.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "hours_fr_peak_capacity_obligation": {
                                                        "type": "function",
                                                        "info": "Hours 7 to 15 and 18 to 20 in local time.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "hours_night_offpeak": {
                                                        "type": "function",
                                                        "info": "Hours 1 to 7 at night in local time.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "hours_peak": {
                                                        "type": "function",
                                                        "info": "Hours 8 to 20 in local time.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "hours_shoulder_peak": {
                                                        "type": "function",
                                                        "info": "Hours 8 to 10 and 18 to 20 in local time.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "identity": {
                                                        "type": "function",
                                                        "info": "Indentiy: no change.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "mask_fr_arenh": {
                                                        "type": "function",
                                                        "info": "France ARENH scheme.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "mask_fr_capacity_obligation": {
                                                        "type": "function",
                                                        "info": "France capacity obligation scheme.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "mask_fr_hc": {
                                                        "type": "function",
                                                        "info": "France offpeak hours `Heures Creuses`.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "mask_fr_hce": {
                                                        "type": "function",
                                                        "info": "France summer offpeak hours `Heures Creuses Ete`.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "mask_fr_hch": {
                                                        "type": "function",
                                                        "info": "France winter offpeak hours `Heures Creuses Hiver`.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "mask_fr_hp": {
                                                        "type": "function",
                                                        "info": "France peak hours `Heures Pleines`.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "mask_fr_hpe": {
                                                        "type": "function",
                                                        "info": "France summer peak hours `Heures Pleines Ete`.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "mask_fr_hph": {
                                                        "type": "function",
                                                        "info": "France winter peak hours `Heures Pleines Hiver`.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "season_q1": {
                                                        "type": "function",
                                                        "info": "January to March inclusive.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "season_q4": {
                                                        "type": "function",
                                                        "info": "October to December inclusive.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "season_shoulder_months": {
                                                        "type": "function",
                                                        "info": "April to June and September to October inclusive.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "season_summer_peak": {
                                                        "type": "function",
                                                        "info": "July and August.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "season_winter": {
                                                        "type": "function",
                                                        "info": "October to March inclusive.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "season_winter_peak": {
                                                        "type": "function",
                                                        "info": "November to March inclusive.",
                                                        "returns": "numpy.ndarray",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "pricing_pwfr_arenh": {
                                                "type": "function",
                                                "info": "Returns a dictionnary with ARENH Dataframes for French power pricing.",
                                                "returns": "noos.analytics._domain.pricings.consumer_pwfr.PricingArenh",
                                                "parameters": {
                                                    "loads_df": "pd.DataFrame",
                                                    "arenh_df": "pd.DataFrame",
                                                    "load_to_volume": "float"
                                                }
                                            },
                                            "pricing_pwfr_base": {
                                                "type": "function",
                                                "info": "Returns a dictionnary with Base Dataframes for French power pricing.",
                                                "returns": "noos.analytics._domain.pricings.consumer_pwfr.PricingBase",
                                                "parameters": {
                                                    "loads_df": "pd.DataFrame",
                                                    "curve_ts": "pd.Series",
                                                    "arenh_df": "pd.DataFrame",
                                                    "frequency_timedelta": "datetime.timedelta"
                                                }
                                            },
                                            "pricing_pwfr_capacity_obligation": {
                                                "type": "function",
                                                "info": "Returns a dictionnary with ARENH Dataframes for French power pricing.",
                                                "returns": "noos.analytics._domain.pricings.consumer_pwfr.PricingCapacity",
                                                "parameters": {
                                                    "loads_df": "pd.DataFrame",
                                                    "arenh_df": "pd.DataFrame"
                                                }
                                            },
                                            "pricing_pwfr_multiple": {
                                                "type": "function",
                                                "info": "Return a detailled French power pricing per year including arenh and capacity obligation.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "loads_df": "pd.DataFrame",
                                                    "curve_ts": "pd.Series",
                                                    "arenh_df": "pd.DataFrame",
                                                    "frequency_timedelta": "datetime.timedelta | None"
                                                }
                                            },
                                            "pricing_pwfr_with_masks": {
                                                "type": "function",
                                                "info": "Return a dictionnary with French power prices including arenh and capacity obligation.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "load_ts": "pd.Series",
                                                    "curve_ts": "pd.Series",
                                                    "arenh_df": "pd.DataFrame",
                                                    "mask_map": "dict[str, collections.abc.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame],pd.Series| pandas.core.frame.DataFrame]]",
                                                    "arenh_smoothing": "typing.Annotated[float, 'percentage (between 0 and 1)']",
                                                    "frequency_timedelta": "datetime.timedelta | None"
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyPandas": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "AnyTimezone": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "MetadataType": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Record": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Records": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "forward": {
                                        "type": "module",
                                        "info": "Generic programming interface for operations on curves.",
                                        "items": {
                                            "PRODUCT_COLUMNS": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "TRADE_COLUMNS": {
                                                "type": "object",
                                                "info": "Built-in mutable sequence.",
                                                "returns": "pd.Series.list"
                                            },
                                            "curve_to_monthly_prices": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe of monthly products with price from a price forward curve object.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "curve": "noos.analytics.PriceForwardCurve",
                                                    "intraday_delivery": "str"
                                                }
                                            },
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "price_forward": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "models": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "fitting": {
                                                        "type": "module",
                                                        "info": "Generic programming interface for operations on curves.",
                                                        "items": {
                                                            "FIXING_COLUMNS": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "curve_from_fixings_fleten": {
                                                                "type": "function",
                                                                "info": "Calibrate a price forward curve object from a set of market fixings and historical features.",
                                                                "returns": "noos.analytics.PriceForwardCurve",
                                                                "parameters": {
                                                                    "fixings": "pd.DataFrame",
                                                                    "features": "pd.DataFrame",
                                                                    "created_at": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "curve_from_fixings_identity": {
                                                                "type": "function",
                                                                "info": "Calibrate a price forward curve object from a set of market fixings and features.",
                                                                "returns": "noos.analytics.PriceForwardCurve",
                                                                "parameters": {
                                                                    "fixings": "pd.DataFrame",
                                                                    "features": "pd.DataFrame",
                                                                    "created_at": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "price_forward": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "product_collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "forecasting": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "dft": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "identity_estimator": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "models": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "d_fleten_price_curve_model": {
                                                                "type": "object",
                                                                "info": "Generic class for price forward curve models.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel"
                                                            },
                                                            "forecasting": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "hh_fleten_price_curve_model": {
                                                                "type": "object",
                                                                "info": "Generic class for price forward curve models.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel"
                                                            },
                                                            "identity_fleten_price_curve_model": {
                                                                "type": "object",
                                                                "info": "Generic class for price forward curve models.",
                                                                "returns": "noos.analytics._domain.curves.price_forward.models.PriceForwardCurveModel"
                                                            },
                                                            "optimization": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "optimization": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "fleten": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "forecasting": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "price_products_with_curve": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe with volume and price for a given curve and products.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "products": "pd.DataFrame",
                                                    "curve": "noos.analytics.PriceForwardCurve"
                                                }
                                            },
                                            "price_products_with_series": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe with volume and price for a given curve and products.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "products": "pd.DataFrame",
                                                    "curve_ts": "pd.Series"
                                                }
                                            },
                                            "price_trades_with_curve": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe with volume, price, value, pnl for a given curve and trades.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "trades": "pd.DataFrame",
                                                    "curve": "noos.analytics.PriceForwardCurve"
                                                }
                                            },
                                            "price_trades_with_series": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe with volume, price, value, pnl for a given curve and trades.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "trades": "pd.DataFrame",
                                                    "curve_ts": "pd.Series"
                                                }
                                            },
                                            "product_collections": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "fixings": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Union": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "arrays": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on numpy arrays.",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "indices": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "indices": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "arrays": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on numpy arrays.",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "imbalance": {
                                        "type": "module",
                                        "info": "Generic programming interface for operations on curves.",
                                        "items": {
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "imbalance_strategies_revenue": {
                                                "type": "function",
                                                "info": "Return a pandas dataframe with volumes and strategies revenue on intersection of all series.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "volume_actual": "pd.Series",
                                                    "volume_predicted": "pd.Series",
                                                    "da_ts": "pd.Series",
                                                    "imbalance_positive_ts": "pd.Series",
                                                    "imbalance_negative_ts": "pd.Series"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "spreads": {
                                        "type": "module",
                                        "info": "Spark spread functions.",
                                        "items": {
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "spark_spread": {
                                                "type": "function",
                                                "info": "Compute a simple spark spread with heat_rate, emissions and maintenance.",
                                                "returns": "pd.Series",
                                                "parameters": {
                                                    "power_ts": "pd.Series",
                                                    "gas_ts": "pd.Series",
                                                    "co2_ts": "pd.Series",
                                                    "heat_rate": "float",
                                                    "emissions": "float",
                                                    "maintenance": "float"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "products": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "assets": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "Asset": {
                                                "type": "class",
                                                "info": "Generic financial / physical asset.",
                                                "returns": "noos.analytics._domain.products.assets.Asset",
                                                "items": {
                                                    "delivery_holidays_class": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "holidays.holiday_base.HolidayBase"
                                                    },
                                                    "delivery_offset_timedelta": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "datetime.timedelta"
                                                    },
                                                    "delivery_timezone_class": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "frequency_timedelta": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "datetime.timedelta"
                                                    },
                                                    "is_emission": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "bool"
                                                    },
                                                    "is_gas": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "bool"
                                                    },
                                                    "is_power": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "bool"
                                                    },
                                                    "normalization": {
                                                        "type": "property",
                                                        "info": "Return the timedelta used for normalizing the asset.",
                                                        "returns": "noos.analytics._core.conversions.Normalization"
                                                    },
                                                    "timezone_class": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "to_dict": {
                                                        "type": "function",
                                                        "info": "Export an Asset object as a record.",
                                                        "returns": "dict[str, typing.Any]",
                                                        "parameters": {}
                                                    },
                                                    "tz": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "tzinfo": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "volume_multiplier": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "float"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "name": "str",
                                                            "family": "str",
                                                            "frequency": "str",
                                                            "timezone": "str",
                                                            "unit": "str",
                                                            "currency": "str",
                                                            "delivery_holidays": "str",
                                                            "delivery_timezone": "str",
                                                            "delivery_offset": "str"
                                                        }
                                                    }
                                                }
                                            },
                                            "AssetDict": {
                                                "type": "class",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "noos.analytics._domain.products.assets.AssetDict",
                                                "items": {
                                                    "name": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "family": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "frequency": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "timezone": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "unit": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "currency": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "delivery_holidays": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "delivery_timezone": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "delivery_offset": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "__getitem__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "clear": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "copy": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "fromkeys": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "builtin_function_or_method"
                                                    },
                                                    "get": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "items": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "keys": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "pop": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "popitem": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "setdefault": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "update": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "values": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "TypedDict": {
                                                "type": "function",
                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                "returns": "None",
                                                "parameters": {
                                                    "typename": "None",
                                                    "fields": "None",
                                                    "total": "None",
                                                    "kwargs": "None"
                                                }
                                            },
                                            "conversions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "convert_load_to_volume": {
                                                        "type": "function",
                                                        "info": "Convert load to volume. Default 1 hour normalization.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series",
                                                            "normalization": "noos.analytics._core.conversions.Normalization"
                                                        }
                                                    },
                                                    "convert_volume_to_load": {
                                                        "type": "function",
                                                        "info": "Convert volume to load. Default 1 hour normalization.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series",
                                                            "normalization": "noos.analytics._core.conversions.Normalization"
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "infer_nil_end": {
                                                        "type": "function",
                                                        "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "ts": "pd.Series",
                                                            "timestep": "datetime.timedelta"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "datetimes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on date times.",
                                                "items": {
                                                    "ensure_tz_aware_datetime": {
                                                        "type": "function",
                                                        "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "obj": "str | datetime.datetime | datetime.date"
                                                        }
                                                    },
                                                    "ensure_utc_datetime": {
                                                        "type": "function",
                                                        "info": "Returns a datetime object with UTC timezone.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "obj": "str | datetime.datetime | datetime.date"
                                                        }
                                                    },
                                                    "is_extended_weekend_day": {
                                                        "type": "function",
                                                        "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                        "returns": "bool",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "next_extended_weekend_day": {
                                                        "type": "function",
                                                        "info": "Return the next extended weekend day after the given date.",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "next_non_extended_weekend_day": {
                                                        "type": "function",
                                                        "info": "Return the next non extended weekend day after the given date.",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "to_timedelta": {
                                                        "type": "function",
                                                        "info": "Transform a frequency string into a timedelta object.",
                                                        "returns": "datetime.timedelta",
                                                        "parameters": {
                                                            "freq": "str"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "holidays": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "IMPLEMENTED_HOLIDAYS": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "get_holidays": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "holidays.holiday_base.HolidayBase",
                                                        "parameters": {
                                                            "holidays_zone": "str"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "strings": {
                                                "type": "module",
                                                "info": "Utility functions for operating on strings.",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyPandas": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "AnyTimezone": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "MetadataType": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Record": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Records": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "validators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "asset": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "enums": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "is_emission": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "is_gas": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "is_power": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "calendar": {
                                                        "type": "module",
                                                        "info": "Logic for validating calendar delivery periods.",
                                                        "items": {
                                                            "CALENDAR_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "DATE_SUFFIX": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "MONTH_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "QUARTER_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "REGEX_BOM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOW": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOWEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DASH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_HOL": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_OFFSET": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_SEASON": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEK": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YYYY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "ROLLING_OFFSET_DAYS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "SEASON_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "bom_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bow_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bowext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "calendar_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "da_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "quarter_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "rolling_ldd": {
                                                                "type": "function",
                                                                "info": "Dummy function to use with rolling period to avoid None side effects.",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "season_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "we_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "week_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "weext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "index": {
                                                        "type": "module",
                                                        "info": "Logic for validating index instruments.",
                                                        "items": {
                                                            "LEFT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "deliveries": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "intraday": {
                                                        "type": "module",
                                                        "info": "Logic for validating intraday delivery periods.",
                                                        "items": {
                                                            "REGEX_2H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_4H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BASE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BDAY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_HH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_NONE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_OFF": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_PEAK": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_QH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_HH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_QH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "is_emission": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "is_gas": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "is_power": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "collections": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "fixings": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Union": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "arrays": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on numpy arrays.",
                                                        "items": {
                                                            "vstack_sparse_arrays": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "scipy.sparse._csc.csc_matrix",
                                                                "parameters": {
                                                                    "array": "numpy.ndarray",
                                                                    "matrix": "scipy.sparse._csc.csc_matrix | None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "collections": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterator": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "indices": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "arrays": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on numpy arrays.",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "instruments": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "deliveries": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "index": {
                                                                "type": "module",
                                                                "info": "Logic for validating index instruments.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "indices": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "arrays": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on numpy arrays.",
                                                        "items": {
                                                            "vstack_sparse_arrays": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "scipy.sparse._csc.csc_matrix",
                                                                "parameters": {
                                                                    "array": "numpy.ndarray",
                                                                    "matrix": "scipy.sparse._csc.csc_matrix | None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "collections": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterator": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "instruments": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "deliveries": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "index": {
                                                                "type": "module",
                                                                "info": "Logic for validating index instruments.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "deliveries": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "CalendarDelivery": {
                                                "type": "class",
                                                "info": "Instruments are sold for delivery over a defined calendar period.",
                                                "returns": "noos.analytics._domain.products.deliveries.CalendarDelivery",
                                                "items": {
                                                    "from_dict": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "name": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "start_date": {
                                                        "type": "property",
                                                        "info": "Return the start date of the delivery period.",
                                                        "returns": "datetime.date"
                                                    },
                                                    "to_dict": {
                                                        "type": "function",
                                                        "info": "Export a CalendarDelivery object as a record.",
                                                        "returns": "dict[str, typing.Any]",
                                                        "parameters": {}
                                                    },
                                                    "validator": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "noos_analytics._domain.products.validators.calendar.PeriodValidator"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "name": "str"
                                                        }
                                                    }
                                                }
                                            },
                                            "IntradayDelivery": {
                                                "type": "class",
                                                "info": "Instruments can be delivered over a defined intraday period.",
                                                "returns": "noos.analytics._domain.products.deliveries.IntradayDelivery",
                                                "items": {
                                                    "from_dict": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "name": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "to_dict": {
                                                        "type": "function",
                                                        "info": "Export an IntradayDelivery object as a record.",
                                                        "returns": "dict[str, typing.Any]",
                                                        "parameters": {}
                                                    },
                                                    "validator": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "noos_analytics._domain.products.validators.intraday.PeriodValidator"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "name": "str"
                                                        }
                                                    }
                                                }
                                            },
                                            "calendar": {
                                                "type": "module",
                                                "info": "Logic for validating calendar delivery periods.",
                                                "items": {
                                                    "CALENDAR_FDM": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "DATE_SUFFIX": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "MONTH_FDM": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "Period": {
                                                        "type": "class",
                                                        "info": "Enum representing the type of calendar delivery period.",
                                                        "returns": "noos.analytics._domain.products.deliveries.calendar.Period",
                                                        "items": {
                                                            "BOM": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "BOW": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "BOWext": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "CALENDAR": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "D": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "DA": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "MONTH": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "QUARTER": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "RollingCalendar": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "RollingD": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "RollingDA": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "RollingMonth": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "RollingQuarter": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "SEASON": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "WD": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "WE": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "WEEK": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "WEext": {
                                                                "type": "object",
                                                                "info": "Enum representing the type of calendar delivery period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                                                            },
                                                            "__getitem__": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "name": {
                                                                "type": "object",
                                                                "info": "This is a descriptor, used to define attributes that act differently",
                                                                "returns": "enum.property"
                                                            },
                                                            "value": {
                                                                "type": "object",
                                                                "info": "This is a descriptor, used to define attributes that act differently",
                                                                "returns": "enum.property"
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "args": "None",
                                                                    "kwds": "None"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "PeriodInfo": {
                                                        "type": "class",
                                                        "info": "PeriodInfo(order, regex_prefix, regex_period, regex_date, help_dict, ldd)",
                                                        "returns": "noos.analytics._domain.products.deliveries.calendar.PeriodInfo",
                                                        "items": {
                                                            "__getitem__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "wrapper_descriptor"
                                                            },
                                                            "count": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "help_dict": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "index": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "ldd": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "order": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "regex_date": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "regex_period": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "regex_prefix": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "wrapper_descriptor"
                                                            }
                                                        }
                                                    },
                                                    "QUARTER_FDM": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "REGEX_BOM": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_BOW": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_BOWEXT": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_CALENDAR": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_D": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_DA": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_DASH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_DD": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_HOL": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_MM": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_MONTH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_QUARTER": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_CALENDAR": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_D": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_DA": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_MONTH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_OFFSET": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_QUARTER": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_SEASON": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_USCORE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_WD": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_WE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_WEEK": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_WEEXT": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_YY": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_YYYY": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "ROLLING_OFFSET_DAYS": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "SEASON_FDM": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "bom_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "bow_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "bowext_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "calendar_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "da_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "quarter_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "rolling_ldd": {
                                                        "type": "function",
                                                        "info": "Dummy function to use with rolling period to avoid None side effects.",
                                                        "returns": "datetime.date",
                                                        "parameters": {}
                                                    },
                                                    "season_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "we_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "week_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "weext_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "intraday": {
                                                "type": "module",
                                                "info": "Logic for validating intraday delivery periods.",
                                                "items": {
                                                    "PeriodInfo": {
                                                        "type": "class",
                                                        "info": "PeriodInfo(order, regex_prefix, regex_period, weekmask, start_time, interval)",
                                                        "returns": "noos.analytics._domain.products.deliveries.intraday.PeriodInfo",
                                                        "items": {
                                                            "__getitem__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "wrapper_descriptor"
                                                            },
                                                            "count": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "index": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method_descriptor"
                                                            },
                                                            "interval": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "order": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "regex_period": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "regex_prefix": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "start_time": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "weekmask": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "collections._tuplegetter"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "wrapper_descriptor"
                                                            }
                                                        }
                                                    },
                                                    "REGEX_2H": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_4H": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_BASE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_BDAY": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_H": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_HH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_NONE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_OFF": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_PEAK": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_QH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_H": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_HH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_QH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "strings": {
                                                "type": "module",
                                                "info": "Utility functions for operating on strings.",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "total_ordering": {
                                                "type": "function",
                                                "info": "Class decorator that fills in missing ordering methods",
                                                "returns": "None",
                                                "parameters": {
                                                    "cls": "None"
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyPandas": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "AnyTimezone": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "MetadataType": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Record": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Records": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "exceptions": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "IndexNoDeliveriesError": {
                                                "type": "class",
                                                "info": "Basic exception raised if empty deliveries.",
                                                "returns": "noos.analytics._domain.products.exceptions.IndexNoDeliveriesError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "PeriodError": {
                                                "type": "class",
                                                "info": "Basic exception raised while converting tz-aware datetime.",
                                                "returns": "noos.analytics._domain.products.exceptions.PeriodError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "SymbolValidationError": {
                                                "type": "class",
                                                "info": "Basic exception raised while if symbol incorrect.",
                                                "returns": "noos.analytics._domain.products.exceptions.SymbolValidationError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "generators": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "PERIODS": {
                                                "type": "attribute",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "dict[str, noos_analytics._domain.products.generators.PeriodParams]"
                                            },
                                            "PeriodParams": {
                                                "type": "class",
                                                "info": "PeriodParams(freq: str, format: str)",
                                                "returns": "noos.analytics._domain.products.generators.PeriodParams",
                                                "items": {
                                                    "freq": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "format": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "freq": "str",
                                                            "format": "str"
                                                        }
                                                    }
                                                }
                                            },
                                            "dataclass": {
                                                "type": "function",
                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                "returns": "None",
                                                "parameters": {
                                                    "cls": "None",
                                                    "init": "None",
                                                    "repr": "None",
                                                    "eq": "None",
                                                    "order": "None",
                                                    "unsafe_hash": "None",
                                                    "frozen": "None",
                                                    "match_args": "None",
                                                    "kw_only": "None",
                                                    "slots": "None",
                                                    "weakref_slot": "None"
                                                }
                                            },
                                            "generate_calendar_deliveries": {
                                                "type": "function",
                                                "info": "Generate a list of calendar deliveries based on the parameters.",
                                                "returns": "list[str]",
                                                "parameters": {
                                                    "period": "str",
                                                    "start_at": "datetime.datetime | str | None",
                                                    "end_at": "datetime.datetime | str | None",
                                                    "n_products": "int | None"
                                                }
                                            },
                                            "generate_calendar_deliveries_from_load": {
                                                "type": "function",
                                                "info": "Generate a list of calendar deliveries based on the load curve.",
                                                "returns": "list[str]",
                                                "parameters": {
                                                    "load": "noos.analytics.LoadCurveBase",
                                                    "period": "str"
                                                }
                                            },
                                            "load": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "instruments": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "ASSET_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                            },
                                            "BaseFixing": {
                                                "type": "class",
                                                "info": "Base class for wholesale fixings.",
                                                "returns": "noos.analytics._domain.products.instruments.BaseFixing",
                                                "items": {
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "price": "float",
                                                            "published_at": "datetime.datetime"
                                                        }
                                                    }
                                                }
                                            },
                                            "BaseIndex": {
                                                "type": "class",
                                                "info": "Base class for wholesale indices.",
                                                "returns": "noos.analytics._domain.products.instruments.BaseIndex",
                                                "items": {
                                                    "asset": {
                                                        "type": "attribute",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "calendar_delivery": {
                                                        "type": "attribute",
                                                        "info": "Instruments are sold for delivery over a defined calendar period.",
                                                        "returns": "noos.analytics._domain.products.deliveries.CalendarDelivery"
                                                    },
                                                    "intraday_delivery": {
                                                        "type": "attribute",
                                                        "info": "Instruments can be delivered over a defined intraday period.",
                                                        "returns": "noos.analytics._domain.products.deliveries.IntradayDelivery"
                                                    },
                                                    "from_dict": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "get_symbol": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {}
                                                    },
                                                    "symbol": {
                                                        "type": "property",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "to_dict": {
                                                        "type": "function",
                                                        "info": "Export an Index object as a record.",
                                                        "returns": "dict[str, typing.Any]",
                                                        "parameters": {}
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "asset": "noos.analytics._domain.products.assets.Asset",
                                                            "calendar_delivery": "noos.analytics._domain.products.deliveries.CalendarDelivery",
                                                            "intraday_delivery": "noos.analytics._domain.products.deliveries.IntradayDelivery"
                                                        }
                                                    }
                                                }
                                            },
                                            "ForwardFixing": {
                                                "type": "class",
                                                "info": "Wholesale forward fixing.",
                                                "returns": "noos.analytics._domain.products.instruments.ForwardFixing",
                                                "items": {
                                                    "from_dict": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "to_dict": {
                                                        "type": "function",
                                                        "info": "Export a ForwardFixing object as a record.",
                                                        "returns": "dict[str, typing.Any]",
                                                        "parameters": {}
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "price": "float",
                                                            "published_at": "datetime.datetime",
                                                            "index": "noos.analytics.ForwardIndex"
                                                        }
                                                    }
                                                }
                                            },
                                            "REGEX_USCORE": {
                                                "type": "object",
                                                "info": "str(object='') -> str",
                                                "returns": "pd.CategoricalIndex.str"
                                            },
                                            "assets": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "TypedDict": {
                                                        "type": "function",
                                                        "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "typename": "None",
                                                            "fields": "None",
                                                            "total": "None",
                                                            "kwargs": "None"
                                                        }
                                                    },
                                                    "conversions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "convert_load_to_volume": {
                                                                "type": "function",
                                                                "info": "Convert load to volume. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "convert_volume_to_load": {
                                                                "type": "function",
                                                                "info": "Convert volume to load. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "infer_nil_end": {
                                                                "type": "function",
                                                                "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "timestep": "datetime.timedelta"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "holidays": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "IMPLEMENTED_HOLIDAYS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "get_holidays": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "holidays.holiday_base.HolidayBase",
                                                                "parameters": {
                                                                    "holidays_zone": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "strings": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on strings.",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "asset": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "index": {
                                                                "type": "module",
                                                                "info": "Logic for validating index instruments.",
                                                                "items": {}
                                                            },
                                                            "intraday": {
                                                                "type": "module",
                                                                "info": "Logic for validating intraday delivery periods.",
                                                                "items": {}
                                                            },
                                                            "is_emission": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "is_gas": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "is_power": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "datetimes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on date times.",
                                                "items": {
                                                    "ensure_tz_aware_datetime": {
                                                        "type": "function",
                                                        "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "obj": "str | datetime.datetime | datetime.date"
                                                        }
                                                    },
                                                    "ensure_utc_datetime": {
                                                        "type": "function",
                                                        "info": "Returns a datetime object with UTC timezone.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "obj": "str | datetime.datetime | datetime.date"
                                                        }
                                                    },
                                                    "is_extended_weekend_day": {
                                                        "type": "function",
                                                        "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                        "returns": "bool",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "next_extended_weekend_day": {
                                                        "type": "function",
                                                        "info": "Return the next extended weekend day after the given date.",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "next_non_extended_weekend_day": {
                                                        "type": "function",
                                                        "info": "Return the next non extended weekend day after the given date.",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "to_timedelta": {
                                                        "type": "function",
                                                        "info": "Transform a frequency string into a timedelta object.",
                                                        "returns": "datetime.timedelta",
                                                        "parameters": {
                                                            "freq": "str"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "deliveries": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "calendar": {
                                                        "type": "module",
                                                        "info": "Logic for validating calendar delivery periods.",
                                                        "items": {
                                                            "CALENDAR_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "DATE_SUFFIX": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "MONTH_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "QUARTER_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "REGEX_BOM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOW": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOWEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DASH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_HOL": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_OFFSET": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_SEASON": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEK": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YYYY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "ROLLING_OFFSET_DAYS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "SEASON_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "bom_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bow_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bowext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "calendar_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "da_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "quarter_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "rolling_ldd": {
                                                                "type": "function",
                                                                "info": "Dummy function to use with rolling period to avoid None side effects.",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "season_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "we_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "week_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "weext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "intraday": {
                                                        "type": "module",
                                                        "info": "Logic for validating intraday delivery periods.",
                                                        "items": {
                                                            "REGEX_2H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_4H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BASE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BDAY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_HH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_NONE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_OFF": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_PEAK": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_QH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_H": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_HH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_QH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "strings": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on strings.",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "total_ordering": {
                                                        "type": "function",
                                                        "info": "Class decorator that fills in missing ordering methods",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "index": {
                                                "type": "module",
                                                "info": "Logic for validating index instruments.",
                                                "items": {
                                                    "BaseIndexValidator": {
                                                        "type": "class",
                                                        "info": "Base IndexValidator.",
                                                        "returns": "noos.analytics._domain.products.instruments.index.BaseIndexValidator",
                                                        "items": {
                                                            "asset": {
                                                                "type": "attribute",
                                                                "info": "Generic financial / physical asset.",
                                                                "returns": "noos.analytics._domain.products.assets.Asset"
                                                            },
                                                            "calendar_delivery": {
                                                                "type": "attribute",
                                                                "info": "Instruments are sold for delivery over a defined calendar period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.CalendarDelivery"
                                                            },
                                                            "intraday_delivery": {
                                                                "type": "attribute",
                                                                "info": "Instruments can be delivered over a defined intraday period.",
                                                                "returns": "noos.analytics._domain.products.deliveries.IntradayDelivery"
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "asset": "noos.analytics._domain.products.assets.Asset",
                                                                    "calendar_delivery": "noos.analytics._domain.products.deliveries.CalendarDelivery",
                                                                    "intraday_delivery": "noos.analytics._domain.products.deliveries.IntradayDelivery"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "ForwardIndexValidator": {
                                                        "type": "class",
                                                        "info": "Class validating a ForwardIndex from its asset, calendar_delivery and intraday_delivery.",
                                                        "returns": "noos.analytics._domain.products.instruments.index.ForwardIndexValidator",
                                                        "items": {
                                                            "base_deliveries": {
                                                                "type": "property",
                                                                "info": "Base deliveries (all timesteps from start to end) for the index.",
                                                                "returns": "pd.DatetimeIndex"
                                                            },
                                                            "deliveries": {
                                                                "type": "property",
                                                                "info": "Deliveries for the index.",
                                                                "returns": "pd.DatetimeIndex"
                                                            },
                                                            "end_date": {
                                                                "type": "property",
                                                                "info": "Day after the last delivery day.",
                                                                "returns": "datetime.date"
                                                            },
                                                            "start_date": {
                                                                "type": "property",
                                                                "info": "First delivery day.",
                                                                "returns": "datetime.date"
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "asset": "noos.analytics._domain.products.assets.Asset",
                                                                    "calendar_delivery": "noos.analytics._domain.products.deliveries.CalendarDelivery",
                                                                    "intraday_delivery": "noos.analytics._domain.products.deliveries.IntradayDelivery"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "LEFT": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "RollingIndexValidator": {
                                                        "type": "class",
                                                        "info": "Class validating a RollingIndex. No validation needed for now.",
                                                        "returns": "noos.analytics._domain.products.instruments.index.RollingIndexValidator",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "asset": "noos.analytics._domain.products.assets.Asset",
                                                                    "calendar_delivery": "noos.analytics._domain.products.deliveries.CalendarDelivery",
                                                                    "intraday_delivery": "noos.analytics._domain.products.deliveries.IntradayDelivery"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "calendar": {
                                                        "type": "module",
                                                        "info": "Logic for validating calendar delivery periods.",
                                                        "items": {
                                                            "CALENDAR_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "DATE_SUFFIX": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "MONTH_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "QUARTER_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "REGEX_BOM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOW": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOWEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DASH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_HOL": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_OFFSET": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_SEASON": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEK": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YYYY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "ROLLING_OFFSET_DAYS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "SEASON_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "bom_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bow_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bowext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "calendar_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "da_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "quarter_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "rolling_ldd": {
                                                                "type": "function",
                                                                "info": "Dummy function to use with rolling period to avoid None side effects.",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "season_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "we_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "week_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "weext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "deliveries": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "intraday": {
                                                                "type": "module",
                                                                "info": "Logic for validating intraday delivery periods.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "strings": {
                                                "type": "module",
                                                "info": "Utility functions for operating on strings.",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "total_ordering": {
                                                "type": "function",
                                                "info": "Class decorator that fills in missing ordering methods",
                                                "returns": "None",
                                                "parameters": {
                                                    "cls": "None"
                                                }
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "AnyPandas": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "AnyTimezone": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 604 union type",
                                                        "returns": "types.UnionType"
                                                    },
                                                    "MetadataType": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Record": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "Records": {
                                                        "type": "object",
                                                        "info": "Represent a PEP 585 generic type",
                                                        "returns": "types.GenericAlias"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "periods": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "ASSET_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                            },
                                            "Tuple": {
                                                "type": "object",
                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                "returns": "typing._TupleType"
                                            },
                                            "convert_date_and_sp_to_utc": {
                                                "type": "function",
                                                "info": "Return an UTC-aware datetime index from local settlement dates and settlement periods.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "dataframe": "pd.DataFrame",
                                                    "timezone_str": "str",
                                                    "frequency_timedelta": "datetime.timedelta"
                                                }
                                            },
                                            "convert_date_and_sp_to_utc_datetime": {
                                                "type": "function",
                                                "info": "Return an UTC-aware datetime from a local settlement date and settlement period.",
                                                "returns": "datetime.datetime",
                                                "parameters": {
                                                    "local_date": "datetime.date",
                                                    "sp": "int",
                                                    "timezone_str": "str",
                                                    "frequency_timedelta": "datetime.timedelta"
                                                }
                                            },
                                            "convert_date_and_sp_to_utc_for_asset": {
                                                "type": "function",
                                                "info": "Return an UTC-aware datetime index from local settlement dates and settlement periods.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "dataframe": "pd.DataFrame",
                                                    "asset_name": "str"
                                                }
                                            },
                                            "convert_utc_datetime_to_date_and_sp": {
                                                "type": "function",
                                                "info": "Return date and settlement period from an UTC-aware datetime.",
                                                "returns": "typing.Tuple[datetime.date, int]",
                                                "parameters": {
                                                    "utc_datetime": "datetime.datetime",
                                                    "timezone_str": "str",
                                                    "frequency_timedelta": "datetime.timedelta"
                                                }
                                            },
                                            "convert_utc_to_date_and_sp": {
                                                "type": "function",
                                                "info": "Return dates and settlement periods from an UTC-aware datetime index.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "dataframe": "pd.DataFrame",
                                                    "timezone_str": "str",
                                                    "frequency_timedelta": "datetime.timedelta"
                                                }
                                            },
                                            "convert_utc_to_date_and_sp_for_asset": {
                                                "type": "function",
                                                "info": "Return dates and settlement periods from an UTC-aware datetime index for a given asset.",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "dataframe": "pd.DataFrame",
                                                    "asset_name": "str"
                                                }
                                            },
                                            "decorators": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Iterable": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._SpecialGenericAlias"
                                                    },
                                                    "cache_results": {
                                                        "type": "function",
                                                        "info": "Caches the result of the decorated function.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "file_name": "str",
                                                            "cache_folder": "str"
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "force_bool": {
                                                        "type": "function",
                                                        "info": "Enforce the output of a callable to be a boolean.",
                                                        "returns": "noos.analytics._core.decorators.Callable",
                                                        "parameters": {
                                                            "func": "noos.analytics._core.decorators.Callable"
                                                        }
                                                    },
                                                    "validators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "check_1d_array": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "obj": "numpy.ndarray"
                                                                }
                                                            },
                                                            "check_columns": {
                                                                "type": "function",
                                                                "info": "Validate format of a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "check_dataframe_not_empty": {
                                                                "type": "function",
                                                                "info": "Check a dataframe is not empty.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_datetimeindex_is_aware": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series DatetimeIndex is aware.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_datetimeindex": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is a DatetimeIndex.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_has_nil_end_value": {
                                                                "type": "function",
                                                                "info": "Check that a time series is closed by checking that the last value is 0.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_index_unique_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate the pandas dataframe or series index is unique monotonic increasing.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_dataframe": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_is_pandas_series": {
                                                                "type": "function",
                                                                "info": "Check if object is a pandas series.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_timeserie_numeric_monotonic_increasing": {
                                                                "type": "function",
                                                                "info": "Validate that a time series has valid index and non-nan numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_is_tzinfo": {
                                                                "type": "function",
                                                                "info": "Check if object is a zoneinfo.ZoneIfo class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo | datetime.timezone"
                                                                }
                                                            },
                                                            "check_no_nans_in_dataframe": {
                                                                "type": "function",
                                                                "info": "Validate non-NaN values in a pandas dataframe.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame"
                                                                }
                                                            },
                                                            "check_no_nans_in_series": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "check_series_numeric": {
                                                                "type": "function",
                                                                "info": "Check if a pandas Series contains only numeric values.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "ts": "pd.Series"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validate_dataframe": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.DataFrame",
                                                                "parameters": {
                                                                    "df": "pd.DataFrame",
                                                                    "dataframe_not_empty": "bool",
                                                                    "expected_columns": "set"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "wraps": {
                                                        "type": "function",
                                                        "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "wrapped": "None",
                                                            "assigned": "None",
                                                            "updated": "None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "validators": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "asset": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "Family": {
                                                        "type": "class",
                                                        "info": "Enum representing the family type of an asset needing validation.",
                                                        "returns": "noos.analytics._domain.products.validators.asset.Family",
                                                        "items": {
                                                            "ER": {
                                                                "type": "object",
                                                                "info": "Enum representing the family type of an asset needing validation.",
                                                                "returns": "noos.analytics._domain.products.validators.asset.Family"
                                                            },
                                                            "NG": {
                                                                "type": "object",
                                                                "info": "Enum representing the family type of an asset needing validation.",
                                                                "returns": "noos.analytics._domain.products.validators.asset.Family"
                                                            },
                                                            "PW": {
                                                                "type": "object",
                                                                "info": "Enum representing the family type of an asset needing validation.",
                                                                "returns": "noos.analytics._domain.products.validators.asset.Family"
                                                            },
                                                            "__getitem__": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "args": "None",
                                                                    "kwds": "None"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "enums": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "is_emission": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "is_gas": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "is_power": {
                                                        "type": "object",
                                                        "info": "Create a bound instance method object.",
                                                        "returns": "method"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "calendar": {
                                                "type": "module",
                                                "info": "Logic for validating calendar delivery periods.",
                                                "items": {
                                                    "CALENDAR_FDM": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "DATE_SUFFIX": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "MONTH_FDM": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "QUARTER_FDM": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "REGEX_BOM": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_BOW": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_BOWEXT": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_CALENDAR": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_D": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_DA": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_DASH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_DD": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_HOL": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_MM": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_MONTH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_QUARTER": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_CALENDAR": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_D": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_DA": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_MONTH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_OFFSET": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_QUARTER": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_SEASON": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_USCORE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_WD": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_WE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_WEEK": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_WEEXT": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_YY": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_YYYY": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "ROLLING_OFFSET_DAYS": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "SEASON_FDM": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "bom_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "bow_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "bowext_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "calendar_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "da_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "quarter_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "rolling_ldd": {
                                                        "type": "function",
                                                        "info": "Dummy function to use with rolling period to avoid None side effects.",
                                                        "returns": "datetime.date",
                                                        "parameters": {}
                                                    },
                                                    "season_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "we_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "week_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date"
                                                        }
                                                    },
                                                    "weext_ldd": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "start_date": "datetime.date",
                                                            "used_holidays": "holidays.holiday_base.HolidayBase"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "index": {
                                                "type": "module",
                                                "info": "Logic for validating index instruments.",
                                                "items": {
                                                    "LEFT": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "calendar": {
                                                        "type": "module",
                                                        "info": "Logic for validating calendar delivery periods.",
                                                        "items": {
                                                            "CALENDAR_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "DATE_SUFFIX": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "MONTH_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "QUARTER_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "REGEX_BOM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOW": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_BOWEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DASH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_DD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_HOL": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MM": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_CALENDAR": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_D": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_DA": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_MONTH": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_OFFSET": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_ROLLING_QUARTER": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_SEASON": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WD": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEK": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_WEEXT": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "REGEX_YYYY": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "ROLLING_OFFSET_DAYS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "SEASON_FDM": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "bom_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bow_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "bowext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "calendar_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "da_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "quarter_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "rolling_ldd": {
                                                                "type": "function",
                                                                "info": "Dummy function to use with rolling period to avoid None side effects.",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "season_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "we_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "week_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date"
                                                                }
                                                            },
                                                            "weext_ldd": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "start_date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "datetimes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on date times.",
                                                        "items": {
                                                            "ensure_tz_aware_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with timezone (assumes UTC by default).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "ensure_utc_datetime": {
                                                                "type": "function",
                                                                "info": "Returns a datetime object with UTC timezone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "obj": "str | datetime.datetime | datetime.date"
                                                                }
                                                            },
                                                            "is_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Determine if given date is an extended (including touching bank holidays) week end day.",
                                                                "returns": "bool",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "next_non_extended_weekend_day": {
                                                                "type": "function",
                                                                "info": "Return the next non extended weekend day after the given date.",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "used_holidays": "holidays.holiday_base.HolidayBase"
                                                                }
                                                            },
                                                            "to_timedelta": {
                                                                "type": "function",
                                                                "info": "Transform a frequency string into a timedelta object.",
                                                                "returns": "datetime.timedelta",
                                                                "parameters": {
                                                                    "freq": "str"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "deliveries": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "calendar": {
                                                                "type": "module",
                                                                "info": "Logic for validating calendar delivery periods.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "intraday": {
                                                                "type": "module",
                                                                "info": "Logic for validating intraday delivery periods.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "intraday": {
                                                "type": "module",
                                                "info": "Logic for validating intraday delivery periods.",
                                                "items": {
                                                    "REGEX_2H": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_4H": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_BASE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_BDAY": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_H": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_HH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_NONE": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_OFF": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_PEAK": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_QH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_H": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_HH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "REGEX_ROLLING_QH": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "is_emission": {
                                                "type": "object",
                                                "info": "Create a bound instance method object.",
                                                "returns": "method"
                                            },
                                            "is_gas": {
                                                "type": "object",
                                                "info": "Create a bound instance method object.",
                                                "returns": "method"
                                            },
                                            "is_power": {
                                                "type": "object",
                                                "info": "Create a bound instance method object.",
                                                "returns": "method"
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "registries": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "ASSET_REGISTRY": {
                                        "type": "object",
                                        "info": "Generic registry collection.",
                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                    },
                                    "MARKET_DATA_CONNECTOR_REGISTRY": {
                                        "type": "object",
                                        "info": "Generic registry collection.",
                                        "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                    },
                                    "NGPEG": {
                                        "type": "object",
                                        "info": "Generic financial / physical asset.",
                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                    },
                                    "PWREE": {
                                        "type": "object",
                                        "info": "Generic financial / physical asset.",
                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                    },
                                    "PWREE_H": {
                                        "type": "object",
                                        "info": "Generic financial / physical asset.",
                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                    },
                                    "PWRTE": {
                                        "type": "object",
                                        "info": "Generic financial / physical asset.",
                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                    },
                                    "PWRTE_H": {
                                        "type": "object",
                                        "info": "Generic financial / physical asset.",
                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                    },
                                    "PWRTE_PEB": {
                                        "type": "object",
                                        "info": "Generic financial / physical asset.",
                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                    },
                                    "UKPX": {
                                        "type": "object",
                                        "info": "Generic financial / physical asset.",
                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                    },
                                    "assets": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "asset_registry": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "AssetRegistry": {
                                                        "type": "class",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry",
                                                        "items": {
                                                            "__getitem__": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "V",
                                                                "parameters": {
                                                                    "key": "K"
                                                                }
                                                            },
                                                            "asset_names": {
                                                                "type": "property",
                                                                "info": "",
                                                                "returns": "list[str]"
                                                            },
                                                            "from_config": {
                                                                "type": "object",
                                                                "info": "Create a bound instance method object.",
                                                                "returns": "method"
                                                            },
                                                            "__init__": {
                                                                "type": "function",
                                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                                "returns": "None",
                                                                "parameters": {}
                                                            }
                                                        }
                                                    },
                                                    "NGPEG": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "PWREE": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "PWREE_H": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "PWRTE": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "PWRTE_H": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "PWRTE_PEB": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "UKPX": {
                                                        "type": "object",
                                                        "info": "Generic financial / physical asset.",
                                                        "returns": "noos.analytics._domain.products.assets.Asset"
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "Custom Python collections, implementing the 'magic' dunder methods.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "K": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "V": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "config": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Config": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Option": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Section": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "base": {
                                        "type": "module",
                                        "info": "Custom Python collections, implementing the 'magic' dunder methods.",
                                        "items": {
                                            "ClassVar": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "typing._SpecialForm"
                                            },
                                            "K": {
                                                "type": "object",
                                                "info": "Type variable.",
                                                "returns": "noos.analytics._core.collections.TypeVar"
                                            },
                                            "MutableRegistry": {
                                                "type": "class",
                                                "info": "Generic mutable registry collection.",
                                                "returns": "noos.analytics._domain.registries.base.MutableRegistry",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "V",
                                                        "parameters": {
                                                            "key": "K"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    }
                                                }
                                            },
                                            "Registry": {
                                                "type": "class",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.base.Registry",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "V",
                                                        "parameters": {
                                                            "key": "K"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    }
                                                }
                                            },
                                            "V": {
                                                "type": "object",
                                                "info": "Type variable.",
                                                "returns": "noos.analytics._core.collections.TypeVar"
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "config": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "Config": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "ConfigParser": {
                                                "type": "class",
                                                "info": "",
                                                "returns": "noos.analytics._domain.registries.config.ConfigParser",
                                                "items": {
                                                    "get_section": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "dict[str, dict[str, str]]",
                                                        "parameters": {
                                                            "section": "str"
                                                        }
                                                    },
                                                    "has_section": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "bool",
                                                        "parameters": {
                                                            "section": "str"
                                                        }
                                                    },
                                                    "read": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "config_path": "pathlib.Path"
                                                        }
                                                    }
                                                }
                                            },
                                            "Iterator": {
                                                "type": "class",
                                                "info": "",
                                                "returns": "noos.analytics._domain.registries.config.Iterator",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "Option": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "Section": {
                                                "type": "object",
                                                "info": "Represent a PEP 585 generic type",
                                                "returns": "types.GenericAlias"
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "exceptions": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "IndexError": {
                                                "type": "class",
                                                "info": "Basic exception raised while validating a parameter.",
                                                "returns": "noos.analytics._domain.registries.exceptions.IndexError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "RegistryError": {
                                                "type": "class",
                                                "info": "Generic exception raised within the `domain.registry` layer.",
                                                "returns": "noos.analytics._domain.registries.exceptions.RegistryError",
                                                "items": {
                                                    "add_note": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "args": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "getset_descriptor"
                                                    },
                                                    "with_traceback": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method_descriptor"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "wrapper_descriptor"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "market_data": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                            },
                                            "Mapping": {
                                                "type": "object",
                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                "returns": "typing._SpecialGenericAlias"
                                            },
                                            "MarketDataConnectorRegistry": {
                                                "type": "class",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry",
                                                "items": {
                                                    "__getitem__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "V",
                                                        "parameters": {
                                                            "key": "K"
                                                        }
                                                    },
                                                    "add_connectors": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "fixings_connector": "noos.analytics._domain.registries.market_data.MarketDataFixingsConnector",
                                                            "historicals_connector": "noos.analytics._domain.registries.market_data.MarketDataHistoricalsConnector",
                                                            "timeseries_connectors": "typing.Mapping[str, noos_analytics._domain.registries.market_data.MarketDataTimeseriesConnector]"
                                                        }
                                                    },
                                                    "description": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "key": "str"
                                                        }
                                                    },
                                                    "get_fixings": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "asset": "str",
                                                            "min_delivery_period": "datetime.timedelta | None",
                                                            "published_at": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "get_historicals": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "curve_uid": "str"
                                                        }
                                                    },
                                                    "get_ts": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "key": "str",
                                                            "published_at": "datetime.datetime | None",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                        "returns": "None",
                                                        "parameters": {}
                                                    }
                                                }
                                            },
                                            "MarketDataFixingsConnector": {
                                                "type": "class",
                                                "info": "Base class for protocol classes.",
                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataFixingsConnector",
                                                "items": {
                                                    "get_df": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.DataFrame",
                                                        "parameters": {
                                                            "asset": "str",
                                                            "min_delivery_period": "datetime.timedelta | None",
                                                            "published_at": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "args": "None",
                                                            "kwargs": "None"
                                                        }
                                                    }
                                                }
                                            },
                                            "MarketDataHistoricalsConnector": {
                                                "type": "class",
                                                "info": "Base class for protocol classes.",
                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataHistoricalsConnector",
                                                "items": {
                                                    "get_ts": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "curve_uid": "str"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "args": "None",
                                                            "kwargs": "None"
                                                        }
                                                    }
                                                }
                                            },
                                            "MarketDataTimeseriesConnector": {
                                                "type": "class",
                                                "info": "Base class for protocol classes.",
                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataTimeseriesConnector",
                                                "items": {
                                                    "description": {
                                                        "type": "attribute",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "get_ts": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "published_at": "datetime.datetime | None",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "args": "None",
                                                            "kwargs": "None"
                                                        }
                                                    }
                                                }
                                            },
                                            "base": {
                                                "type": "module",
                                                "info": "Custom Python collections, implementing the 'magic' dunder methods.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "K": {
                                                        "type": "object",
                                                        "info": "Type variable.",
                                                        "returns": "noos.analytics._core.collections.TypeVar"
                                                    },
                                                    "V": {
                                                        "type": "object",
                                                        "info": "Type variable.",
                                                        "returns": "noos.analytics._core.collections.TypeVar"
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "exceptions": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "method-wrapper"
                            }
                        }
                    },
                    "battery": {
                        "type": "module",
                        "info": "",
                        "items": {
                            "Battery": {
                                "type": "class",
                                "info": "Battery parameters for battery evaluation and optimisation.",
                                "returns": "noos.analytics.battery.Battery",
                                "items": {
                                    "dod": {
                                        "type": "attribute",
                                        "info": "Convert a string or number to a floating-point number, if possible.",
                                        "returns": "float"
                                    },
                                    "capacity": {
                                        "type": "attribute",
                                        "info": "Convert a string or number to a floating-point number, if possible.",
                                        "returns": "float"
                                    },
                                    "pmax_charge": {
                                        "type": "attribute",
                                        "info": "Convert a string or number to a floating-point number, if possible.",
                                        "returns": "float"
                                    },
                                    "pmax_discharge": {
                                        "type": "attribute",
                                        "info": "Convert a string or number to a floating-point number, if possible.",
                                        "returns": "float"
                                    },
                                    "initial_level": {
                                        "type": "object",
                                        "info": "int([x]) -> integer",
                                        "returns": "int"
                                    },
                                    "loss_rate": {
                                        "type": "object",
                                        "info": "int([x]) -> integer",
                                        "returns": "int"
                                    },
                                    "max_daily_cycles": {
                                        "type": "object",
                                        "info": "int([x]) -> integer",
                                        "returns": "int"
                                    },
                                    "max_daily_throughput": {
                                        "type": "property",
                                        "info": "",
                                        "returns": "float"
                                    },
                                    "min_level": {
                                        "type": "property",
                                        "info": "",
                                        "returns": "float"
                                    },
                                    "__init__": {
                                        "type": "function",
                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                        "returns": "None",
                                        "parameters": {
                                            "dod": "float",
                                            "capacity": "float",
                                            "pmax_charge": "float",
                                            "pmax_discharge": "float",
                                            "initial_level": "float",
                                            "loss_rate": "float",
                                            "max_daily_cycles": "int"
                                        }
                                    }
                                }
                            },
                            "BatteryContract": {
                                "type": "class",
                                "info": "Class that is evaluating the revenue of a battery.",
                                "returns": "noos.analytics.battery.BatteryContract",
                                "items": {
                                    "price": {
                                        "type": "function",
                                        "info": "Generic price method to be implemented by subclasses.",
                                        "returns": "noos.analytics.LoadPricingResult",
                                        "parameters": {
                                            "market_data": "noos.analytics.MarketData"
                                        }
                                    },
                                    "__init__": {
                                        "type": "function",
                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                        "returns": "None",
                                        "parameters": {
                                            "net_load": "noos.analytics.PwrteLoadCurve",
                                            "battery": "noos.analytics.battery.Battery",
                                            "turpe": "pd.Series",
                                            "ticfe": "float"
                                        }
                                    }
                                }
                            },
                            "contract": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "base": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "info": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "class_repr": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "class_instance": "noos.analytics._core.collections.Any",
                                                            "repr_attributes": "tuple[str, ...]",
                                                            "omit_class_name": "bool"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "market_data": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbols": {
                                                        "type": "module",
                                                        "info": "Mnemonic for naming instruments.",
                                                        "items": {
                                                            "ASSET": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "ASSET_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CALENDAR_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CALENDAR_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CONTRACT": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CONTRACT_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "INTRADAY_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "INTRADAY_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "contracts": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbol_from_dict": {
                                                                "type": "function",
                                                                "info": "Construct a symbol from a dictionary.",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "record": "dict[str, typing.Any]"
                                                                }
                                                            },
                                                            "symbol_to_dict": {
                                                                "type": "function",
                                                                "info": "Construct a dictionary from a symbol.",
                                                                "returns": "dict[str, typing.Any]",
                                                                "parameters": {
                                                                    "symbol": "str"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "pricing": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "load": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "market_data": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbols": {
                                                                "type": "module",
                                                                "info": "Mnemonic for naming instruments.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "info": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "class_repr": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "pd.CategoricalIndex.str",
                                                "parameters": {
                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                    "repr_attributes": "tuple[str, ...]",
                                                    "omit_class_name": "bool"
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "load": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "LOAD_CURVE_CLASSES": {
                                                "type": "object",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "dict"
                                            },
                                            "base": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "T": {
                                                        "type": "object",
                                                        "info": "Type variable.",
                                                        "returns": "noos.analytics._core.collections.TypeVar"
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "DEFAULT_OPTIONS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "constants": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LONDON": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "PARIS": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "conversions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "convert_load_to_volume": {
                                                                "type": "function",
                                                                "info": "Convert load to volume. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "convert_volume_to_load": {
                                                                "type": "function",
                                                                "info": "Convert volume to load. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "infer_nil_end": {
                                                                "type": "function",
                                                                "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "timestep": "datetime.timedelta"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "params": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validator_exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "mixins": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "dataclass": {
                                                        "type": "function",
                                                        "info": "Add dunder methods based on the fields defined in the class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None",
                                                            "init": "None",
                                                            "repr": "None",
                                                            "eq": "None",
                                                            "order": "None",
                                                            "unsafe_hash": "None",
                                                            "frozen": "None",
                                                            "match_args": "None",
                                                            "kw_only": "None",
                                                            "slots": "None",
                                                            "weakref_slot": "None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "market_data": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "ASSET_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                            },
                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                            },
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "info": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "class_repr": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "class_instance": "noos.analytics._core.collections.Any",
                                                            "repr_attributes": "tuple[str, ...]",
                                                            "omit_class_name": "bool"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "localtime": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "UTC": {
                                                        "type": "object",
                                                        "info": "Abstract base class for time zone info objects.",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "date_astimezone": {
                                                        "type": "function",
                                                        "info": "Convert a date to a datetime in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "normalize": {
                                                        "type": "function",
                                                        "info": "Normalize a date to a midnight time in UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "now": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {}
                                                    },
                                                    "prev_weekday": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "prev_weekday_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "to_timezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to another time zone.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime",
                                                            "timezone_str": "str"
                                                        }
                                                    },
                                                    "to_utctimezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime"
                                                        }
                                                    },
                                                    "today": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {}
                                                    },
                                                    "today_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "symbols": {
                                                "type": "module",
                                                "info": "Mnemonic for naming instruments.",
                                                "items": {
                                                    "ASSET": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "ASSET_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "CALENDAR_PERIOD": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "CALENDAR_PERIOD_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "CONTRACT": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "CONTRACT_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "INTRADAY_PERIOD": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "INTRADAY_PERIOD_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "contracts": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "battery": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "brp": {
                                                                "type": "module",
                                                                "info": "Module describing Balancing Responsible Party contracts (spot, imbalance, ispp, ispn).",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "forward": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "price_load_with_series": {
                                                                "type": "function",
                                                                "info": "Compute the monetary value of the load time series given a price time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "load": "noos.analytics.LoadCurveBase",
                                                                    "price_ts": "pd.Series",
                                                                    "risk_premium": "float",
                                                                    "risk_premium_pct": "float"
                                                                }
                                                            },
                                                            "pricing": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "instruments": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "deliveries": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "index": {
                                                                "type": "module",
                                                                "info": "Logic for validating index instruments.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbol_from_dict": {
                                                        "type": "function",
                                                        "info": "Construct a symbol from a dictionary.",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "record": "dict[str, typing.Any]"
                                                        }
                                                    },
                                                    "symbol_to_dict": {
                                                        "type": "function",
                                                        "info": "Construct a dictionary from a symbol.",
                                                        "returns": "dict[str, typing.Any]",
                                                        "parameters": {
                                                            "symbol": "str"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "optimiser": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "dataclass": {
                                                "type": "function",
                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                "returns": "None",
                                                "parameters": {
                                                    "cls": "None",
                                                    "init": "None",
                                                    "repr": "None",
                                                    "eq": "None",
                                                    "order": "None",
                                                    "unsafe_hash": "None",
                                                    "frozen": "None",
                                                    "match_args": "None",
                                                    "kw_only": "None",
                                                    "slots": "None",
                                                    "weakref_slot": "None"
                                                }
                                            },
                                            "load": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "logger": {
                                                "type": "object",
                                                "info": "Instances of the Logger class represent a single logging channel. A",
                                                "returns": "logging.Logger"
                                            },
                                            "types": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "dataclass": {
                                                        "type": "function",
                                                        "info": "Add dunder methods based on the fields defined in the class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None",
                                                            "init": "None",
                                                            "repr": "None",
                                                            "eq": "None",
                                                            "order": "None",
                                                            "unsafe_hash": "None",
                                                            "frozen": "None",
                                                            "match_args": "None",
                                                            "kw_only": "None",
                                                            "slots": "None",
                                                            "weakref_slot": "None"
                                                        }
                                                    },
                                                    "market_data": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbols": {
                                                                "type": "module",
                                                                "info": "Mnemonic for naming instruments.",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "pricing": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "info": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "class_repr": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "class_instance": "noos.analytics._core.collections.Any",
                                                            "repr_attributes": "tuple[str, ...]",
                                                            "omit_class_name": "bool"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "load": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "LOAD_CURVE_CLASSES": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "mixins": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "market_data": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbols": {
                                                        "type": "module",
                                                        "info": "Mnemonic for naming instruments.",
                                                        "items": {
                                                            "ASSET": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "ASSET_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CALENDAR_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CALENDAR_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CONTRACT": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CONTRACT_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "INTRADAY_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "INTRADAY_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "contracts": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbol_from_dict": {
                                                                "type": "function",
                                                                "info": "Construct a symbol from a dictionary.",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "record": "dict[str, typing.Any]"
                                                                }
                                                            },
                                                            "symbol_to_dict": {
                                                                "type": "function",
                                                                "info": "Construct a dictionary from a symbol.",
                                                                "returns": "dict[str, typing.Any]",
                                                                "parameters": {
                                                                    "symbol": "str"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "types": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "dataclass": {
                                                "type": "function",
                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                "returns": "None",
                                                "parameters": {
                                                    "cls": "None",
                                                    "init": "None",
                                                    "repr": "None",
                                                    "eq": "None",
                                                    "order": "None",
                                                    "unsafe_hash": "None",
                                                    "frozen": "None",
                                                    "match_args": "None",
                                                    "kw_only": "None",
                                                    "slots": "None",
                                                    "weakref_slot": "None"
                                                }
                                            },
                                            "market_data": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbols": {
                                                        "type": "module",
                                                        "info": "Mnemonic for naming instruments.",
                                                        "items": {
                                                            "ASSET": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "ASSET_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CALENDAR_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CALENDAR_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CONTRACT": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CONTRACT_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "INTRADAY_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "INTRADAY_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "contracts": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbol_from_dict": {
                                                                "type": "function",
                                                                "info": "Construct a symbol from a dictionary.",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "record": "dict[str, typing.Any]"
                                                                }
                                                            },
                                                            "symbol_to_dict": {
                                                                "type": "function",
                                                                "info": "Construct a dictionary from a symbol.",
                                                                "returns": "dict[str, typing.Any]",
                                                                "parameters": {
                                                                    "symbol": "str"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "optimiser": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "BatteryPulpOptimiser": {
                                        "type": "class",
                                        "info": "BatteryPulpOptimiser(battery: noos_analytics._domain.contracts.battery.types.Battery, prices: noo...",
                                        "returns": "noos.analytics.battery.optimiser.BatteryPulpOptimiser",
                                        "items": {
                                            "battery": {
                                                "type": "attribute",
                                                "info": "Battery parameters for battery evaluation and optimisation.",
                                                "returns": "noos.analytics.battery.Battery"
                                            },
                                            "prices": {
                                                "type": "attribute",
                                                "info": "",
                                                "returns": "noos.analytics.battery.types.BatteryPrices"
                                            },
                                            "optimize_battery_usage": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "pd.DataFrame",
                                                "parameters": {
                                                    "net_load": "noos.analytics.PwrteLoadCurve"
                                                }
                                            },
                                            "optimize_day": {
                                                "type": "function",
                                                "info": "",
                                                "returns": "pd.Series",
                                                "parameters": {
                                                    "df_daily": "pd.DataFrame"
                                                }
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {
                                                    "battery": "noos.analytics.battery.Battery",
                                                    "prices": "noos.analytics.battery.types.BatteryPrices",
                                                    "_last_level": "float"
                                                }
                                            }
                                        }
                                    },
                                    "dataclass": {
                                        "type": "function",
                                        "info": "Add dunder methods based on the fields defined in the class.",
                                        "returns": "None",
                                        "parameters": {
                                            "cls": "None",
                                            "init": "None",
                                            "repr": "None",
                                            "eq": "None",
                                            "order": "None",
                                            "unsafe_hash": "None",
                                            "frozen": "None",
                                            "match_args": "None",
                                            "kw_only": "None",
                                            "slots": "None",
                                            "weakref_slot": "None"
                                        }
                                    },
                                    "load": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "LOAD_CURVE_CLASSES": {
                                                "type": "object",
                                                "info": "dict() -> new empty dictionary",
                                                "returns": "dict"
                                            },
                                            "base": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "LOAD_CURVE_CLASSES": {
                                                        "type": "object",
                                                        "info": "dict() -> new empty dictionary",
                                                        "returns": "dict"
                                                    },
                                                    "T": {
                                                        "type": "object",
                                                        "info": "Type variable.",
                                                        "returns": "noos.analytics._core.collections.TypeVar"
                                                    },
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "base": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "DEFAULT_OPTIONS": {
                                                                "type": "object",
                                                                "info": "dict() -> new empty dictionary",
                                                                "returns": "dict"
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "params": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "constants": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "LONDON": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "PARIS": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "conversions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "convert_load_to_volume": {
                                                                "type": "function",
                                                                "info": "Convert load to volume. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "convert_volume_to_load": {
                                                                "type": "function",
                                                                "info": "Convert volume to load. Default 1 hour normalization.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "normalization": "noos.analytics._core.conversions.Normalization"
                                                                }
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "infer_nil_end": {
                                                                "type": "function",
                                                                "info": "Close a time series by adding a 0 value at the end of the last interval.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "ts": "pd.Series",
                                                                    "timestep": "datetime.timedelta"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "mixins": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "dataclass": {
                                                                "type": "function",
                                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None",
                                                                    "init": "None",
                                                                    "repr": "None",
                                                                    "eq": "None",
                                                                    "order": "None",
                                                                    "unsafe_hash": "None",
                                                                    "frozen": "None",
                                                                    "match_args": "None",
                                                                    "kw_only": "None",
                                                                    "slots": "None",
                                                                    "weakref_slot": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "params": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "T": {
                                                                "type": "object",
                                                                "info": "Type variable.",
                                                                "returns": "noos.analytics._core.collections.TypeVar"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "collections": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "constants": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validator_exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "mixins": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "assets": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "TypedDict": {
                                                                "type": "function",
                                                                "info": "A simple typed namespace. At runtime it is equivalent to a plain dict.",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "typename": "None",
                                                                    "fields": "None",
                                                                    "total": "None",
                                                                    "kwargs": "None"
                                                                }
                                                            },
                                                            "conversions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "holidays": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "dataclass": {
                                                        "type": "function",
                                                        "info": "Add dunder methods based on the fields defined in the class.",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "cls": "None",
                                                            "init": "None",
                                                            "repr": "None",
                                                            "eq": "None",
                                                            "order": "None",
                                                            "unsafe_hash": "None",
                                                            "frozen": "None",
                                                            "match_args": "None",
                                                            "kw_only": "None",
                                                            "slots": "None",
                                                            "weakref_slot": "None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "logger": {
                                        "type": "object",
                                        "info": "Instances of the Logger class represent a single logging channel. A",
                                        "returns": "logging.Logger"
                                    },
                                    "types": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "dataclass": {
                                                "type": "function",
                                                "info": "Add dunder methods based on the fields defined in the class.",
                                                "returns": "None",
                                                "parameters": {
                                                    "cls": "None",
                                                    "init": "None",
                                                    "repr": "None",
                                                    "eq": "None",
                                                    "order": "None",
                                                    "unsafe_hash": "None",
                                                    "frozen": "None",
                                                    "match_args": "None",
                                                    "kw_only": "None",
                                                    "slots": "None",
                                                    "weakref_slot": "None"
                                                }
                                            },
                                            "market_data": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "ASSET_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                    },
                                                    "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                        "type": "object",
                                                        "info": "Generic registry collection.",
                                                        "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "info": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "class_repr": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "class_instance": "noos.analytics._core.collections.Any",
                                                                    "repr_attributes": "tuple[str, ...]",
                                                                    "omit_class_name": "bool"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbols": {
                                                        "type": "module",
                                                        "info": "Mnemonic for naming instruments.",
                                                        "items": {
                                                            "ASSET": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "ASSET_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CALENDAR_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CALENDAR_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "CONTRACT": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "CONTRACT_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "INTRADAY_PERIOD": {
                                                                "type": "object",
                                                                "info": "Built-in mutable sequence.",
                                                                "returns": "pd.Series.list"
                                                            },
                                                            "INTRADAY_PERIOD_LIST": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "contracts": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "instruments": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "symbol_from_dict": {
                                                                "type": "function",
                                                                "info": "Construct a symbol from a dictionary.",
                                                                "returns": "pd.CategoricalIndex.str",
                                                                "parameters": {
                                                                    "record": "dict[str, typing.Any]"
                                                                }
                                                            },
                                                            "symbol_to_dict": {
                                                                "type": "function",
                                                                "info": "Construct a dictionary from a symbol.",
                                                                "returns": "dict[str, typing.Any]",
                                                                "parameters": {
                                                                    "symbol": "str"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "types": {
                                "type": "module",
                                "info": "",
                                "items": {
                                    "BatteryPrices": {
                                        "type": "class",
                                        "info": "",
                                        "returns": "noos.analytics.battery.types.BatteryPrices",
                                        "items": {
                                            "df": {
                                                "type": "property",
                                                "info": "",
                                                "returns": "pd.Series"
                                            },
                                            "__init__": {
                                                "type": "function",
                                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                                "returns": "None",
                                                "parameters": {
                                                    "mtm": "noos.analytics.MarketData",
                                                    "turpe": "pd.Series",
                                                    "ticfe": "float"
                                                }
                                            }
                                        }
                                    },
                                    "dataclass": {
                                        "type": "function",
                                        "info": "Add dunder methods based on the fields defined in the class.",
                                        "returns": "None",
                                        "parameters": {
                                            "cls": "None",
                                            "init": "None",
                                            "repr": "None",
                                            "eq": "None",
                                            "order": "None",
                                            "unsafe_hash": "None",
                                            "frozen": "None",
                                            "match_args": "None",
                                            "kw_only": "None",
                                            "slots": "None",
                                            "weakref_slot": "None"
                                        }
                                    },
                                    "market_data": {
                                        "type": "module",
                                        "info": "",
                                        "items": {
                                            "ASSET_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                            },
                                            "MARKET_DATA_CONNECTOR_REGISTRY": {
                                                "type": "object",
                                                "info": "Generic registry collection.",
                                                "returns": "noos.analytics._domain.registries.market_data.MarketDataConnectorRegistry"
                                            },
                                            "dataframes": {
                                                "type": "module",
                                                "info": "Utility functions for operating on Pandas data frames.",
                                                "items": {
                                                    "ClassVar": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "typing._SpecialForm"
                                                    },
                                                    "IntervalClosedType": {
                                                        "type": "object",
                                                        "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                        "returns": "typing._UnionGenericAlias"
                                                    },
                                                    "check_index_difference_empty": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "None",
                                                        "parameters": {
                                                            "df": "pd.Series|pd.DataFrame",
                                                            "larger_df": "pd.Series|pd.DataFrame",
                                                            "df_name": "str",
                                                            "larger_df_name": "str"
                                                        }
                                                    },
                                                    "create_time_index": {
                                                        "type": "function",
                                                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                        "returns": "pd.DatetimeIndex",
                                                        "parameters": {
                                                            "start_at": "datetime.datetime",
                                                            "end_at": "datetime.datetime",
                                                            "frequency": "str",
                                                            "timezone_str": "str",
                                                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                        }
                                                    },
                                                    "dataframes": {
                                                        "type": "module",
                                                        "info": "Utility functions for operating on Pandas data frames.",
                                                        "items": {
                                                            "ClassVar": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "typing._SpecialForm"
                                                            },
                                                            "IntervalClosedType": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._UnionGenericAlias"
                                                            },
                                                            "check_index_difference_empty": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "df": "pd.Series|pd.DataFrame",
                                                                    "larger_df": "pd.Series|pd.DataFrame",
                                                                    "df_name": "str",
                                                                    "larger_df_name": "str"
                                                                }
                                                            },
                                                            "create_time_index": {
                                                                "type": "function",
                                                                "info": "Create a pandas UTC-aware date time index for a given frequency.",
                                                                "returns": "pd.DatetimeIndex",
                                                                "parameters": {
                                                                    "start_at": "datetime.datetime",
                                                                    "end_at": "datetime.datetime",
                                                                    "frequency": "str",
                                                                    "timezone_str": "str",
                                                                    "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                                                                }
                                                            },
                                                            "dataframes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on Pandas data frames.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "get_intersection": {
                                                                "type": "function",
                                                                "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                                }
                                                            },
                                                            "localtime": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "month_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced for a month.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "df_or_ts": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "time_slice": {
                                                                "type": "function",
                                                                "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                                "returns": "pd.Series|pd.DataFrame",
                                                                "parameters": {
                                                                    "ts_or_df": "pd.Series|pd.DataFrame",
                                                                    "start_at": "datetime.datetime | None",
                                                                    "end_at": "datetime.datetime | None",
                                                                    "is_closed_right": "bool"
                                                                }
                                                            },
                                                            "to_continuous_time_index": {
                                                                "type": "function",
                                                                "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                                "returns": "pd.Index",
                                                                "parameters": {
                                                                    "time_index": "pd.DatetimeIndex",
                                                                    "base_time": "datetime.datetime | None",
                                                                    "reference_period": "datetime.timedelta"
                                                                }
                                                            },
                                                            "to_continuous_time_series": {
                                                                "type": "function",
                                                                "info": "Convert a pandas time series to a continuous time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "time_series": "pd.Series",
                                                                    "base_time": "datetime.datetime | None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "decorators": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "Iterable": {
                                                                "type": "object",
                                                                "info": "Mixin to prevent iteration, without being compatible with Iterable.",
                                                                "returns": "typing._SpecialGenericAlias"
                                                            },
                                                            "cache_results": {
                                                                "type": "function",
                                                                "info": "Caches the result of the decorated function.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "file_name": "str",
                                                                    "cache_folder": "str"
                                                                }
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "force_bool": {
                                                                "type": "function",
                                                                "info": "Enforce the output of a callable to be a boolean.",
                                                                "returns": "noos.analytics._core.decorators.Callable",
                                                                "parameters": {
                                                                    "func": "noos.analytics._core.decorators.Callable"
                                                                }
                                                            },
                                                            "validators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "wraps": {
                                                                "type": "function",
                                                                "info": "Decorator factory to apply update_wrapper() to a wrapper function",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "wrapped": "None",
                                                                    "assigned": "None",
                                                                    "updated": "None"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "get_intersection": {
                                                        "type": "function",
                                                        "info": "Return the intersection index of multiple pandas series and dataframes.",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "ts_or_df_list": "list[pandas.core.series.Series | pandas.core.frame.DataFrame]"
                                                        }
                                                    },
                                                    "localtime": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "UTC": {
                                                                "type": "object",
                                                                "info": "Abstract base class for time zone info objects.",
                                                                "returns": "zoneinfo.ZoneInfo"
                                                            },
                                                            "date_astimezone": {
                                                                "type": "function",
                                                                "info": "Convert a date to a datetime in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date",
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "normalize": {
                                                                "type": "function",
                                                                "info": "Normalize a date to a midnight time in UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "now": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {}
                                                            },
                                                            "prev_weekday": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {
                                                                    "date": "datetime.date"
                                                                }
                                                            },
                                                            "prev_weekday_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "to_timezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to another time zone.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime",
                                                                    "timezone_str": "str"
                                                                }
                                                            },
                                                            "to_utctimezone": {
                                                                "type": "function",
                                                                "info": "Converts an aware datetime to UTC.",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "local_time": "datetime.datetime"
                                                                }
                                                            },
                                                            "today": {
                                                                "type": "function",
                                                                "info": "",
                                                                "returns": "datetime.date",
                                                                "parameters": {}
                                                            },
                                                            "today_astimezone": {
                                                                "type": "function",
                                                                "info": "Return local today's midnight in timezone (default UTC).",
                                                                "returns": "datetime.datetime",
                                                                "parameters": {
                                                                    "tzinfo": "zoneinfo.ZoneInfo"
                                                                }
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "month_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced for a month.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "df_or_ts": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "time_slice": {
                                                        "type": "function",
                                                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                                                        "returns": "pd.Series|pd.DataFrame",
                                                        "parameters": {
                                                            "ts_or_df": "pd.Series|pd.DataFrame",
                                                            "start_at": "datetime.datetime | None",
                                                            "end_at": "datetime.datetime | None",
                                                            "is_closed_right": "bool"
                                                        }
                                                    },
                                                    "to_continuous_time_index": {
                                                        "type": "function",
                                                        "info": "Create a continuous time index from a Pandas date time index (default on 365 days).",
                                                        "returns": "pd.Index",
                                                        "parameters": {
                                                            "time_index": "pd.DatetimeIndex",
                                                            "base_time": "datetime.datetime | None",
                                                            "reference_period": "datetime.timedelta"
                                                        }
                                                    },
                                                    "to_continuous_time_series": {
                                                        "type": "function",
                                                        "info": "Convert a pandas time series to a continuous time series.",
                                                        "returns": "pd.Series",
                                                        "parameters": {
                                                            "time_series": "pd.Series",
                                                            "base_time": "datetime.datetime | None"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "info": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "class_repr": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "class_instance": "noos.analytics._core.collections.Any",
                                                            "repr_attributes": "tuple[str, ...]",
                                                            "omit_class_name": "bool"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "localtime": {
                                                "type": "module",
                                                "info": "",
                                                "items": {
                                                    "UTC": {
                                                        "type": "object",
                                                        "info": "Abstract base class for time zone info objects.",
                                                        "returns": "zoneinfo.ZoneInfo"
                                                    },
                                                    "date_astimezone": {
                                                        "type": "function",
                                                        "info": "Convert a date to a datetime in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date",
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "normalize": {
                                                        "type": "function",
                                                        "info": "Normalize a date to a midnight time in UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "now": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {}
                                                    },
                                                    "prev_weekday": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {
                                                            "date": "datetime.date"
                                                        }
                                                    },
                                                    "prev_weekday_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "to_timezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to another time zone.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime",
                                                            "timezone_str": "str"
                                                        }
                                                    },
                                                    "to_utctimezone": {
                                                        "type": "function",
                                                        "info": "Converts an aware datetime to UTC.",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "local_time": "datetime.datetime"
                                                        }
                                                    },
                                                    "today": {
                                                        "type": "function",
                                                        "info": "",
                                                        "returns": "datetime.date",
                                                        "parameters": {}
                                                    },
                                                    "today_astimezone": {
                                                        "type": "function",
                                                        "info": "Return local today's midnight in timezone (default UTC).",
                                                        "returns": "datetime.datetime",
                                                        "parameters": {
                                                            "tzinfo": "zoneinfo.ZoneInfo"
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "symbols": {
                                                "type": "module",
                                                "info": "Mnemonic for naming instruments.",
                                                "items": {
                                                    "ASSET": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "ASSET_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "CALENDAR_PERIOD": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "CALENDAR_PERIOD_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "CONTRACT": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "CONTRACT_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "INTRADAY_PERIOD": {
                                                        "type": "object",
                                                        "info": "Built-in mutable sequence.",
                                                        "returns": "pd.Series.list"
                                                    },
                                                    "INTRADAY_PERIOD_LIST": {
                                                        "type": "object",
                                                        "info": "str(object='') -> str",
                                                        "returns": "pd.CategoricalIndex.str"
                                                    },
                                                    "contracts": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "base": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "battery": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "brp": {
                                                                "type": "module",
                                                                "info": "Module describing Balancing Responsible Party contracts (spot, imbalance, ispp, ispn).",
                                                                "items": {}
                                                            },
                                                            "exceptions": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "forward": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "info": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "market_data": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "price_load_with_series": {
                                                                "type": "function",
                                                                "info": "Compute the monetary value of the load time series given a price time series.",
                                                                "returns": "pd.Series",
                                                                "parameters": {
                                                                    "load": "noos.analytics.LoadCurveBase",
                                                                    "price_ts": "pd.Series",
                                                                    "risk_premium": "float",
                                                                    "risk_premium_pct": "float"
                                                                }
                                                            },
                                                            "pricing": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "exceptions": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "instruments": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "ASSET_REGISTRY": {
                                                                "type": "object",
                                                                "info": "Generic registry collection.",
                                                                "returns": "noos.analytics._domain.registries.assets.asset_registry.AssetRegistry"
                                                            },
                                                            "REGEX_USCORE": {
                                                                "type": "object",
                                                                "info": "str(object='') -> str",
                                                                "returns": "pd.CategoricalIndex.str"
                                                            },
                                                            "assets": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "datetimes": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on date times.",
                                                                "items": {}
                                                            },
                                                            "decorators": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "deliveries": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "index": {
                                                                "type": "module",
                                                                "info": "Logic for validating index instruments.",
                                                                "items": {}
                                                            },
                                                            "strings": {
                                                                "type": "module",
                                                                "info": "Utility functions for operating on strings.",
                                                                "items": {}
                                                            },
                                                            "total_ordering": {
                                                                "type": "function",
                                                                "info": "Class decorator that fills in missing ordering methods",
                                                                "returns": "None",
                                                                "parameters": {
                                                                    "cls": "None"
                                                                }
                                                            },
                                                            "types": {
                                                                "type": "module",
                                                                "info": "",
                                                                "items": {}
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "symbol_from_dict": {
                                                        "type": "function",
                                                        "info": "Construct a symbol from a dictionary.",
                                                        "returns": "pd.CategoricalIndex.str",
                                                        "parameters": {
                                                            "record": "dict[str, typing.Any]"
                                                        }
                                                    },
                                                    "symbol_to_dict": {
                                                        "type": "function",
                                                        "info": "Construct a dictionary from a symbol.",
                                                        "returns": "dict[str, typing.Any]",
                                                        "parameters": {
                                                            "symbol": "str"
                                                        }
                                                    },
                                                    "types": {
                                                        "type": "module",
                                                        "info": "",
                                                        "items": {
                                                            "AnyPandas": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "AnyTimezone": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 604 union type",
                                                                "returns": "types.UnionType"
                                                            },
                                                            "MetadataType": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Record": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "Records": {
                                                                "type": "object",
                                                                "info": "Represent a PEP 585 generic type",
                                                                "returns": "types.GenericAlias"
                                                            },
                                                            "__init__": {
                                                                "type": "object",
                                                                "info": "",
                                                                "returns": "method-wrapper"
                                                            }
                                                        }
                                                    },
                                                    "__init__": {
                                                        "type": "object",
                                                        "info": "",
                                                        "returns": "method-wrapper"
                                                    }
                                                }
                                            },
                                            "__init__": {
                                                "type": "object",
                                                "info": "",
                                                "returns": "method-wrapper"
                                            }
                                        }
                                    },
                                    "__init__": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method-wrapper"
                                    }
                                }
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "method-wrapper"
                            }
                        }
                    },
                    "check_calendar": {
                        "type": "class",
                        "info": "Class validating the type of a calendar delivery period.",
                        "returns": "noos_analytics._domain.products.validators.calendar.PeriodValidator",
                        "items": {
                            "is_hol": {
                                "type": "property",
                                "info": "Return the no holiday flag.",
                                "returns": "bool"
                            },
                            "is_rolling": {
                                "type": "property",
                                "info": "Return the is_rolling flag.",
                                "returns": "bool"
                            },
                            "period": {
                                "type": "property",
                                "info": "Return the string representing the period.",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "period_class": {
                                "type": "property",
                                "info": "Return the validated Period.",
                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                            },
                            "start_date": {
                                "type": "property",
                                "info": "Return the start date for the period.",
                                "returns": "datetime.date"
                            },
                            "symbol": {
                                "type": "property",
                                "info": "Return the period code for a validated calendar delivery period.",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "period": "str"
                                }
                            }
                        }
                    },
                    "check_intraday": {
                        "type": "class",
                        "info": "Class validating the type of an intraday delivery period.",
                        "returns": "noos_analytics._domain.products.validators.intraday.PeriodValidator",
                        "items": {
                            "is_off": {
                                "type": "property",
                                "info": "Return the validated off flag.",
                                "returns": "bool"
                            },
                            "period": {
                                "type": "property",
                                "info": "Return the validated intraday name.",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "period_class": {
                                "type": "property",
                                "info": "Return the validated intraday Period class instance.",
                                "returns": "noos.analytics._domain.products.deliveries.calendar.Period"
                            },
                            "period_number": {
                                "type": "property",
                                "info": "Return the validated period_number.",
                                "returns": "int"
                            },
                            "period_order": {
                                "type": "property",
                                "info": "Return the period order for sorting.",
                                "returns": "int"
                            },
                            "symbol": {
                                "type": "property",
                                "info": "Return the period_code for a validated intraday delivery period.",
                                "returns": "pd.CategoricalIndex.str"
                            },
                            "weekmask": {
                                "type": "property",
                                "info": "Return the period weekmask.",
                                "returns": "list[int]"
                            },
                            "__init__": {
                                "type": "function",
                                "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                "returns": "None",
                                "parameters": {
                                    "period": "str"
                                }
                            }
                        }
                    },
                    "constants": {
                        "type": "module",
                        "info": "",
                        "items": {
                            "AssetUnitConversionFactor": {
                                "type": "class",
                                "info": "Convert a string or number to a floating-point number, if possible.",
                                "returns": "noos.analytics.constants.AssetUnitConversionFactor",
                                "items": {
                                    "GC": {
                                        "type": "object",
                                        "info": "Convert a string or number to a floating-point number, if possible.",
                                        "returns": "noos.analytics.constants.AssetUnitConversionFactor"
                                    },
                                    "KW": {
                                        "type": "object",
                                        "info": "Convert a string or number to a floating-point number, if possible.",
                                        "returns": "noos.analytics.constants.AssetUnitConversionFactor"
                                    },
                                    "MW": {
                                        "type": "object",
                                        "info": "Convert a string or number to a floating-point number, if possible.",
                                        "returns": "noos.analytics.constants.AssetUnitConversionFactor"
                                    },
                                    "W": {
                                        "type": "object",
                                        "info": "Convert a string or number to a floating-point number, if possible.",
                                        "returns": "noos.analytics.constants.AssetUnitConversionFactor"
                                    },
                                    "__getitem__": {
                                        "type": "object",
                                        "info": "Create a bound instance method object.",
                                        "returns": "method"
                                    },
                                    "as_integer_ratio": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method_descriptor"
                                    },
                                    "conjugate": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method_descriptor"
                                    },
                                    "fromhex": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "builtin_function_or_method"
                                    },
                                    "hex": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method_descriptor"
                                    },
                                    "imag": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "getset_descriptor"
                                    },
                                    "is_integer": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "method_descriptor"
                                    },
                                    "name": {
                                        "type": "object",
                                        "info": "This is a descriptor, used to define attributes that act differently",
                                        "returns": "enum.property"
                                    },
                                    "real": {
                                        "type": "object",
                                        "info": "",
                                        "returns": "getset_descriptor"
                                    },
                                    "value": {
                                        "type": "object",
                                        "info": "This is a descriptor, used to define attributes that act differently",
                                        "returns": "enum.property"
                                    },
                                    "__init__": {
                                        "type": "function",
                                        "info": "Initialize self.  See help(type(self)) for accurate signature.",
                                        "returns": "None",
                                        "parameters": {
                                            "args": "None",
                                            "kwds": "None"
                                        }
                                    }
                                }
                            },
                            "LONDON": {
                                "type": "object",
                                "info": "Abstract base class for time zone info objects.",
                                "returns": "zoneinfo.ZoneInfo"
                            },
                            "PARIS": {
                                "type": "object",
                                "info": "Abstract base class for time zone info objects.",
                                "returns": "zoneinfo.ZoneInfo"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "method-wrapper"
                            }
                        }
                    },
                    "convert_date_and_sp_to_utc": {
                        "type": "function",
                        "info": "Return an UTC-aware datetime index from local settlement dates and settlement periods.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "dataframe": "pd.DataFrame",
                            "timezone_str": "str",
                            "frequency_timedelta": "datetime.timedelta"
                        }
                    },
                    "convert_date_and_sp_to_utc_datetime": {
                        "type": "function",
                        "info": "Return an UTC-aware datetime from a local settlement date and settlement period.",
                        "returns": "datetime.datetime",
                        "parameters": {
                            "local_date": "datetime.date",
                            "sp": "int",
                            "timezone_str": "str",
                            "frequency_timedelta": "datetime.timedelta"
                        }
                    },
                    "convert_date_and_sp_to_utc_for_asset": {
                        "type": "function",
                        "info": "Return an UTC-aware datetime index from local settlement dates and settlement periods.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "dataframe": "pd.DataFrame",
                            "asset_name": "str"
                        }
                    },
                    "convert_utc_datetime_to_date_and_sp": {
                        "type": "function",
                        "info": "Return date and settlement period from an UTC-aware datetime.",
                        "returns": "typing.Tuple[datetime.date, int]",
                        "parameters": {
                            "utc_datetime": "datetime.datetime",
                            "timezone_str": "str",
                            "frequency_timedelta": "datetime.timedelta"
                        }
                    },
                    "convert_utc_to_date_and_sp": {
                        "type": "function",
                        "info": "Return dates and settlement periods from an UTC-aware datetime index.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "dataframe": "pd.DataFrame",
                            "timezone_str": "str",
                            "frequency_timedelta": "datetime.timedelta"
                        }
                    },
                    "convert_utc_to_date_and_sp_for_asset": {
                        "type": "function",
                        "info": "Return dates and settlement periods from an UTC-aware datetime index for a given asset.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "dataframe": "pd.DataFrame",
                            "asset_name": "str"
                        }
                    },
                    "create_from_historic_means": {
                        "type": "function",
                        "info": "Extrapolate historic curve from means in local time.",
                        "returns": "pd.Series",
                        "parameters": {
                            "historic": "pd.DataFrame",
                            "start_at": "datetime.datetime",
                            "end_at": "datetime.datetime",
                            "frequency": "str",
                            "timezone_str": "str"
                        }
                    },
                    "create_time_index": {
                        "type": "function",
                        "info": "Create a pandas UTC-aware date time index for a given frequency.",
                        "returns": "pd.DatetimeIndex",
                        "parameters": {
                            "start_at": "datetime.datetime",
                            "end_at": "datetime.datetime",
                            "frequency": "str",
                            "timezone_str": "str",
                            "inclusive": "typing.Union[typing.Literal['left', 'right'], typing.Literal['both', 'neither']]"
                        }
                    },
                    "curve_from_fixings_fleten": {
                        "type": "function",
                        "info": "Calibrate a price forward curve object from a set of market fixings and historical features.",
                        "returns": "noos.analytics.PriceForwardCurve",
                        "parameters": {
                            "fixings": "pd.DataFrame",
                            "features": "pd.DataFrame",
                            "created_at": "datetime.datetime | None"
                        }
                    },
                    "curve_from_fixings_identity": {
                        "type": "function",
                        "info": "Calibrate a price forward curve object from a set of market fixings and features.",
                        "returns": "noos.analytics.PriceForwardCurve",
                        "parameters": {
                            "fixings": "pd.DataFrame",
                            "features": "pd.DataFrame",
                            "created_at": "datetime.datetime | None"
                        }
                    },
                    "curve_to_monthly_prices": {
                        "type": "function",
                        "info": "Return a pandas dataframe of monthly products with price from a price forward curve object.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "curve": "noos.analytics.PriceForwardCurve",
                            "intraday_delivery": "str"
                        }
                    },
                    "definitions": {
                        "type": "module",
                        "info": "",
                        "items": {
                            "ASSET": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "CALENDAR_PERIOD": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "CONTRACT": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "CONTRACT_COLUMNS": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "DELIVERY_COLUMNS": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "FIXING_COLUMNS": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "FIXING_DATE_COLUMNS": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "HEDGE_COLUMNS": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "INTERVALS_COLUMNS": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "INTRADAY_PERIOD": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "PRODUCT_COLUMNS": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "THM_TO_KWH": {
                                "type": "object",
                                "info": "Convert a string or number to a floating-point number, if possible.",
                                "returns": "float"
                            },
                            "TRADE_COLUMNS": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "TRADE_DATE_COLUMNS": {
                                "type": "object",
                                "info": "Built-in mutable sequence.",
                                "returns": "pd.Series.list"
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "method-wrapper"
                            }
                        }
                    },
                    "ensure_tz_aware_datetime": {
                        "type": "function",
                        "info": "Returns a datetime object with timezone (assumes UTC by default).",
                        "returns": "datetime.datetime",
                        "parameters": {
                            "obj": "str | datetime.datetime | datetime.date"
                        }
                    },
                    "ensure_utc_datetime": {
                        "type": "function",
                        "info": "Returns a datetime object with UTC timezone.",
                        "returns": "datetime.datetime",
                        "parameters": {
                            "obj": "str | datetime.datetime | datetime.date"
                        }
                    },
                    "extrapolate_curve": {
                        "type": "function",
                        "info": "Extrapolate a time series to a given range.",
                        "returns": "pd.Series",
                        "parameters": {
                            "ts": "pd.Series",
                            "start_at": "datetime.datetime",
                            "end_at": "datetime.datetime",
                            "frequency": "str",
                            "inclusive": "str",
                            "train_size": "float",
                            "additional_features": "pd.DataFrame| None",
                            "scaler": "str",
                            "scaling_factors": "pd.Series| None",
                            "time_features": "noos.analytics._domain.curves.extrapolate.TimeFeatures| None",
                            "extrapolator_kwargs": "<class 'pandas.core.series.Series'>"
                        }
                    },
                    "generate_calendar_deliveries": {
                        "type": "function",
                        "info": "Generate a list of calendar deliveries based on the parameters.",
                        "returns": "list[str]",
                        "parameters": {
                            "period": "str",
                            "start_at": "datetime.datetime | str | None",
                            "end_at": "datetime.datetime | str | None",
                            "n_products": "int | None"
                        }
                    },
                    "generate_calendar_deliveries_from_load": {
                        "type": "function",
                        "info": "Generate a list of calendar deliveries based on the load curve.",
                        "returns": "list[str]",
                        "parameters": {
                            "load": "noos.analytics.LoadCurveBase",
                            "period": "str"
                        }
                    },
                    "get_hedges_from_volumes": {
                        "type": "function",
                        "info": "Return a pandas dataframe with hedges for given volumes across delivery periods.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "volumes": "pd.Series",
                            "products": "pd.DataFrame"
                        }
                    },
                    "get_load_from_hedges": {
                        "type": "function",
                        "info": "Return a load instance from given hedges.",
                        "returns": "noos.analytics.LoadCurveBase",
                        "parameters": {
                            "hedges": "pd.DataFrame"
                        }
                    },
                    "get_registers": {
                        "type": "function",
                        "info": "Build registers given a load curve and register masks.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "load_ts": "pd.Series",
                            "mask_map": "dict[str, collections.abc.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame],pd.Series| pandas.core.frame.DataFrame]]"
                        }
                    },
                    "get_volumes_and_costs_from_trades": {
                        "type": "function",
                        "info": "Return a pandas dataframe with volumes and costs across custom frequency periods.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "trades": "pd.DataFrame",
                            "freq": "str | None"
                        }
                    },
                    "get_volumes_from_hedges": {
                        "type": "function",
                        "info": "Return a pandas dataframe with hedged volumes across delivery periods.",
                        "returns": "pd.Series",
                        "parameters": {
                            "hedges": "pd.DataFrame"
                        }
                    },
                    "imbalance_strategies_revenue": {
                        "type": "function",
                        "info": "Return a pandas dataframe with volumes and strategies revenue on intersection of all series.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "volume_actual": "pd.Series",
                            "volume_predicted": "pd.Series",
                            "da_ts": "pd.Series",
                            "imbalance_positive_ts": "pd.Series",
                            "imbalance_negative_ts": "pd.Series"
                        }
                    },
                    "infer_nil_end": {
                        "type": "function",
                        "info": "Close a time series by adding a 0 value at the end of the last interval.",
                        "returns": "pd.Series",
                        "parameters": {
                            "ts": "pd.Series",
                            "timestep": "datetime.timedelta"
                        }
                    },
                    "logger": {
                        "type": "object",
                        "info": "Instances of the Logger class represent a single logging channel. A",
                        "returns": "logging.Logger"
                    },
                    "masks": {
                        "type": "module",
                        "info": "",
                        "items": {
                            "days_holidays": {
                                "type": "function",
                                "info": "Public holidays for a single country.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame",
                                    "country_code": "str"
                                }
                            },
                            "days_we": {
                                "type": "function",
                                "info": "WE days.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "eex_peak": {
                                "type": "function",
                                "info": "EEX Peak Power definition: peak hours during weekdays including holidays.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "fr_arenh": {
                                "type": "function",
                                "info": "France ARENH scheme.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "fr_capacity_obligation": {
                                "type": "function",
                                "info": "France capacity obligation scheme.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "fr_hc": {
                                "type": "function",
                                "info": "France offpeak hours `Heures Creuses`.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "fr_hce": {
                                "type": "function",
                                "info": "France summer offpeak hours `Heures Creuses Ete`.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "fr_hch": {
                                "type": "function",
                                "info": "France winter offpeak hours `Heures Creuses Hiver`.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "fr_hp": {
                                "type": "function",
                                "info": "France peak hours `Heures Pleines`.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "fr_hpe": {
                                "type": "function",
                                "info": "France summer peak hours `Heures Pleines Ete`.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "fr_hph": {
                                "type": "function",
                                "info": "France winter peak hours `Heures Pleines Hiver`.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "hours_extended_peak": {
                                "type": "function",
                                "info": "Hours 7 to 23 in local time.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "hours_fr_peak_capacity_obligation": {
                                "type": "function",
                                "info": "Hours 7 to 15 and 18 to 20 in local time.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "hours_night_offpeak": {
                                "type": "function",
                                "info": "Hours 1 to 7 at night in local time.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "hours_peak": {
                                "type": "function",
                                "info": "Hours 8 to 20 in local time.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "hours_shoulder_peak": {
                                "type": "function",
                                "info": "Hours 8 to 10 and 18 to 20 in local time.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "identity": {
                                "type": "function",
                                "info": "Indentiy: no change.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "mask_fr_arenh": {
                                "type": "function",
                                "info": "France ARENH scheme.",
                                "returns": "pd.Series|pd.DataFrame",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "mask_fr_capacity_obligation": {
                                "type": "function",
                                "info": "France capacity obligation scheme.",
                                "returns": "pd.Series|pd.DataFrame",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "mask_fr_hc": {
                                "type": "function",
                                "info": "France offpeak hours `Heures Creuses`.",
                                "returns": "pd.Series|pd.DataFrame",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "mask_fr_hce": {
                                "type": "function",
                                "info": "France summer offpeak hours `Heures Creuses Ete`.",
                                "returns": "pd.Series|pd.DataFrame",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "mask_fr_hch": {
                                "type": "function",
                                "info": "France winter offpeak hours `Heures Creuses Hiver`.",
                                "returns": "pd.Series|pd.DataFrame",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "mask_fr_hp": {
                                "type": "function",
                                "info": "France peak hours `Heures Pleines`.",
                                "returns": "pd.Series|pd.DataFrame",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "mask_fr_hpe": {
                                "type": "function",
                                "info": "France summer peak hours `Heures Pleines Ete`.",
                                "returns": "pd.Series|pd.DataFrame",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "mask_fr_hph": {
                                "type": "function",
                                "info": "France winter peak hours `Heures Pleines Hiver`.",
                                "returns": "pd.Series|pd.DataFrame",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "season_q1": {
                                "type": "function",
                                "info": "January to March inclusive.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "season_q4": {
                                "type": "function",
                                "info": "October to December inclusive.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "season_shoulder_months": {
                                "type": "function",
                                "info": "April to June and September to October inclusive.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "season_summer_peak": {
                                "type": "function",
                                "info": "July and August.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "season_winter": {
                                "type": "function",
                                "info": "October to March inclusive.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "season_winter_peak": {
                                "type": "function",
                                "info": "November to March inclusive.",
                                "returns": "numpy.ndarray",
                                "parameters": {
                                    "df": "pd.Series|pd.DataFrame"
                                }
                            },
                            "__init__": {
                                "type": "object",
                                "info": "",
                                "returns": "method-wrapper"
                            }
                        }
                    },
                    "month_slice": {
                        "type": "function",
                        "info": "Return a pandas serie or dataframe sliced for a month.",
                        "returns": "pd.Series|pd.DataFrame",
                        "parameters": {
                            "df_or_ts": "pd.Series|pd.DataFrame",
                            "start_at": "datetime.datetime",
                            "is_closed_right": "bool"
                        }
                    },
                    "normalize_index_on_intervals": {
                        "type": "function",
                        "info": "Normalize an index_value to the given frequency either linearly or with coefficients.",
                        "returns": "pd.Series",
                        "parameters": {
                            "interval_df": "pd.DataFrame",
                            "frequency": "str",
                            "value_column_name": "str",
                            "coef_df": "pd.DataFrame| None"
                        }
                    },
                    "prev_weekday_astimezone": {
                        "type": "function",
                        "info": "Return local today's midnight in timezone (default UTC).",
                        "returns": "datetime.datetime",
                        "parameters": {
                            "tzinfo": "zoneinfo.ZoneInfo"
                        }
                    },
                    "price_load_with_series": {
                        "type": "function",
                        "info": "Compute the monetary value of the load time series given a price time series.",
                        "returns": "pd.Series",
                        "parameters": {
                            "load": "noos.analytics.LoadCurveBase",
                            "price_ts": "pd.Series",
                            "risk_premium": "float",
                            "risk_premium_pct": "float"
                        }
                    },
                    "price_products_with_curve": {
                        "type": "function",
                        "info": "Return a pandas dataframe with volume and price for a given curve and products.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "products": "pd.DataFrame",
                            "curve": "noos.analytics.PriceForwardCurve"
                        }
                    },
                    "price_products_with_series": {
                        "type": "function",
                        "info": "Return a pandas dataframe with volume and price for a given curve and products.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "products": "pd.DataFrame",
                            "curve_ts": "pd.Series"
                        }
                    },
                    "price_trades_with_curve": {
                        "type": "function",
                        "info": "Return a pandas dataframe with volume, price, value, pnl for a given curve and trades.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "trades": "pd.DataFrame",
                            "curve": "noos.analytics.PriceForwardCurve"
                        }
                    },
                    "price_trades_with_series": {
                        "type": "function",
                        "info": "Return a pandas dataframe with volume, price, value, pnl for a given curve and trades.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "trades": "pd.DataFrame",
                            "curve_ts": "pd.Series"
                        }
                    },
                    "pricing_pwfr_base": {
                        "type": "function",
                        "info": "Returns a dictionnary with Base Dataframes for French power pricing.",
                        "returns": "noos.analytics._domain.pricings.consumer_pwfr.PricingBase",
                        "parameters": {
                            "loads_df": "pd.DataFrame",
                            "curve_ts": "pd.Series",
                            "arenh_df": "pd.DataFrame",
                            "frequency_timedelta": "datetime.timedelta"
                        }
                    },
                    "pricing_pwfr_multiple": {
                        "type": "function",
                        "info": "Return a detailled French power pricing per year including arenh and capacity obligation.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "loads_df": "pd.DataFrame",
                            "curve_ts": "pd.Series",
                            "arenh_df": "pd.DataFrame",
                            "frequency_timedelta": "datetime.timedelta | None"
                        }
                    },
                    "pricing_pwfr_with_masks": {
                        "type": "function",
                        "info": "Return a dictionnary with French power prices including arenh and capacity obligation.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "load_ts": "pd.Series",
                            "curve_ts": "pd.Series",
                            "arenh_df": "pd.DataFrame",
                            "mask_map": "dict[str, collections.abc.Callable[[pandas.core.series.Series | pandas.core.frame.DataFrame],pd.Series| pandas.core.frame.DataFrame]]",
                            "arenh_smoothing": "typing.Annotated[float, 'percentage (between 0 and 1)']",
                            "frequency_timedelta": "datetime.timedelta | None"
                        }
                    },
                    "profile_from_intervals": {
                        "type": "function",
                        "info": "Generate profiles to the given frequency either linearly or with coefficients.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "grouped_df": "pd.DataFrame",
                            "frequency": "str",
                            "value_column_name": "str",
                            "coef_df": "pd.DataFrame| None"
                        }
                    },
                    "scenario_from_coefficients": {
                        "type": "function",
                        "info": "Generate a normalized scenario serie given profile coefficients and scenario details.",
                        "returns": "pd.Series",
                        "parameters": {
                            "coef_ts": "pd.Series",
                            "scenario_rate": "float",
                            "scenario_frequency": "datetime.timedelta",
                            "start_at": "datetime.datetime",
                            "end_at": "datetime.datetime"
                        }
                    },
                    "spark_spread": {
                        "type": "function",
                        "info": "Compute a simple spark spread with heat_rate, emissions and maintenance.",
                        "returns": "pd.Series",
                        "parameters": {
                            "power_ts": "pd.Series",
                            "gas_ts": "pd.Series",
                            "co2_ts": "pd.Series",
                            "heat_rate": "float",
                            "emissions": "float",
                            "maintenance": "float"
                        }
                    },
                    "symbol_from_dict": {
                        "type": "function",
                        "info": "Construct a symbol from a dictionary.",
                        "returns": "pd.CategoricalIndex.str",
                        "parameters": {
                            "record": "dict[str, typing.Any]"
                        }
                    },
                    "symbol_to_dict": {
                        "type": "function",
                        "info": "Construct a dictionary from a symbol.",
                        "returns": "dict[str, typing.Any]",
                        "parameters": {
                            "symbol": "str"
                        }
                    },
                    "time_slice": {
                        "type": "function",
                        "info": "Return a pandas serie or dataframe sliced between start_at and end_at.",
                        "returns": "pd.Series|pd.DataFrame",
                        "parameters": {
                            "ts_or_df": "pd.Series|pd.DataFrame",
                            "start_at": "datetime.datetime | None",
                            "end_at": "datetime.datetime | None",
                            "is_closed_right": "bool"
                        }
                    },
                    "to_timedelta": {
                        "type": "function",
                        "info": "Transform a frequency string into a timedelta object.",
                        "returns": "datetime.timedelta",
                        "parameters": {
                            "freq": "str"
                        }
                    },
                    "today_astimezone": {
                        "type": "function",
                        "info": "Return local today's midnight in timezone (default UTC).",
                        "returns": "datetime.datetime",
                        "parameters": {
                            "tzinfo": "zoneinfo.ZoneInfo"
                        }
                    },
                    "volume_from_historic_means": {
                        "type": "function",
                        "info": "Create a curve from historic data based on means across month, day_of_week, hour.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "historic_df": "pd.DataFrame",
                            "asset_name": "str",
                            "start_at": "datetime.datetime",
                            "end_at": "datetime.datetime",
                            "value_column_name": "str"
                        }
                    },
                    "volume_from_intervals": {
                        "type": "function",
                        "info": "Create a unique aggregated volume curve across intervals.",
                        "returns": "pd.DataFrame",
                        "parameters": {
                            "population_df": "pd.DataFrame",
                            "frequency": "str",
                            "value_column_name": "str"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "method-wrapper"
                    }
                }
            },
            "mtm": {
                "type": "object",
                "info": "Market data for pricing.",
                "returns": "noos.analytics.MarketData"
            },
            "risk": {
                "type": "object",
                "info": "",
                "returns": "_env.RiskLoad"
            },
            "__init__": {
                "type": "object",
                "info": "",
                "returns": "wrapper_descriptor"
            }
        }
    },
    "_env": {
        "importName": "noos_env",
        "items": {
            "RiskLoad": {
                "type": "class",
                "info": "",
                "returns": "_env.RiskLoad",
                "items": {
                    "__call__": {
                        "type": "function",
                        "info": "Call self as a function.",
                        "returns": "noos.analytics.PwrteLoadCurve",
                        "parameters": {
                            "regex": "str | None",
                            "regex_exclude": "str | None",
                            "metadata": "dict | None",
                            "metadata_exclude": "dict | None",
                            "delivery_from": "datetime.datetime | None",
                            "delivery_to": "datetime.datetime | None",
                            "versioned_at": "datetime.datetime | None",
                            "fetch_hyper": "bool"
                        }
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "noos": {
                "type": "class",
                "info": "noos namespace.",
                "returns": "_env.noos",
                "items": {
                    "mtm": {
                        "type": "object",
                        "info": "Market data for pricing.",
                        "returns": "noos.analytics.MarketData"
                    },
                    "risk": {
                        "type": "object",
                        "info": "",
                        "returns": "_env.RiskLoad"
                    },
                    "__init__": {
                        "type": "object",
                        "info": "",
                        "returns": "wrapper_descriptor"
                    }
                }
            },
            "__init__": {
                "type": "object",
                "info": "",
                "returns": "method-wrapper"
            }
        }
    }
}